
DUAL_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005588  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ac  080057ac  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057b4  080057b4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080057bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  2000005c  08005818  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005818  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013534  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b7  00000000  00000000  0001a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e41  00000000  00000000  0001dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022db8  00000000  00000000  0001ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014812  00000000  00000000  00041bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbc95  00000000  00000000  000563d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  001320ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  001373e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005700 	.word	0x08005700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005700 	.word	0x08005700

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <DAC_SetOutput>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DAC_SetOutput(uint32_t value)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    // Write a digital value to the DAC (12-bit resolution)
    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <DAC_SetOutput+0x1c>)
 80005bc:	f001 fee7 	bl	800238e <HAL_DAC_SetValue>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000124 	.word	0x20000124

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fc7c 	bl	8000ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f849 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9d3 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f9b3 	bl	8000948 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f981 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005e6:	f000 f8a3 	bl	8000730 <MX_ADC1_Init>
  MX_TIM6_Init();
 80005ea:	f000 f947 	bl	800087c <MX_TIM6_Init>
  MX_DAC1_Init();
 80005ee:	f000 f913 	bl	8000818 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  // Initiate clock timer TIM1
  HAL_TIM_Base_Start(&htim6);
 80005f2:	4817      	ldr	r0, [pc, #92]	@ (8000650 <main+0x84>)
 80005f4:	f003 fd8e 	bl	8004114 <HAL_TIM_Base_Start>

  // initiate ADC Transfer to DMA, clocked by the compare register
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_buffer, BUFFER_SIZE);
 80005f8:	220a      	movs	r2, #10
 80005fa:	4916      	ldr	r1, [pc, #88]	@ (8000654 <main+0x88>)
 80005fc:	4816      	ldr	r0, [pc, #88]	@ (8000658 <main+0x8c>)
 80005fe:	f001 f809 	bl	8001614 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Format ADC values into a string
	  if (uart_ready)
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <main+0x90>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d018      	beq.n	800063c <main+0x70>
	  {
		  snprintf(msg, sizeof(msg), "ADC1: %lu, ADC2: %lu\r\n", adc_buffer[0], adc_buffer[1]);
 800060a:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <main+0x88>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <main+0x88>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <main+0x94>)
 8000618:	2132      	movs	r1, #50	@ 0x32
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <main+0x98>)
 800061c:	f004 fbbc 	bl	8004d98 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000620:	4810      	ldr	r0, [pc, #64]	@ (8000664 <main+0x98>)
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	490d      	ldr	r1, [pc, #52]	@ (8000664 <main+0x98>)
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <main+0x9c>)
 8000632:	f003 fedf 	bl	80043f4 <HAL_UART_Transmit>
		  uart_ready = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <main+0x90>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
	  }

	  // GPIO Output Pin PA5 output analog reading of PA3
	  DAC_SetOutput(adc_buffer[0]);
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <main+0x88>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffb3 	bl	80005ac <DAC_SetOutput>
	  HAL_Delay(100);
 8000646:	2064      	movs	r0, #100	@ 0x64
 8000648:	f000 fcb6 	bl	8000fb8 <HAL_Delay>
	  if (uart_ready)
 800064c:	e7d9      	b.n	8000602 <main+0x36>
 800064e:	bf00      	nop
 8000650:	20000138 	.word	0x20000138
 8000654:	2000020c 	.word	0x2000020c
 8000658:	20000078 	.word	0x20000078
 800065c:	20000234 	.word	0x20000234
 8000660:	08005718 	.word	0x08005718
 8000664:	2000023c 	.word	0x2000023c
 8000668:	20000184 	.word	0x20000184

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	@ 0x58
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	@ 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fbc2 	bl	8004e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000692:	f002 fb61 	bl	8002d58 <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800069c:	f000 f9e6 	bl	8000a6c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a0:	f002 fb3c 	bl	8002d1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006a4:	4b21      	ldr	r3, [pc, #132]	@ (800072c <SystemClock_Config+0xc0>)
 80006a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006aa:	4a20      	ldr	r2, [pc, #128]	@ (800072c <SystemClock_Config+0xc0>)
 80006ac:	f023 0318 	bic.w	r3, r3, #24
 80006b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006b4:	2314      	movs	r3, #20
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c4:	2360      	movs	r3, #96	@ 0x60
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006d4:	2328      	movs	r3, #40	@ 0x28
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fb8b 	bl	8002e04 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f9ba 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2104      	movs	r1, #4
 8000710:	4618      	mov	r0, r3
 8000712:	f002 ff8b 	bl	800362c <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800071c:	f000 f9a6 	bl	8000a6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000720:	f003 fb9e 	bl	8003e60 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000724:	bf00      	nop
 8000726:	3758      	adds	r7, #88	@ 0x58
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000748:	4a30      	ldr	r2, [pc, #192]	@ (800080c <MX_ADC1_Init+0xdc>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074c:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000772:	2201      	movs	r2, #1
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000778:	2202      	movs	r2, #2
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_ADC1_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_ADC1_Init+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_ADC1_Init+0xd8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a6:	4818      	ldr	r0, [pc, #96]	@ (8000808 <MX_ADC1_Init+0xd8>)
 80007a8:	f000 fdf2 	bl	8001390 <HAL_ADC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007b2:	f000 f95b 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_ADC1_Init+0xe0>)
 80007b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ba:	2306      	movs	r3, #6
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80007be:	2307      	movs	r3, #7
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c2:	237f      	movs	r3, #127	@ 0x7f
 80007c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c6:	2304      	movs	r3, #4
 80007c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	@ (8000808 <MX_ADC1_Init+0xd8>)
 80007d4:	f000 ffac 	bl	8001730 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007de:	f000 f945 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_ADC1_Init+0xe4>)
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e6:	230c      	movs	r3, #12
 80007e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_ADC1_Init+0xd8>)
 80007f0:	f000 ff9e 	bl	8001730 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80007fa:	f000 f937 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000078 	.word	0x20000078
 800080c:	50040000 	.word	0x50040000
 8000810:	2e300800 	.word	0x2e300800
 8000814:	32601000 	.word	0x32601000

08000818 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2224      	movs	r2, #36	@ 0x24
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f004 faed 	bl	8004e04 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_DAC1_Init+0x5c>)
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_DAC1_Init+0x60>)
 800082e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <MX_DAC1_Init+0x5c>)
 8000832:	f001 fd8a 	bl	800234a <HAL_DAC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800083c:	f000 f916 	bl	8000a6c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2210      	movs	r2, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <MX_DAC1_Init+0x5c>)
 800085c:	f001 fdbc 	bl	80023d8 <HAL_DAC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f901 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	@ 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000124 	.word	0x20000124
 8000878:	40007400 	.word	0x40007400

0800087c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_TIM6_Init+0x64>)
 800088e:	4a15      	ldr	r2, [pc, #84]	@ (80008e4 <MX_TIM6_Init+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_TIM6_Init+0x64>)
 8000894:	2207      	movs	r2, #7
 8000896:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_TIM6_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_TIM6_Init+0x64>)
 80008a0:	2209      	movs	r2, #9
 80008a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_TIM6_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <MX_TIM6_Init+0x64>)
 80008ac:	f003 fbda 	bl	8004064 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008b6:	f000 f8d9 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ba:	2320      	movs	r3, #32
 80008bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_TIM6_Init+0x64>)
 80008c8:	f003 fce0 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008d2:	f000 f8cb 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000138 	.word	0x20000138
 80008e4:	40001000 	.word	0x40001000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	@ (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART2_UART_Init+0x58>)
 800092c:	f003 fd14 	bl	8004358 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f899 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000184 	.word	0x20000184
 8000944:	40004400 	.word	0x40004400

08000948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_DMA_Init+0x38>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000952:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <MX_DMA_Init+0x38>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6493      	str	r3, [r2, #72]	@ 0x48
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_DMA_Init+0x38>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200b      	movs	r0, #11
 800096c:	f001 fcb7 	bl	80022de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000970:	200b      	movs	r0, #11
 8000972:	f001 fcd0 	bl	8002316 <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_GPIO_Init+0x8c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0x90>)
 80009e8:	f002 f980 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009ec:	2308      	movs	r3, #8
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0x90>)
 8000a04:	f002 f808 	bl	8002a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400

08000a18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	timer_value = __HAL_TIM_GET_COUNTER(&htim6);
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0x20>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000a28:	6013      	str	r3, [r2, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000138 	.word	0x20000138
 8000a3c:	20000238 	.word	0x20000238

08000a40 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
	htim6.Instance->CNT=0;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000234 	.word	0x20000234
 8000a68:	20000138 	.word	0x20000138

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	@ (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09e      	sub	sp, #120	@ 0x78
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2254      	movs	r2, #84	@ 0x54
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 f98f 	bl	8004e04 <memset>
  if(hadc->Instance==ADC1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd8 <HAL_ADC_MspInit+0x118>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d16e      	bne.n	8000bce <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000af4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000af6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000afa:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000afc:	2301      	movs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 8000b04:	2328      	movs	r3, #40	@ 0x28
 8000b06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 ffa8 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b2a:	f7ff ff9f 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a2a      	ldr	r2, [pc, #168]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <HAL_ADC_MspInit+0x11c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5e:	23c0      	movs	r3, #192	@ 0xc0
 8000b60:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b62:	230b      	movs	r3, #11
 8000b64:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f001 ff50 	bl	8002a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000be4 <HAL_ADC_MspInit+0x124>)
 8000b7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b92:	2280      	movs	r2, #128	@ 0x80
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000ba0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000ba8:	2220      	movs	r2, #32
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000bb4:	f001 fd38 	bl	8002628 <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000bbe:	f7ff ff55 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bc8:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <HAL_ADC_MspInit+0x120>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3778      	adds	r7, #120	@ 0x78
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	50040000 	.word	0x50040000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	200000dc 	.word	0x200000dc
 8000be4:	40020008 	.word	0x40020008

08000be8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <HAL_DAC_MspInit+0x74>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d124      	bne.n	8000c54 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_DAC_MspInit+0x78>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f001 fee2 	bl	8002a18 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40007400 	.word	0x40007400
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_TIM_Base_MspInit+0x38>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10b      	bne.n	8000c8e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40001000 	.word	0x40001000
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09e      	sub	sp, #120	@ 0x78
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	2254      	movs	r2, #84	@ 0x54
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f89d 	bl	8004e04 <memset>
  if(huart->Instance==USART2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d148      	bne.n	8000d66 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fec7 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff febe 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a19      	ldr	r2, [pc, #100]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d20:	2304      	movs	r3, #4
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f001 fe6b 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d54:	2303      	movs	r3, #3
 8000d56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f001 fe59 	bl	8002a18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d66:	bf00      	nop
 8000d68:	3778      	adds	r7, #120	@ 0x78
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40021000 	.word	0x40021000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <UsageFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 f8d3 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <DMA1_Channel1_IRQHandler+0x10>)
 8000dde:	f001 fd3b 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000dc 	.word	0x200000dc

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f003 fffa 	bl	8004e14 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000c000 	.word	0x2000c000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000270 	.word	0x20000270
 8000e54:	200003c0 	.word	0x200003c0

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f003 ffb9 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fb8d 	bl	80005cc <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ec0:	080057bc 	.word	0x080057bc
  ldr r2, =_sbss
 8000ec4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ec8:	200003c0 	.word	0x200003c0

08000ecc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_IRQHandler>

08000ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f001 f9f5 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f80e 	bl	8000f00 <HAL_InitTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e001      	b.n	8000ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef0:	f7ff fdc2 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d023      	beq.n	8000f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_InitTick+0x70>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fa01 	bl	8002332 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d809      	bhi.n	8000f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f001 f9cb 	bl	80022de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_InitTick+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e004      	b.n	8000f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000274 	.word	0x20000274

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000274 	.word	0x20000274

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	609a      	str	r2, [r3, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3360      	adds	r3, #96	@ 0x60
 800107a:	461a      	mov	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <LL_ADC_SetOffset+0x44>)
 800108a:	4013      	ands	r3, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	4313      	orrs	r3, r2
 8001098:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	03fff000 	.word	0x03fff000

080010b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3360      	adds	r3, #96	@ 0x60
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3360      	adds	r3, #96	@ 0x60
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3330      	adds	r3, #48	@ 0x30
 8001148:	461a      	mov	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	211f      	movs	r1, #31
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0e9b      	lsrs	r3, r3, #26
 8001170:	f003 011f 	and.w	r1, r3, #31
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	431a      	orrs	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001184:	bf00      	nop
 8001186:	371c      	adds	r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3314      	adds	r3, #20
 80011a0:	461a      	mov	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	0e5b      	lsrs	r3, r3, #25
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	0d1b      	lsrs	r3, r3, #20
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2107      	movs	r1, #7
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	401a      	ands	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	0d1b      	lsrs	r3, r3, #20
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011da:	bf00      	nop
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0318 	and.w	r3, r3, #24
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <LL_ADC_SetChannelSingleDiff+0x44>)
 800120c:	40d9      	lsrs	r1, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	400b      	ands	r3, r1
 8001212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001216:	431a      	orrs	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	0007ffff 	.word	0x0007ffff

08001230 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6093      	str	r3, [r2, #8]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001268:	d101      	bne.n	800126e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800128c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001290:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012b8:	d101      	bne.n	80012be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <LL_ADC_IsEnabled+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_IsEnabled+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800132e:	f043 0204 	orr.w	r2, r3, #4
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	2b04      	cmp	r3, #4
 8001354:	d101      	bne.n	800135a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b08      	cmp	r3, #8
 800137a:	d101      	bne.n	8001380 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e126      	b.n	80015f8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fb81 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff3f 	bl	8001254 <LL_ADC_IsDeepPowerDownEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff25 	bl	8001230 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff5a 	bl	80012a4 <LL_ADC_IsInternalRegulatorEnabled>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d115      	bne.n	8001422 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff3e 	bl	800127c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001400:	4b7f      	ldr	r3, [pc, #508]	@ (8001600 <HAL_ADC_Init+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	4a7f      	ldr	r2, [pc, #508]	@ (8001604 <HAL_ADC_Init+0x274>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	3301      	adds	r3, #1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001414:	e002      	b.n	800141c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3b01      	subs	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f9      	bne.n	8001416 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff3c 	bl	80012a4 <LL_ADC_IsInternalRegulatorEnabled>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10d      	bne.n	800144e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001436:	f043 0210 	orr.w	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff75 	bl	8001342 <LL_ADC_REG_IsConversionOngoing>
 8001458:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80bf 	bne.w	80015e6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80bb 	bne.w	80015e6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001474:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001478:	f043 0202 	orr.w	r2, r3, #2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff35 	bl	80012f4 <LL_ADC_IsEnabled>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001490:	485d      	ldr	r0, [pc, #372]	@ (8001608 <HAL_ADC_Init+0x278>)
 8001492:	f7ff ff2f 	bl	80012f4 <LL_ADC_IsEnabled>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4619      	mov	r1, r3
 80014a2:	485a      	ldr	r0, [pc, #360]	@ (800160c <HAL_ADC_Init+0x27c>)
 80014a4:	f7ff fdac 	bl	8001000 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e5b      	ldrb	r3, [r3, #25]
 80014ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d106      	bne.n	80014e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	3b01      	subs	r3, #1
 80014dc:	045b      	lsls	r3, r3, #17
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <HAL_ADC_Init+0x280>)
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	69b9      	ldr	r1, [r7, #24]
 8001510:	430b      	orrs	r3, r1
 8001512:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff25 	bl	8001368 <LL_ADC_INJ_IsConversionOngoing>
 800151e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13d      	bne.n	80015a2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d13a      	bne.n	80015a2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001530:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001538:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	69b9      	ldr	r1, [r7, #24]
 8001552:	430b      	orrs	r3, r1
 8001554:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800155c:	2b01      	cmp	r3, #1
 800155e:	d118      	bne.n	8001592 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800157c:	4311      	orrs	r1, r2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001582:	430a      	orrs	r2, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	e007      	b.n	80015a2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10c      	bne.n	80015c4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b0:	f023 010f 	bic.w	r1, r3, #15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	1e5a      	subs	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c2:	e007      	b.n	80015d4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020f 	bic.w	r2, r2, #15
 80015d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80015e4:	e007      	b.n	80015f6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	f043 0210 	orr.w	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000000 	.word	0x20000000
 8001604:	053e2d63 	.word	0x053e2d63
 8001608:	50040000 	.word	0x50040000
 800160c:	50040300 	.word	0x50040300
 8001610:	fff0c007 	.word	0xfff0c007

08001614 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe8c 	bl	8001342 <LL_ADC_REG_IsConversionOngoing>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d167      	bne.n	8001700 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADC_Start_DMA+0x2a>
 800163a:	2302      	movs	r3, #2
 800163c:	e063      	b.n	8001706 <HAL_ADC_Start_DMA+0xf2>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fc54 	bl	8001ef4 <ADC_Enable>
 800164c:	4603      	mov	r3, r0
 800164e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d14f      	bne.n	80016f6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	f023 0206 	bic.w	r2, r3, #6
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	659a      	str	r2, [r3, #88]	@ 0x58
 8001682:	e002      	b.n	800168a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <HAL_ADC_Start_DMA+0xfc>)
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_ADC_Start_DMA+0x100>)
 8001698:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <HAL_ADC_Start_DMA+0x104>)
 80016a0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	221c      	movs	r2, #28
 80016a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0210 	orr.w	r2, r2, #16
 80016c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3340      	adds	r3, #64	@ 0x40
 80016dc:	4619      	mov	r1, r3
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f001 f859 	bl	8002798 <HAL_DMA_Start_IT>
 80016e6:	4603      	mov	r3, r0
 80016e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe13 	bl	800131a <LL_ADC_REG_StartConversion>
 80016f4:	e006      	b.n	8001704 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001700:	2302      	movs	r3, #2
 8001702:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001704:	7dfb      	ldrb	r3, [r7, #23]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08002001 	.word	0x08002001
 8001714:	080020d9 	.word	0x080020d9
 8001718:	080020f5 	.word	0x080020f5

0800171c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0b6      	sub	sp, #216	@ 0xd8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x22>
 800174e:	2302      	movs	r3, #2
 8001750:	e3bb      	b.n	8001eca <HAL_ADC_ConfigChannel+0x79a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fdef 	bl	8001342 <LL_ADC_REG_IsConversionOngoing>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 83a0 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3b02      	subs	r3, #2
 8001782:	2b03      	cmp	r3, #3
 8001784:	d81b      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x8e>
 8001786:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <HAL_ADC_ConfigChannel+0x5c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017a5 	.word	0x080017a5
 8001794:	080017ad 	.word	0x080017ad
 8001798:	080017b5 	.word	0x080017b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017a2:	e010      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017a4:	2312      	movs	r3, #18
 80017a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017aa:	e00c      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017ac:	2318      	movs	r3, #24
 80017ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017b2:	e008      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017bc:	e003      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80017d4:	f7ff fcb0 	bl	8001138 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fdb0 	bl	8001342 <LL_ADC_REG_IsConversionOngoing>
 80017e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdbc 	bl	8001368 <LL_ADC_INJ_IsConversionOngoing>
 80017f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 81a4 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 819f 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	461a      	mov	r2, r3
 8001816:	f7ff fcbb 	bl	8001190 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00a      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6919      	ldr	r1, [r3, #16]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800184c:	f7ff fc0c 	bl	8001068 <LL_ADC_SetOffset>
 8001850:	e179      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fc29 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_ADC_ConfigChannel+0x14e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc1e 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	e01e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x18c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc13 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800189c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80018b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1a4>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	e018      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80018e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80018f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001906:	429a      	cmp	r2, r3
 8001908:	d106      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fbe2 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fbc6 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x214>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fbbb 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	e01e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x252>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbb0 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800196a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_ConfigChannel+0x26a>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	e018      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80019b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80019b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80019c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb7f 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb63 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x2da>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb58 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	e01e      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x318>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb4d 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x330>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	e014      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb20 	bl	80010dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fb04 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x398>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff faf9 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e017      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x3c8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff faee 	bl	80010b0 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ae2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x3e0>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b20:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff facb 	bl	80010dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fbd2 	bl	80012f4 <LL_ADC_IsEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8140 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff fb3f 	bl	80011e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a8f      	ldr	r2, [pc, #572]	@ (8001dac <HAL_ADC_ConfigChannel+0x67c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 8131 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x46e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	bf94      	ite	ls
 8001b96:	2301      	movls	r3, #1
 8001b98:	2300      	movhi	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x4a2>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d079      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x4c2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	3301      	adds	r3, #1
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bf0:	e015      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x4ee>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	069b      	lsls	r3, r3, #26
 8001c1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x50e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	e017      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x53e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x564>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x596>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	e081      	b.n	8001dce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x5b6>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce4:	e015      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x5e2>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e003      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x602>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	e017      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x632>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x65e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x69c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e006      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x688>
 8001daa:	bf00      	nop
 8001dac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff f9dc 	bl	8001190 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d06c      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	483c      	ldr	r0, [pc, #240]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001de6:	f7ff f931 	bl	800104c <LL_ADC_GetCommonPathInternalCh>
 8001dea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3a      	ldr	r2, [pc, #232]	@ (8001edc <HAL_ADC_ConfigChannel+0x7ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d127      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d121      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a35      	ldr	r2, [pc, #212]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d157      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e16:	4619      	mov	r1, r3
 8001e18:	482f      	ldr	r0, [pc, #188]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e1a:	f7ff f904 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ee4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	4a30      	ldr	r2, [pc, #192]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e46:	e03a      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_ADC_ConfigChannel+0x7bc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d113      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d12a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e70:	4619      	mov	r1, r3
 8001e72:	4819      	ldr	r0, [pc, #100]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e74:	f7ff f8d7 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e78:	e021      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d11c      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d116      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d111      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ea6:	f7ff f8be 	bl	8001026 <LL_ADC_SetCommonPathInternalCh>
 8001eaa:	e008      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ec6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	37d8      	adds	r7, #216	@ 0xd8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	80080000 	.word	0x80080000
 8001ed8:	50040300 	.word	0x50040300
 8001edc:	c7520000 	.word	0xc7520000
 8001ee0:	50040000 	.word	0x50040000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	053e2d63 	.word	0x053e2d63
 8001eec:	cb840000 	.word	0xcb840000
 8001ef0:	80000001 	.word	0x80000001

08001ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f9f5 	bl	80012f4 <LL_ADC_IsEnabled>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d169      	bne.n	8001fe4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <ADC_Enable+0xfc>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e055      	b.n	8001fe6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f9c4 	bl	80012cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f44:	482b      	ldr	r0, [pc, #172]	@ (8001ff4 <ADC_Enable+0x100>)
 8001f46:	f7ff f881 	bl	800104c <LL_ADC_GetCommonPathInternalCh>
 8001f4a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <ADC_Enable+0x104>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <ADC_Enable+0x108>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f6e:	e002      	b.n	8001f76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f7c:	f7ff f810 	bl	8000fa0 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f82:	e028      	b.n	8001fd6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f9b3 	bl	80012f4 <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f997 	bl	80012cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9e:	f7fe ffff 	bl	8000fa0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d914      	bls.n	8001fd6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d00d      	beq.n	8001fd6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e007      	b.n	8001fe6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d1cf      	bne.n	8001f84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	8000003f 	.word	0x8000003f
 8001ff4:	50040300 	.word	0x50040300
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	053e2d63 	.word	0x053e2d63

08002000 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d14b      	bne.n	80020b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f86a 	bl	8001112 <LL_ADC_REG_IsTriggerSourceSWStart>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d032      	beq.n	80020aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12b      	bne.n	80020aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
 8002076:	e018      	b.n	80020aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d111      	bne.n	80020aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7fe fcb4 	bl	8000a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020b0:	e00e      	b.n	80020d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fb2c 	bl	800171c <HAL_ADC_ErrorCallback>
}
 80020c4:	e004      	b.n	80020d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe fcaa 	bl	8000a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002106:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f043 0204 	orr.w	r2, r3, #4
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f7ff fafe 	bl	800171c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	@ (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	@ (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	@ (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	@ (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e014      	b.n	8002386 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d105      	bne.n	8002372 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe fc3b 	bl	8000be8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800238e:	b480      	push	{r7}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3308      	adds	r3, #8
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	3314      	adds	r3, #20
 80023c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	461a      	mov	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	795b      	ldrb	r3, [r3, #5]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_DAC_ConfigChannel+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e114      	b.n	800261e <HAL_DAC_ConfigChannel+0x246>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2202      	movs	r2, #2
 80023fe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b04      	cmp	r3, #4
 8002406:	f040 8081 	bne.w	800250c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800240a:	f7fe fdc9 	bl	8000fa0 <HAL_GetTick>
 800240e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d140      	bne.n	8002498 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002416:	e018      	b.n	800244a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002418:	f7fe fdc2 	bl	8000fa0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d911      	bls.n	800244a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f043 0208 	orr.w	r2, r3, #8
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2203      	movs	r2, #3
 8002444:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0e9      	b.n	800261e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1df      	bne.n	8002418 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002458:	2001      	movs	r0, #1
 800245a:	f7fe fdad 	bl	8000fb8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	6992      	ldr	r2, [r2, #24]
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
 8002468:	e023      	b.n	80024b2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800246a:	f7fe fd99 	bl	8000fa0 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d90f      	bls.n	8002498 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247e:	2b00      	cmp	r3, #0
 8002480:	da0a      	bge.n	8002498 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f043 0208 	orr.w	r2, r3, #8
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2203      	movs	r2, #3
 8002492:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0c2      	b.n	800261e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dbe3      	blt.n	800246a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7fe fd88 	bl	8000fb8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	6992      	ldr	r2, [r2, #24]
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	ea02 0103 	and.w	r1, r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	21ff      	movs	r1, #255	@ 0xff
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	ea02 0103 	and.w	r1, r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d11d      	bne.n	8002550 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002556:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	400a      	ands	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	22c0      	movs	r2, #192	@ 0xc0
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e098      	b.n	800276c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	4b4d      	ldr	r3, [pc, #308]	@ (8002778 <HAL_DMA_Init+0x150>)
 8002642:	429a      	cmp	r2, r3
 8002644:	d80f      	bhi.n	8002666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <HAL_DMA_Init+0x154>)
 800264e:	4413      	add	r3, r2
 8002650:	4a4b      	ldr	r2, [pc, #300]	@ (8002780 <HAL_DMA_Init+0x158>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	009a      	lsls	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a48      	ldr	r2, [pc, #288]	@ (8002784 <HAL_DMA_Init+0x15c>)
 8002662:	641a      	str	r2, [r3, #64]	@ 0x40
 8002664:	e00e      	b.n	8002684 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b46      	ldr	r3, [pc, #280]	@ (8002788 <HAL_DMA_Init+0x160>)
 800266e:	4413      	add	r3, r2
 8002670:	4a43      	ldr	r2, [pc, #268]	@ (8002780 <HAL_DMA_Init+0x158>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	009a      	lsls	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a42      	ldr	r2, [pc, #264]	@ (800278c <HAL_DMA_Init+0x164>)
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800269a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800269e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026de:	d039      	beq.n	8002754 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <HAL_DMA_Init+0x15c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d11a      	bne.n	8002720 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026ea:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_DMA_Init+0x168>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f003 031c 	and.w	r3, r3, #28
 80026f6:	210f      	movs	r1, #15
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4924      	ldr	r1, [pc, #144]	@ (8002790 <HAL_DMA_Init+0x168>)
 8002700:	4013      	ands	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002704:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_DMA_Init+0x168>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	f003 031c 	and.w	r3, r3, #28
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	491d      	ldr	r1, [pc, #116]	@ (8002790 <HAL_DMA_Init+0x168>)
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
 800271e:	e019      	b.n	8002754 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <HAL_DMA_Init+0x16c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002728:	f003 031c 	and.w	r3, r3, #28
 800272c:	210f      	movs	r1, #15
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	4917      	ldr	r1, [pc, #92]	@ (8002794 <HAL_DMA_Init+0x16c>)
 8002736:	4013      	ands	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_DMA_Init+0x16c>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f003 031c 	and.w	r3, r3, #28
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	4911      	ldr	r1, [pc, #68]	@ (8002794 <HAL_DMA_Init+0x16c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40020407 	.word	0x40020407
 800277c:	bffdfff8 	.word	0xbffdfff8
 8002780:	cccccccd 	.word	0xcccccccd
 8002784:	40020000 	.word	0x40020000
 8002788:	bffdfbf8 	.word	0xbffdfbf8
 800278c:	40020400 	.word	0x40020400
 8002790:	400200a8 	.word	0x400200a8
 8002794:	400204a8 	.word	0x400204a8

08002798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Start_IT+0x20>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e04b      	b.n	8002850 <HAL_DMA_Start_IT+0xb8>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d13a      	bne.n	8002842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f8e0 	bl	80029b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 020e 	orr.w	r2, r2, #14
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e00f      	b.n	8002830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 020a 	orr.w	r2, r2, #10
 800282e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	f003 031c 	and.w	r3, r3, #28
 8002878:	2204      	movs	r2, #4
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d026      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x7a>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d021      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b0:	f003 021c 	and.w	r2, r3, #28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	2104      	movs	r1, #4
 80028ba:	fa01 f202 	lsl.w	r2, r1, r2
 80028be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d071      	beq.n	80029ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028d0:	e06c      	b.n	80029ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 031c 	and.w	r3, r3, #28
 80028da:	2202      	movs	r2, #2
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02e      	beq.n	8002944 <HAL_DMA_IRQHandler+0xec>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d029      	beq.n	8002944 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 020a 	bic.w	r2, r2, #10
 800290c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	f003 021c 	and.w	r2, r3, #28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	2102      	movs	r1, #2
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d038      	beq.n	80029ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002942:	e033      	b.n	80029ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	f003 031c 	and.w	r3, r3, #28
 800294c:	2208      	movs	r2, #8
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02a      	beq.n	80029ae <HAL_DMA_IRQHandler+0x156>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d025      	beq.n	80029ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 020e 	bic.w	r2, r2, #14
 8002970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f003 021c 	and.w	r2, r3, #28
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
}
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	f003 021c 	and.w	r2, r3, #28
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f202 	lsl.w	r2, r1, r2
 80029d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d108      	bne.n	80029fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029f8:	e007      	b.n	8002a0a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	60da      	str	r2, [r3, #12]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e148      	b.n	8002cba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 813a 	beq.w	8002cb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d005      	beq.n	8002a58 <HAL_GPIO_Init+0x40>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d130      	bne.n	8002aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0201 	and.w	r2, r3, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d017      	beq.n	8002af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	6939      	ldr	r1, [r7, #16]
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8094 	beq.w	8002cb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b52      	ldr	r3, [pc, #328]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b90:	4a51      	ldr	r2, [pc, #324]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b98:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bce:	d00d      	beq.n	8002bec <HAL_GPIO_Init+0x1d4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a43      	ldr	r2, [pc, #268]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <HAL_GPIO_Init+0x1d0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a42      	ldr	r2, [pc, #264]	@ (8002ce4 <HAL_GPIO_Init+0x2cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_GPIO_Init+0x1cc>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e004      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002be4:	2307      	movs	r3, #7
 8002be6:	e002      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <HAL_GPIO_Init+0x1d6>
 8002bec:	2300      	movs	r3, #0
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	f002 0203 	and.w	r2, r2, #3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4093      	lsls	r3, r2
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bfe:	4937      	ldr	r1, [pc, #220]	@ (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c36:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c60:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c84:	4a18      	ldr	r2, [pc, #96]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce8 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f aeaf 	bne.w	8002a28 <HAL_GPIO_Init+0x10>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	48000400 	.word	0x48000400
 8002ce4:	48000800 	.word	0x48000800
 8002ce8:	40010400 	.word	0x40010400

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d66:	d130      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d68:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d74:	d038      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2232      	movs	r2, #50	@ 0x32
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0c9b      	lsrs	r3, r3, #18
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9c:	e002      	b.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db0:	d102      	bne.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f2      	bne.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc4:	d110      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e00f      	b.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d007      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd8:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de0:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	431bde83 	.word	0x431bde83

08002e04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc02 	b.w	800361c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e18:	4b96      	ldr	r3, [pc, #600]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e22:	4b94      	ldr	r3, [pc, #592]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80e4 	beq.w	8003002 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	f040 808b 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 8087 	bne.w	8002f5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x64>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e3d9      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b81      	ldr	r3, [pc, #516]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RCC_OscConfig+0x7e>
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_OscConfig+0x8a>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d223      	bcs.n	8002eda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fd8c 	bl	80039b4 <RCC_SetFlashLatencyFromMSIRange>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3ba      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a72      	ldr	r2, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	496d      	ldr	r1, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4968      	ldr	r1, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e025      	b.n	8002f26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eda:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	495b      	ldr	r1, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd4c 	bl	80039b4 <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e37a      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f26:	f000 fc81 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4950      	ldr	r1, [pc, #320]	@ (8003078 <HAL_RCC_OscConfig+0x274>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_RCC_OscConfig+0x278>)
 8002f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f46:	4b4e      	ldr	r3, [pc, #312]	@ (8003080 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd ffd8 	bl	8000f00 <HAL_InitTick>
 8002f50:	4603      	mov	r3, r0
 8002f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d052      	beq.n	8003000 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	e35e      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d032      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a42      	ldr	r2, [pc, #264]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fe f815 	bl	8000fa0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe f811 	bl	8000fa0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e347      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	4b39      	ldr	r3, [pc, #228]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a35      	ldr	r2, [pc, #212]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b33      	ldr	r3, [pc, #204]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4930      	ldr	r1, [pc, #192]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	492b      	ldr	r1, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fcc:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd ffe2 	bl	8000fa0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe0:	f7fd ffde 	bl	8000fa0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e314      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1dc>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d073      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x21c>
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d10e      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d063      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15f      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e2f1      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x24c>
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a0b      	ldr	r2, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e025      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003058:	d114      	bne.n	8003084 <HAL_RCC_OscConfig+0x280>
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a05      	ldr	r2, [pc, #20]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a02      	ldr	r2, [pc, #8]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e013      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003074:	40021000 	.word	0x40021000
 8003078:	08005730 	.word	0x08005730
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004
 8003084:	4ba0      	ldr	r3, [pc, #640]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a9f      	ldr	r2, [pc, #636]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b9d      	ldr	r3, [pc, #628]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a9c      	ldr	r2, [pc, #624]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fd ff7c 	bl	8000fa0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fd ff78 	bl	8000fa0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2ae      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd ff68 	bl	8000fa0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fd ff64 	bl	8000fa0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e29a      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d060      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x310>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d119      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d116      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x328>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e277      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4973      	ldr	r1, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	e040      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d023      	beq.n	8003192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fd ff23 	bl	8000fa0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fd ff1f 	bl	8000fa0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e255      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b62      	ldr	r3, [pc, #392]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	495f      	ldr	r1, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b5d      	ldr	r3, [pc, #372]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fd feff 	bl	8000fa0 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fd fefb 	bl	8000fa0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e231      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031de:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd feda 	bl	8000fa0 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fed6 	bl	8000fa0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e20c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003218:	4a3b      	ldr	r2, [pc, #236]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fd febd 	bl	8000fa0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fd feb9 	bl	8000fa0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1ef      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	@ 0x58
 8003274:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d118      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329c:	f7fd fe80 	bl	8000fa0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fd fe7c 	bl	8000fa0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1b2      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d8>
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032da:	e029      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_OscConfig+0x50c>
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	4a07      	ldr	r2, [pc, #28]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	4a03      	ldr	r2, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	4b9a      	ldr	r3, [pc, #616]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a99      	ldr	r2, [pc, #612]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	4b96      	ldr	r3, [pc, #600]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	4a95      	ldr	r2, [pc, #596]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd fe32 	bl	8000fa0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fd fe2e 	bl	8000fa0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e162      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b89      	ldr	r3, [pc, #548]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ed      	beq.n	8003340 <HAL_RCC_OscConfig+0x53c>
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fd fe1b 	bl	8000fa0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fd fe17 	bl	8000fa0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e14b      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4b7d      	ldr	r3, [pc, #500]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ed      	bne.n	800336e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b78      	ldr	r3, [pc, #480]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a77      	ldr	r2, [pc, #476]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03c      	beq.n	800342a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033b8:	4b70      	ldr	r3, [pc, #448]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033be:	4a6f      	ldr	r2, [pc, #444]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fdea 	bl	8000fa0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d0:	f7fd fde6 	bl	8000fa0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e11c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCC_OscConfig+0x5cc>
 80033f0:	e01b      	b.n	800342a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f2:	4b62      	ldr	r3, [pc, #392]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f8:	4a60      	ldr	r2, [pc, #384]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fdcd 	bl	8000fa0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fd fdc9 	bl	8000fa0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0ff      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	4b57      	ldr	r3, [pc, #348]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800341e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80f3 	beq.w	800361a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	2b02      	cmp	r3, #2
 800343a:	f040 80c9 	bne.w	80035d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800343e:	4b4f      	ldr	r3, [pc, #316]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d12c      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	3b01      	subs	r3, #1
 800345e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d123      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d11b      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d113      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	3b01      	subs	r3, #1
 8003492:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d109      	bne.n	80034ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d06b      	beq.n	8003584 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d062      	beq.n	8003578 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034b2:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0ac      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c2:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2d      	ldr	r2, [pc, #180]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ce:	f7fd fd67 	bl	8000fa0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd fd63 	bl	8000fa0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e099      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x77c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003504:	3a01      	subs	r2, #1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800350e:	0212      	lsls	r2, r2, #8
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003516:	0852      	lsrs	r2, r2, #1
 8003518:	3a01      	subs	r2, #1
 800351a:	0552      	lsls	r2, r2, #21
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003522:	0852      	lsrs	r2, r2, #1
 8003524:	3a01      	subs	r2, #1
 8003526:	0652      	lsls	r2, r2, #25
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800352e:	06d2      	lsls	r2, r2, #27
 8003530:	430a      	orrs	r2, r1
 8003532:	4912      	ldr	r1, [pc, #72]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003538:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a0c      	ldr	r2, [pc, #48]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003550:	f7fd fd26 	bl	8000fa0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd fd22 	bl	8000fa0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e058      	b.n	800361c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_RCC_OscConfig+0x778>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003576:	e050      	b.n	800361a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e04f      	b.n	800361c <HAL_RCC_OscConfig+0x818>
 800357c:	40021000 	.word	0x40021000
 8003580:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d144      	bne.n	800361a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003590:	4b24      	ldr	r3, [pc, #144]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b21      	ldr	r3, [pc, #132]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a20      	ldr	r2, [pc, #128]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a8:	f7fd fcfa 	bl	8000fa0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fd fcf6 	bl	8000fa0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e02c      	b.n	800361c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x7ac>
 80035ce:	e024      	b.n	800361a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d01f      	beq.n	8003616 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd fcdd 	bl	8000fa0 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fd fcd9 	bl	8000fa0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00f      	b.n	800361c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003608:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4905      	ldr	r1, [pc, #20]	@ (8003624 <HAL_RCC_OscConfig+0x820>)
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_OscConfig+0x824>)
 8003610:	4013      	ands	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
 8003614:	e001      	b.n	800361a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	feeefffc 	.word	0xfeeefffc

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0e7      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b75      	ldr	r3, [pc, #468]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	4970      	ldr	r1, [pc, #448]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b6e      	ldr	r3, [pc, #440]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cf      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b66      	ldr	r3, [pc, #408]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b63      	ldr	r3, [pc, #396]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4960      	ldr	r1, [pc, #384]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04c      	beq.n	8003744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a6      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	4b54      	ldr	r3, [pc, #336]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e09a      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e2:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e08e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e086      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b46      	ldr	r3, [pc, #280]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4943      	ldr	r1, [pc, #268]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fd fc44 	bl	8000fa0 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fd fc40 	bl	8000fa0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e06e      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b3a      	ldr	r3, [pc, #232]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b31      	ldr	r3, [pc, #196]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375c:	429a      	cmp	r2, r3
 800375e:	d208      	bcs.n	8003772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003760:	4b2e      	ldr	r3, [pc, #184]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	492b      	ldr	r1, [pc, #172]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003772:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d210      	bcs.n	80037a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003780:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4923      	ldr	r1, [pc, #140]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e036      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4918      	ldr	r1, [pc, #96]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4910      	ldr	r1, [pc, #64]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e0:	f000 f824 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	490b      	ldr	r1, [pc, #44]	@ (8003820 <HAL_RCC_ClockConfig+0x1f4>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	4a09      	ldr	r2, [pc, #36]	@ (8003824 <HAL_RCC_ClockConfig+0x1f8>)
 80037fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_RCC_ClockConfig+0x1fc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fb7b 	bl	8000f00 <HAL_InitTick>
 800380a:	4603      	mov	r3, r0
 800380c:	72fb      	strb	r3, [r7, #11]

  return status;
 800380e:	7afb      	ldrb	r3, [r7, #11]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40022000 	.word	0x40022000
 800381c:	40021000 	.word	0x40021000
 8003820:	08005730 	.word	0x08005730
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383a:	4b3e      	ldr	r3, [pc, #248]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003844:	4b3b      	ldr	r3, [pc, #236]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x34>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d121      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d11e      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003860:	4b34      	ldr	r3, [pc, #208]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800386c:	4b31      	ldr	r3, [pc, #196]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e005      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800387c:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003888:	4a2b      	ldr	r2, [pc, #172]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038a4:	4b25      	ldr	r3, [pc, #148]	@ (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e004      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d134      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d003      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0xac>
 80038d0:	e005      	b.n	80038de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <HAL_RCC_GetSysClockFreq+0x110>)
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x114>)
 80038da:	617b      	str	r3, [r7, #20]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	617b      	str	r3, [r7, #20]
      break;
 80038e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e4:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800390a:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	0e5b      	lsrs	r3, r3, #25
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	3301      	adds	r3, #1
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	@ 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	08005748 	.word	0x08005748
 800393c:	00f42400 	.word	0x00f42400
 8003940:	007a1200 	.word	0x007a1200

08003944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	@ (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003960:	f7ff fff0 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4904      	ldr	r1, [pc, #16]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	08005740 	.word	0x08005740

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800398c:	f7ff ffda 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0adb      	lsrs	r3, r3, #11
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08005740 	.word	0x08005740

080039b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039cc:	f7ff f9b6 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 80039d0:	6178      	str	r0, [r7, #20]
 80039d2:	e014      	b.n	80039fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	4b25      	ldr	r3, [pc, #148]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	4a24      	ldr	r2, [pc, #144]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039de:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e0:	4b22      	ldr	r3, [pc, #136]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039ec:	f7ff f9a6 	bl	8002d3c <HAL_PWREx_GetVoltageRange>
 80039f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a04:	d10b      	bne.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b80      	cmp	r3, #128	@ 0x80
 8003a0a:	d919      	bls.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a10:	d902      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a12:	2302      	movs	r3, #2
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e013      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a18:	2301      	movs	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	e010      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b80      	cmp	r3, #128	@ 0x80
 8003a22:	d902      	bls.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a24:	2303      	movs	r3, #3
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e00a      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b80      	cmp	r3, #128	@ 0x80
 8003a2e:	d102      	bne.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a30:	2302      	movs	r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e004      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b70      	cmp	r3, #112	@ 0x70
 8003a3a:	d101      	bne.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 0207 	bic.w	r2, r3, #7
 8003a48:	4909      	ldr	r1, [pc, #36]	@ (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a50:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d001      	beq.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a80:	2300      	movs	r3, #0
 8003a82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d031      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a98:	d01a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a9e:	d814      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aa4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4a5c      	ldr	r2, [pc, #368]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ab6:	e00c      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9de 	bl	8003e80 <RCCEx_PLLSAI1_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac8:	e003      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad8:	4b51      	ldr	r3, [pc, #324]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	494e      	ldr	r1, [pc, #312]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003aee:	e001      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 809e 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b06:	4b46      	ldr	r3, [pc, #280]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b20:	4a3f      	ldr	r2, [pc, #252]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b28:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b34:	2301      	movs	r3, #1
 8003b36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b38:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fa2c 	bl	8000fa0 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b4a:	e009      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7fd fa28 	bl	8000fa0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b60:	4b30      	ldr	r3, [pc, #192]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d15a      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b72:	4b2b      	ldr	r3, [pc, #172]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d019      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9a:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003baa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bba:	4a19      	ldr	r2, [pc, #100]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd f9e8 	bl	8000fa0 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd2:	e00b      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fd f9e4 	bl	8000fa0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d902      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	74fb      	strb	r3, [r7, #19]
            break;
 8003bea:	e006      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ec      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c00:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	4904      	ldr	r1, [pc, #16]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c16:	e009      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2c:	7c7b      	ldrb	r3, [r7, #17]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b8a      	ldr	r3, [pc, #552]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	4a89      	ldr	r2, [pc, #548]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4a:	4b84      	ldr	r3, [pc, #528]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f023 0203 	bic.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4980      	ldr	r1, [pc, #512]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f023 020c 	bic.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	4978      	ldr	r1, [pc, #480]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c8e:	4b73      	ldr	r3, [pc, #460]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	496f      	ldr	r1, [pc, #444]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbe:	4967      	ldr	r1, [pc, #412]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd2:	4b62      	ldr	r3, [pc, #392]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	495e      	ldr	r1, [pc, #376]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	4956      	ldr	r1, [pc, #344]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d16:	4b51      	ldr	r3, [pc, #324]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d028      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d38:	4b48      	ldr	r3, [pc, #288]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	4945      	ldr	r1, [pc, #276]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d58:	4b40      	ldr	r3, [pc, #256]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d62:	60d3      	str	r3, [r2, #12]
 8003d64:	e011      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f882 	bl	8003e80 <RCCEx_PLLSAI1_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d96:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	492d      	ldr	r1, [pc, #180]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db6:	4b29      	ldr	r3, [pc, #164]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4a28      	ldr	r2, [pc, #160]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc0:	60d3      	str	r3, [r2, #12]
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f853 	bl	8003e80 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dde:	7cfb      	ldrb	r3, [r7, #19]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	2102      	movs	r1, #2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f830 	bl	8003e80 <RCCEx_PLLSAI1_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e3a:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e48:	4904      	ldr	r1, [pc, #16]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000

08003e80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e8e:	4b74      	ldr	r3, [pc, #464]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d018      	beq.n	8003ecc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e9a:	4b71      	ldr	r3, [pc, #452]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d10d      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
       ||
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d047      	beq.n	8003f56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	e044      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d018      	beq.n	8003f06 <RCCEx_PLLSAI1_Config+0x86>
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d825      	bhi.n	8003f24 <RCCEx_PLLSAI1_Config+0xa4>
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d002      	beq.n	8003ee2 <RCCEx_PLLSAI1_Config+0x62>
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d009      	beq.n	8003ef4 <RCCEx_PLLSAI1_Config+0x74>
 8003ee0:	e020      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d11d      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef2:	e01a      	b.n	8003f2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d116      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e013      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f06:	4b56      	ldr	r3, [pc, #344]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f22:	e006      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e004      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f3a:	4b49      	ldr	r3, [pc, #292]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	4943      	ldr	r1, [pc, #268]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d17c      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f5c:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3f      	ldr	r2, [pc, #252]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f68:	f7fd f81a 	bl	8000fa0 <HAL_GetTick>
 8003f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f6e:	e009      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f70:	f7fd f816 	bl	8000fa0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d902      	bls.n	8003f84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	73fb      	strb	r3, [r7, #15]
        break;
 8003f82:	e005      	b.n	8003f90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f84:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ef      	bne.n	8003f70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d15f      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d110      	bne.n	8003fbe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f9c:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003fa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	0211      	lsls	r1, r2, #8
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	68d2      	ldr	r2, [r2, #12]
 8003fb2:	06d2      	lsls	r2, r2, #27
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	492a      	ldr	r1, [pc, #168]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	610b      	str	r3, [r1, #16]
 8003fbc:	e027      	b.n	800400e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d112      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc4:	4b26      	ldr	r3, [pc, #152]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003fcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6892      	ldr	r2, [r2, #8]
 8003fd4:	0211      	lsls	r1, r2, #8
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6912      	ldr	r2, [r2, #16]
 8003fda:	0852      	lsrs	r2, r2, #1
 8003fdc:	3a01      	subs	r2, #1
 8003fde:	0552      	lsls	r2, r2, #21
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	491f      	ldr	r1, [pc, #124]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	610b      	str	r3, [r1, #16]
 8003fe8:	e011      	b.n	800400e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fea:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ff2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	0211      	lsls	r1, r2, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6952      	ldr	r2, [r2, #20]
 8004000:	0852      	lsrs	r2, r2, #1
 8004002:	3a01      	subs	r2, #1
 8004004:	0652      	lsls	r2, r2, #25
 8004006:	430a      	orrs	r2, r1
 8004008:	4915      	ldr	r1, [pc, #84]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800400e:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004014:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004018:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fc ffc1 	bl	8000fa0 <HAL_GetTick>
 800401e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004020:	e009      	b.n	8004036 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004022:	f7fc ffbd 	bl	8000fa0 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d902      	bls.n	8004036 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	73fb      	strb	r3, [r7, #15]
          break;
 8004034:	e005      	b.n	8004042 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004036:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ef      	beq.n	8004022 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	4903      	ldr	r1, [pc, #12]	@ (8004060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e049      	b.n	800410a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fdea 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 f882 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e033      	b.n	8004194 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <HAL_TIM_Base_Start+0x8c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <HAL_TIM_Base_Start+0x3e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004146:	d004      	beq.n	8004152 <HAL_TIM_Base_Start+0x3e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a15      	ldr	r2, [pc, #84]	@ (80041a4 <HAL_TIM_Base_Start+0x90>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d115      	bne.n	800417e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <HAL_TIM_Base_Start+0x94>)
 800415a:	4013      	ands	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b06      	cmp	r3, #6
 8004162:	d015      	beq.n	8004190 <HAL_TIM_Base_Start+0x7c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416a:	d011      	beq.n	8004190 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	e008      	b.n	8004190 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e000      	b.n	8004192 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40014000 	.word	0x40014000
 80041a8:	00010007 	.word	0x00010007

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <TIM_Base_SetConfig+0xd4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_Base_SetConfig+0x20>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ca:	d108      	bne.n	80041de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <TIM_Base_SetConfig+0xd4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x52>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x52>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <TIM_Base_SetConfig+0xd8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x52>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a23      	ldr	r2, [pc, #140]	@ (8004288 <TIM_Base_SetConfig+0xdc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <TIM_Base_SetConfig+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0xa0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <TIM_Base_SetConfig+0xd8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0xa0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a10      	ldr	r2, [pc, #64]	@ (8004288 <TIM_Base_SetConfig+0xdc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	611a      	str	r2, [r3, #16]
  }
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e04f      	b.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a21      	ldr	r2, [pc, #132]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430c:	d004      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a10      	ldr	r2, [pc, #64]	@ (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10c      	bne.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40014000 	.word	0x40014000

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e040      	b.n	80043ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fc92 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	@ 0x24
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fade 	bl	8004960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8af 	bl	8004508 <UART_SetConfig>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01b      	b.n	80043ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb5d 	bl	8004aa4 <UART_CheckIdleState>
 80043ea:	4603      	mov	r3, r0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004408:	2b20      	cmp	r3, #32
 800440a:	d177      	bne.n	80044fc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Transmit+0x24>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e070      	b.n	80044fe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2221      	movs	r2, #33	@ 0x21
 8004428:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fc fdb9 	bl	8000fa0 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x68>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004464:	e02f      	b.n	80044c6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fbbf 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e03b      	b.n	80044fe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004498:	b292      	uxth	r2, r2
 800449a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	3302      	adds	r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e007      	b.n	80044b4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1c9      	bne.n	8004466 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2140      	movs	r1, #64	@ 0x40
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fb89 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e005      	b.n	80044fe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b08a      	sub	sp, #40	@ 0x28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4bb4      	ldr	r3, [pc, #720]	@ (8004808 <UART_SetConfig+0x300>)
 8004538:	4013      	ands	r3, r2
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004540:	430b      	orrs	r3, r1
 8004542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4aa9      	ldr	r2, [pc, #676]	@ (800480c <UART_SetConfig+0x304>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	4313      	orrs	r3, r2
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4aa0      	ldr	r2, [pc, #640]	@ (8004810 <UART_SetConfig+0x308>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d126      	bne.n	80045e0 <UART_SetConfig+0xd8>
 8004592:	4ba0      	ldr	r3, [pc, #640]	@ (8004814 <UART_SetConfig+0x30c>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d81b      	bhi.n	80045d8 <UART_SetConfig+0xd0>
 80045a0:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <UART_SetConfig+0xa0>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045c9 	.word	0x080045c9
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e080      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e07c      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e078      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e074      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e070      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a8c      	ldr	r2, [pc, #560]	@ (8004818 <UART_SetConfig+0x310>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d138      	bne.n	800465c <UART_SetConfig+0x154>
 80045ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004814 <UART_SetConfig+0x30c>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b0c      	cmp	r3, #12
 80045f6:	d82d      	bhi.n	8004654 <UART_SetConfig+0x14c>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <UART_SetConfig+0xf8>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004635 	.word	0x08004635
 8004604:	08004655 	.word	0x08004655
 8004608:	08004655 	.word	0x08004655
 800460c:	08004655 	.word	0x08004655
 8004610:	08004645 	.word	0x08004645
 8004614:	08004655 	.word	0x08004655
 8004618:	08004655 	.word	0x08004655
 800461c:	08004655 	.word	0x08004655
 8004620:	0800463d 	.word	0x0800463d
 8004624:	08004655 	.word	0x08004655
 8004628:	08004655 	.word	0x08004655
 800462c:	08004655 	.word	0x08004655
 8004630:	0800464d 	.word	0x0800464d
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e042      	b.n	80046c2 <UART_SetConfig+0x1ba>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e03e      	b.n	80046c2 <UART_SetConfig+0x1ba>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464a:	e03a      	b.n	80046c2 <UART_SetConfig+0x1ba>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e036      	b.n	80046c2 <UART_SetConfig+0x1ba>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e032      	b.n	80046c2 <UART_SetConfig+0x1ba>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6a      	ldr	r2, [pc, #424]	@ (800480c <UART_SetConfig+0x304>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12a      	bne.n	80046bc <UART_SetConfig+0x1b4>
 8004666:	4b6b      	ldr	r3, [pc, #428]	@ (8004814 <UART_SetConfig+0x30c>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004674:	d01a      	beq.n	80046ac <UART_SetConfig+0x1a4>
 8004676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800467a:	d81b      	bhi.n	80046b4 <UART_SetConfig+0x1ac>
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x194>
 8004682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004686:	d815      	bhi.n	80046b4 <UART_SetConfig+0x1ac>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <UART_SetConfig+0x18c>
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004690:	d008      	beq.n	80046a4 <UART_SetConfig+0x19c>
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x1ac>
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e012      	b.n	80046c2 <UART_SetConfig+0x1ba>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e00e      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e00a      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e006      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e002      	b.n	80046c2 <UART_SetConfig+0x1ba>
 80046bc:	2310      	movs	r3, #16
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a51      	ldr	r2, [pc, #324]	@ (800480c <UART_SetConfig+0x304>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d17a      	bne.n	80047c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d824      	bhi.n	800471e <UART_SetConfig+0x216>
 80046d4:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x1d4>)
 80046d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046da:	bf00      	nop
 80046dc:	08004701 	.word	0x08004701
 80046e0:	0800471f 	.word	0x0800471f
 80046e4:	08004709 	.word	0x08004709
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	0800470f 	.word	0x0800470f
 80046f0:	0800471f 	.word	0x0800471f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800471f 	.word	0x0800471f
 80046fc:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7ff f92c 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004704:	61f8      	str	r0, [r7, #28]
        break;
 8004706:	e010      	b.n	800472a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b44      	ldr	r3, [pc, #272]	@ (800481c <UART_SetConfig+0x314>)
 800470a:	61fb      	str	r3, [r7, #28]
        break;
 800470c:	e00d      	b.n	800472a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7ff f88d 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004712:	61f8      	str	r0, [r7, #28]
        break;
 8004714:	e009      	b.n	800472a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471a:	61fb      	str	r3, [r7, #28]
        break;
 800471c:	e005      	b.n	800472a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8107 	beq.w	8004940 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	429a      	cmp	r2, r3
 8004740:	d305      	bcc.n	800474e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	429a      	cmp	r2, r3
 800474c:	d903      	bls.n	8004756 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004754:	e0f4      	b.n	8004940 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2200      	movs	r2, #0
 800475a:	461c      	mov	r4, r3
 800475c:	4615      	mov	r5, r2
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	022b      	lsls	r3, r5, #8
 8004768:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800476c:	0222      	lsls	r2, r4, #8
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	6849      	ldr	r1, [r1, #4]
 8004772:	0849      	lsrs	r1, r1, #1
 8004774:	2000      	movs	r0, #0
 8004776:	4688      	mov	r8, r1
 8004778:	4681      	mov	r9, r0
 800477a:	eb12 0a08 	adds.w	sl, r2, r8
 800477e:	eb43 0b09 	adc.w	fp, r3, r9
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004790:	4650      	mov	r0, sl
 8004792:	4659      	mov	r1, fp
 8004794:	f7fb fd74 	bl	8000280 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4613      	mov	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047a6:	d308      	bcc.n	80047ba <UART_SetConfig+0x2b2>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ae:	d204      	bcs.n	80047ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e0c2      	b.n	8004940 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047c0:	e0be      	b.n	8004940 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ca:	d16a      	bne.n	80048a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80047cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d834      	bhi.n	800483e <UART_SetConfig+0x336>
 80047d4:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x2d4>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004829 	.word	0x08004829
 80047e8:	0800483f 	.word	0x0800483f
 80047ec:	0800482f 	.word	0x0800482f
 80047f0:	0800483f 	.word	0x0800483f
 80047f4:	0800483f 	.word	0x0800483f
 80047f8:	0800483f 	.word	0x0800483f
 80047fc:	08004837 	.word	0x08004837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7ff f8ac 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8004804:	61f8      	str	r0, [r7, #28]
        break;
 8004806:	e020      	b.n	800484a <UART_SetConfig+0x342>
 8004808:	efff69f3 	.word	0xefff69f3
 800480c:	40008000 	.word	0x40008000
 8004810:	40013800 	.word	0x40013800
 8004814:	40021000 	.word	0x40021000
 8004818:	40004400 	.word	0x40004400
 800481c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004820:	f7ff f8b2 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8004824:	61f8      	str	r0, [r7, #28]
        break;
 8004826:	e010      	b.n	800484a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004828:	4b4c      	ldr	r3, [pc, #304]	@ (800495c <UART_SetConfig+0x454>)
 800482a:	61fb      	str	r3, [r7, #28]
        break;
 800482c:	e00d      	b.n	800484a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe fffd 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8004832:	61f8      	str	r0, [r7, #28]
        break;
 8004834:	e009      	b.n	800484a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483a:	61fb      	str	r3, [r7, #28]
        break;
 800483c:	e005      	b.n	800484a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d077      	beq.n	8004940 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005a      	lsls	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	441a      	add	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d916      	bls.n	800489a <UART_SetConfig+0x392>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004872:	d212      	bcs.n	800489a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f023 030f 	bic.w	r3, r3, #15
 800487c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	b29a      	uxth	r2, r3
 800488a:	8afb      	ldrh	r3, [r7, #22]
 800488c:	4313      	orrs	r3, r2
 800488e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	8afa      	ldrh	r2, [r7, #22]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e052      	b.n	8004940 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048a0:	e04e      	b.n	8004940 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d827      	bhi.n	80048fa <UART_SetConfig+0x3f2>
 80048aa:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0x3a8>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048fb 	.word	0x080048fb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7ff f842 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 80048d8:	61f8      	str	r0, [r7, #28]
        break;
 80048da:	e014      	b.n	8004906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7ff f854 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e010      	b.n	8004906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <UART_SetConfig+0x454>)
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e00d      	b.n	8004906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe ff9f 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80048ee:	61f8      	str	r0, [r7, #28]
        break;
 80048f0:	e009      	b.n	8004906 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e005      	b.n	8004906 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004904:	bf00      	nop
    }

    if (pclk != 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d019      	beq.n	8004940 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085a      	lsrs	r2, r3, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d909      	bls.n	800493a <UART_SetConfig+0x432>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d205      	bcs.n	800493a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	e002      	b.n	8004940 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800494c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495a:	bf00      	nop
 800495c:	00f42400 	.word	0x00f42400

08004960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5e:	d10a      	bne.n	8004a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b098      	sub	sp, #96	@ 0x60
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab4:	f7fc fa74 	bl	8000fa0 <HAL_GetTick>
 8004ab8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d12e      	bne.n	8004b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f88c 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d021      	beq.n	8004b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e062      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d149      	bne.n	8004bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f856 	bl	8004bf4 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03c      	beq.n	8004bc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e6      	bne.n	8004b4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e011      	b.n	8004bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3758      	adds	r7, #88	@ 0x58
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c04:	e04f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d04b      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fc f9c7 	bl	8000fa0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e04e      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d037      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b80      	cmp	r3, #128	@ 0x80
 8004c3a:	d034      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b40      	cmp	r3, #64	@ 0x40
 8004c40:	d031      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d110      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f838 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2208      	movs	r2, #8
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e029      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c80:	d111      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f81e 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d0a0      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b095      	sub	sp, #84	@ 0x54
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d118      	bne.n	8004d76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e6      	bne.n	8004d44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d8a:	bf00      	nop
 8004d8c:	3754      	adds	r7, #84	@ 0x54
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <sniprintf>:
 8004d98:	b40c      	push	{r2, r3}
 8004d9a:	b530      	push	{r4, r5, lr}
 8004d9c:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <sniprintf+0x68>)
 8004d9e:	1e0c      	subs	r4, r1, #0
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	b09d      	sub	sp, #116	@ 0x74
 8004da4:	da08      	bge.n	8004db8 <sniprintf+0x20>
 8004da6:	238b      	movs	r3, #139	@ 0x8b
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	b01d      	add	sp, #116	@ 0x74
 8004db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db4:	b002      	add	sp, #8
 8004db6:	4770      	bx	lr
 8004db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004dc6:	bf14      	ite	ne
 8004dc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dcc:	4623      	moveq	r3, r4
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004dd6:	9002      	str	r0, [sp, #8]
 8004dd8:	9006      	str	r0, [sp, #24]
 8004dda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004dde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004de0:	ab21      	add	r3, sp, #132	@ 0x84
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	4628      	mov	r0, r5
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	f000 f994 	bl	8005114 <_svfiprintf_r>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	bfbc      	itt	lt
 8004df0:	238b      	movlt	r3, #139	@ 0x8b
 8004df2:	602b      	strlt	r3, [r5, #0]
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d0da      	beq.n	8004dae <sniprintf+0x16>
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e7d6      	b.n	8004dae <sniprintf+0x16>
 8004e00:	2000000c 	.word	0x2000000c

08004e04 <memset>:
 8004e04:	4402      	add	r2, r0
 8004e06:	4603      	mov	r3, r0
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <memset+0xa>
 8004e0c:	4770      	bx	lr
 8004e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e12:	e7f9      	b.n	8004e08 <memset+0x4>

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	@ (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	@ (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	@ (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	@ (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	@ (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 fc64 	bl	8005700 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	080057b4 	.word	0x080057b4
 8004e5c:	080057b4 	.word	0x080057b4
 8004e60:	080057b4 	.word	0x080057b4
 8004e64:	080057b8 	.word	0x080057b8

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <_free_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d041      	beq.n	8004ef8 <_free_r+0x8c>
 8004e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e78:	1f0c      	subs	r4, r1, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfb8      	it	lt
 8004e7e:	18e4      	addlt	r4, r4, r3
 8004e80:	f000 f8e0 	bl	8005044 <__malloc_lock>
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <_free_r+0x90>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	b933      	cbnz	r3, 8004e98 <_free_r+0x2c>
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e94:	f000 b8dc 	b.w	8005050 <__malloc_unlock>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x42>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	e7ed      	b.n	8004e8a <_free_r+0x1e>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x4c>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x42>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1850      	adds	r0, r2, r1
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x6c>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	1850      	adds	r0, r2, r1
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1e0      	bne.n	8004e8e <_free_r+0x22>
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	4408      	add	r0, r1
 8004ed4:	6010      	str	r0, [r2, #0]
 8004ed6:	e7da      	b.n	8004e8e <_free_r+0x22>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x74>
 8004eda:	230c      	movs	r3, #12
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	e7d6      	b.n	8004e8e <_free_r+0x22>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7ca      	b.n	8004e8e <_free_r+0x22>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	200003bc 	.word	0x200003bc

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 fba4 	bl	8005658 <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fb9f 	bl	8005658 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fb90 	bl	8005658 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	200003b8 	.word	0x200003b8

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 fb5a 	bl	8005658 <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	200003bc 	.word	0x200003bc

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bf0f 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	200003b4 	.word	0x200003b4

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff bf0a 	b.w	8004e6a <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	200003b4 	.word	0x200003b4

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	461f      	mov	r7, r3
 8005064:	42be      	cmp	r6, r7
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	4682      	mov	sl, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4690      	mov	r8, r2
 800506e:	d82d      	bhi.n	80050cc <__ssputs_r+0x70>
 8005070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005078:	d026      	beq.n	80050c8 <__ssputs_r+0x6c>
 800507a:	6965      	ldr	r5, [r4, #20]
 800507c:	6909      	ldr	r1, [r1, #16]
 800507e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005082:	eba3 0901 	sub.w	r9, r3, r1
 8005086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800508a:	1c7b      	adds	r3, r7, #1
 800508c:	444b      	add	r3, r9
 800508e:	106d      	asrs	r5, r5, #1
 8005090:	429d      	cmp	r5, r3
 8005092:	bf38      	it	cc
 8005094:	461d      	movcc	r5, r3
 8005096:	0553      	lsls	r3, r2, #21
 8005098:	d527      	bpl.n	80050ea <__ssputs_r+0x8e>
 800509a:	4629      	mov	r1, r5
 800509c:	f7ff ff52 	bl	8004f44 <_malloc_r>
 80050a0:	4606      	mov	r6, r0
 80050a2:	b360      	cbz	r0, 80050fe <__ssputs_r+0xa2>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f000 fae6 	bl	8005678 <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x72>
 80050cc:	463e      	mov	r6, r7
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 faa6 	bl	8005624 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	1b9b      	subs	r3, r3, r6
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4433      	add	r3, r6
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	462a      	mov	r2, r5
 80050ec:	f000 fad2 	bl	8005694 <_realloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1e0      	bne.n	80050b8 <__ssputs_r+0x5c>
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7ff feb7 	bl	8004e6c <_free_r>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e7e9      	b.n	80050e6 <__ssputs_r+0x8a>
	...

08005114 <_svfiprintf_r>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	4607      	mov	r7, r0
 8005122:	460d      	mov	r5, r1
 8005124:	4614      	mov	r4, r2
 8005126:	d510      	bpl.n	800514a <_svfiprintf_r+0x36>
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	b973      	cbnz	r3, 800514a <_svfiprintf_r+0x36>
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	f7ff ff09 	bl	8004f44 <_malloc_r>
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	6128      	str	r0, [r5, #16]
 8005136:	b930      	cbnz	r0, 8005146 <_svfiprintf_r+0x32>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	@ 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	616b      	str	r3, [r5, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2320      	movs	r3, #32
 8005150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005154:	f8cd 800c 	str.w	r8, [sp, #12]
 8005158:	2330      	movs	r3, #48	@ 0x30
 800515a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f8 <_svfiprintf_r+0x1e4>
 800515e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	4623      	mov	r3, r4
 8005168:	469a      	mov	sl, r3
 800516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516e:	b10a      	cbz	r2, 8005174 <_svfiprintf_r+0x60>
 8005170:	2a25      	cmp	r2, #37	@ 0x25
 8005172:	d1f9      	bne.n	8005168 <_svfiprintf_r+0x54>
 8005174:	ebba 0b04 	subs.w	fp, sl, r4
 8005178:	d00b      	beq.n	8005192 <_svfiprintf_r+0x7e>
 800517a:	465b      	mov	r3, fp
 800517c:	4622      	mov	r2, r4
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff6b 	bl	800505c <__ssputs_r>
 8005186:	3001      	adds	r0, #1
 8005188:	f000 80a7 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800518c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800518e:	445a      	add	r2, fp
 8005190:	9209      	str	r2, [sp, #36]	@ 0x24
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 809f 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b4:	4654      	mov	r4, sl
 80051b6:	2205      	movs	r2, #5
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	484e      	ldr	r0, [pc, #312]	@ (80052f8 <_svfiprintf_r+0x1e4>)
 80051be:	f7fb f80f 	bl	80001e0 <memchr>
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	b9d8      	cbnz	r0, 80051fe <_svfiprintf_r+0xea>
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	bf44      	itt	mi
 80051ca:	2320      	movmi	r3, #32
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d0:	0711      	lsls	r1, r2, #28
 80051d2:	bf44      	itt	mi
 80051d4:	232b      	movmi	r3, #43	@ 0x2b
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e0:	d015      	beq.n	800520e <_svfiprintf_r+0xfa>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4654      	mov	r4, sl
 80051e6:	2000      	movs	r0, #0
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4621      	mov	r1, r4
 80051ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f2:	3b30      	subs	r3, #48	@ 0x30
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d94b      	bls.n	8005290 <_svfiprintf_r+0x17c>
 80051f8:	b1b0      	cbz	r0, 8005228 <_svfiprintf_r+0x114>
 80051fa:	9207      	str	r2, [sp, #28]
 80051fc:	e014      	b.n	8005228 <_svfiprintf_r+0x114>
 80051fe:	eba0 0308 	sub.w	r3, r0, r8
 8005202:	fa09 f303 	lsl.w	r3, r9, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	46a2      	mov	sl, r4
 800520c:	e7d2      	b.n	80051b4 <_svfiprintf_r+0xa0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbb      	ittet	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	f042 0202 	orrlt.w	r2, r2, #2
 8005220:	9307      	strge	r3, [sp, #28]
 8005222:	9307      	strlt	r3, [sp, #28]
 8005224:	bfb8      	it	lt
 8005226:	9204      	strlt	r2, [sp, #16]
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	2b2e      	cmp	r3, #46	@ 0x2e
 800522c:	d10a      	bne.n	8005244 <_svfiprintf_r+0x130>
 800522e:	7863      	ldrb	r3, [r4, #1]
 8005230:	2b2a      	cmp	r3, #42	@ 0x2a
 8005232:	d132      	bne.n	800529a <_svfiprintf_r+0x186>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9203      	str	r2, [sp, #12]
 800523c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005240:	3402      	adds	r4, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005308 <_svfiprintf_r+0x1f4>
 8005248:	7821      	ldrb	r1, [r4, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4650      	mov	r0, sl
 800524e:	f7fa ffc7 	bl	80001e0 <memchr>
 8005252:	b138      	cbz	r0, 8005264 <_svfiprintf_r+0x150>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	eba0 000a 	sub.w	r0, r0, sl
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	4082      	lsls	r2, r0
 800525e:	4313      	orrs	r3, r2
 8005260:	3401      	adds	r4, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	4824      	ldr	r0, [pc, #144]	@ (80052fc <_svfiprintf_r+0x1e8>)
 800526a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800526e:	2206      	movs	r2, #6
 8005270:	f7fa ffb6 	bl	80001e0 <memchr>
 8005274:	2800      	cmp	r0, #0
 8005276:	d036      	beq.n	80052e6 <_svfiprintf_r+0x1d2>
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <_svfiprintf_r+0x1ec>)
 800527a:	bb1b      	cbnz	r3, 80052c4 <_svfiprintf_r+0x1b0>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	3308      	adds	r3, #8
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	4433      	add	r3, r6
 800528c:	9309      	str	r3, [sp, #36]	@ 0x24
 800528e:	e76a      	b.n	8005166 <_svfiprintf_r+0x52>
 8005290:	fb0c 3202 	mla	r2, ip, r2, r3
 8005294:	460c      	mov	r4, r1
 8005296:	2001      	movs	r0, #1
 8005298:	e7a8      	b.n	80051ec <_svfiprintf_r+0xd8>
 800529a:	2300      	movs	r3, #0
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ac:	3a30      	subs	r2, #48	@ 0x30
 80052ae:	2a09      	cmp	r2, #9
 80052b0:	d903      	bls.n	80052ba <_svfiprintf_r+0x1a6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c6      	beq.n	8005244 <_svfiprintf_r+0x130>
 80052b6:	9105      	str	r1, [sp, #20]
 80052b8:	e7c4      	b.n	8005244 <_svfiprintf_r+0x130>
 80052ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80052be:	4604      	mov	r4, r0
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f0      	b.n	80052a6 <_svfiprintf_r+0x192>
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4638      	mov	r0, r7
 80052d0:	f3af 8000 	nop.w
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	4606      	mov	r6, r0
 80052d8:	d1d6      	bne.n	8005288 <_svfiprintf_r+0x174>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af2d 	bmi.w	800513c <_svfiprintf_r+0x28>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e72c      	b.n	8005140 <_svfiprintf_r+0x2c>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4638      	mov	r0, r7
 80052f2:	f000 f879 	bl	80053e8 <_printf_i>
 80052f6:	e7ed      	b.n	80052d4 <_svfiprintf_r+0x1c0>
 80052f8:	08005778 	.word	0x08005778
 80052fc:	08005782 	.word	0x08005782
 8005300:	00000000 	.word	0x00000000
 8005304:	0800505d 	.word	0x0800505d
 8005308:	0800577e 	.word	0x0800577e

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4698      	mov	r8, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	3b00      	subs	r3, #0
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4641      	mov	r1, r8
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c8      	blx	r9
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	@ 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d1 	beq.w	80055ac <_printf_i+0x1c4>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b8 	beq.w	8005580 <_printf_i+0x198>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005593 	.word	0x08005593
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554d 	.word	0x0800554d
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b5 	.word	0x080055b5
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005555 	.word	0x08005555
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09c      	b.n	80055ce <_printf_i+0x1e6>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	4858      	ldr	r0, [pc, #352]	@ (800561c <_printf_i+0x234>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	4852      	ldr	r0, [pc, #328]	@ (800561c <_printf_i+0x234>)
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	bf14      	ite	ne
 80054d8:	230a      	movne	r3, #10
 80054da:	2308      	moveq	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	db05      	blt.n	80054f6 <_printf_i+0x10e>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	432e      	orrs	r6, r5
 80054ee:	f021 0104 	bic.w	r1, r1, #4
 80054f2:	6021      	str	r1, [r4, #0]
 80054f4:	d04b      	beq.n	800558e <_printf_i+0x1a6>
 80054f6:	4616      	mov	r6, r2
 80054f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005500:	5dc7      	ldrb	r7, [r0, r7]
 8005502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005506:	462f      	mov	r7, r5
 8005508:	42bb      	cmp	r3, r7
 800550a:	460d      	mov	r5, r1
 800550c:	d9f4      	bls.n	80054f8 <_printf_i+0x110>
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10b      	bne.n	800552a <_printf_i+0x142>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	07df      	lsls	r7, r3, #31
 8005516:	d508      	bpl.n	800552a <_printf_i+0x142>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	4299      	cmp	r1, r3
 800551e:	bfde      	ittt	le
 8005520:	2330      	movle	r3, #48	@ 0x30
 8005522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552a:	1b92      	subs	r2, r2, r6
 800552c:	6122      	str	r2, [r4, #16]
 800552e:	f8cd a000 	str.w	sl, [sp]
 8005532:	464b      	mov	r3, r9
 8005534:	aa03      	add	r2, sp, #12
 8005536:	4621      	mov	r1, r4
 8005538:	4640      	mov	r0, r8
 800553a:	f7ff fee7 	bl	800530c <_printf_common>
 800553e:	3001      	adds	r0, #1
 8005540:	d14a      	bne.n	80055d8 <_printf_i+0x1f0>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	4832      	ldr	r0, [pc, #200]	@ (8005620 <_printf_i+0x238>)
 8005556:	2778      	movs	r7, #120	@ 0x78
 8005558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	061f      	lsls	r7, r3, #24
 8005562:	f851 5b04 	ldr.w	r5, [r1], #4
 8005566:	d402      	bmi.n	800556e <_printf_i+0x186>
 8005568:	065f      	lsls	r7, r3, #25
 800556a:	bf48      	it	mi
 800556c:	b2ad      	uxthmi	r5, r5
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b11d      	cbz	r5, 8005584 <_printf_i+0x19c>
 800557c:	2310      	movs	r3, #16
 800557e:	e7ad      	b.n	80054dc <_printf_i+0xf4>
 8005580:	4826      	ldr	r0, [pc, #152]	@ (800561c <_printf_i+0x234>)
 8005582:	e7e9      	b.n	8005558 <_printf_i+0x170>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e7f6      	b.n	800557c <_printf_i+0x194>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bd      	b.n	800550e <_printf_i+0x126>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	6961      	ldr	r1, [r4, #20]
 8005598:	1d18      	adds	r0, r3, #4
 800559a:	6030      	str	r0, [r6, #0]
 800559c:	062e      	lsls	r6, r5, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1be>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1c4>
 80055a6:	0668      	lsls	r0, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ba>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	4616      	mov	r6, r2
 80055b2:	e7bc      	b.n	800552e <_printf_i+0x146>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	6032      	str	r2, [r6, #0]
 80055ba:	681e      	ldr	r6, [r3, #0]
 80055bc:	6862      	ldr	r2, [r4, #4]
 80055be:	2100      	movs	r1, #0
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7fa fe0d 	bl	80001e0 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1e4>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e7aa      	b.n	800552e <_printf_i+0x146>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	4632      	mov	r2, r6
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ad      	beq.n	8005542 <_printf_i+0x15a>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x22c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a6      	b.n	8005546 <_printf_i+0x15e>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09d      	beq.n	8005542 <_printf_i+0x15a>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x210>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x204>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x220>
 800561c:	08005789 	.word	0x08005789
 8005620:	0800579a 	.word	0x0800579a

08005624 <memmove>:
 8005624:	4288      	cmp	r0, r1
 8005626:	b510      	push	{r4, lr}
 8005628:	eb01 0402 	add.w	r4, r1, r2
 800562c:	d902      	bls.n	8005634 <memmove+0x10>
 800562e:	4284      	cmp	r4, r0
 8005630:	4623      	mov	r3, r4
 8005632:	d807      	bhi.n	8005644 <memmove+0x20>
 8005634:	1e43      	subs	r3, r0, #1
 8005636:	42a1      	cmp	r1, r4
 8005638:	d008      	beq.n	800564c <memmove+0x28>
 800563a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800563e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005642:	e7f8      	b.n	8005636 <memmove+0x12>
 8005644:	4402      	add	r2, r0
 8005646:	4601      	mov	r1, r0
 8005648:	428a      	cmp	r2, r1
 800564a:	d100      	bne.n	800564e <memmove+0x2a>
 800564c:	bd10      	pop	{r4, pc}
 800564e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005656:	e7f7      	b.n	8005648 <memmove+0x24>

08005658 <_sbrk_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_sbrk_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb fbc2 	bl	8000dec <_sbrk>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_sbrk_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_sbrk_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	200003b0 	.word	0x200003b0

08005678 <memcpy>:
 8005678:	440a      	add	r2, r1
 800567a:	4291      	cmp	r1, r2
 800567c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005680:	d100      	bne.n	8005684 <memcpy+0xc>
 8005682:	4770      	bx	lr
 8005684:	b510      	push	{r4, lr}
 8005686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568e:	4291      	cmp	r1, r2
 8005690:	d1f9      	bne.n	8005686 <memcpy+0xe>
 8005692:	bd10      	pop	{r4, pc}

08005694 <_realloc_r>:
 8005694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005698:	4607      	mov	r7, r0
 800569a:	4614      	mov	r4, r2
 800569c:	460d      	mov	r5, r1
 800569e:	b921      	cbnz	r1, 80056aa <_realloc_r+0x16>
 80056a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a4:	4611      	mov	r1, r2
 80056a6:	f7ff bc4d 	b.w	8004f44 <_malloc_r>
 80056aa:	b92a      	cbnz	r2, 80056b8 <_realloc_r+0x24>
 80056ac:	f7ff fbde 	bl	8004e6c <_free_r>
 80056b0:	4625      	mov	r5, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	f000 f81a 	bl	80056f0 <_malloc_usable_size_r>
 80056bc:	4284      	cmp	r4, r0
 80056be:	4606      	mov	r6, r0
 80056c0:	d802      	bhi.n	80056c8 <_realloc_r+0x34>
 80056c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056c6:	d8f4      	bhi.n	80056b2 <_realloc_r+0x1e>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4638      	mov	r0, r7
 80056cc:	f7ff fc3a 	bl	8004f44 <_malloc_r>
 80056d0:	4680      	mov	r8, r0
 80056d2:	b908      	cbnz	r0, 80056d8 <_realloc_r+0x44>
 80056d4:	4645      	mov	r5, r8
 80056d6:	e7ec      	b.n	80056b2 <_realloc_r+0x1e>
 80056d8:	42b4      	cmp	r4, r6
 80056da:	4622      	mov	r2, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	bf28      	it	cs
 80056e0:	4632      	movcs	r2, r6
 80056e2:	f7ff ffc9 	bl	8005678 <memcpy>
 80056e6:	4629      	mov	r1, r5
 80056e8:	4638      	mov	r0, r7
 80056ea:	f7ff fbbf 	bl	8004e6c <_free_r>
 80056ee:	e7f1      	b.n	80056d4 <_realloc_r+0x40>

080056f0 <_malloc_usable_size_r>:
 80056f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f4:	1f18      	subs	r0, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfbc      	itt	lt
 80056fa:	580b      	ldrlt	r3, [r1, r0]
 80056fc:	18c0      	addlt	r0, r0, r3
 80056fe:	4770      	bx	lr

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
