
Thermistor_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004998  08004998  00005998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004a94  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004a94  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfcd  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc5  00000000  00000000  00013059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00014d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  00015878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215d7  00000000  00000000  00016121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf97  00000000  00000000  000376f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf859  00000000  00000000  0004468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113ee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000338c  00000000  00000000  00113f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001172b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004980 	.word	0x08004980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004980 	.word	0x08004980

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb0f 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f834 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f928 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8f6 	bl	80007ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c0:	f000 f890 	bl	80006e4 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005c4:	4811      	ldr	r0, [pc, #68]	@ (800060c <main+0x60>)
 80005c6:	f000 fea7 	bl	8001318 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80005ca:	2164      	movs	r1, #100	@ 0x64
 80005cc:	480f      	ldr	r0, [pc, #60]	@ (800060c <main+0x60>)
 80005ce:	f000 ff06 	bl	80013de <HAL_ADC_PollForConversion>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 80005d2:	480e      	ldr	r0, [pc, #56]	@ (800060c <main+0x60>)
 80005d4:	f000 ff92 	bl	80014fc <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <main+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

	  //sprintf(uart_buf, "%lu,%lu,%u\r\n",time_counter,ADC_value,1);
	  sprintf(uart_buf, "ADC Value: %lu\r\n",ADC_value);
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <main+0x64>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	490b      	ldr	r1, [pc, #44]	@ (8000614 <main+0x68>)
 80005e6:	480c      	ldr	r0, [pc, #48]	@ (8000618 <main+0x6c>)
 80005e8:	f003 fd2a 	bl	8004040 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 80005ec:	480a      	ldr	r0, [pc, #40]	@ (8000618 <main+0x6c>)
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	2364      	movs	r3, #100	@ 0x64
 80005f8:	4907      	ldr	r1, [pc, #28]	@ (8000618 <main+0x6c>)
 80005fa:	4808      	ldr	r0, [pc, #32]	@ (800061c <main+0x70>)
 80005fc:	f003 f84e 	bl	800369c <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	@ 0x64
 8000602:	f000 fb5b 	bl	8000cbc <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000606:	bf00      	nop
 8000608:	e7dc      	b.n	80005c4 <main+0x18>
 800060a:	bf00      	nop
 800060c:	20000078 	.word	0x20000078
 8000610:	20000198 	.word	0x20000198
 8000614:	08004998 	.word	0x08004998
 8000618:	20000164 	.word	0x20000164
 800061c:	200000dc 	.word	0x200000dc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	@ 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fd28 	bl	8004084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000646:	f001 fe55 	bl	80022f4 <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 f926 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000654:	f001 fe30 	bl	80022b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <SystemClock_Config+0xc0>)
 800065a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800065e:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <SystemClock_Config+0xc0>)
 8000660:	f023 0318 	bic.w	r3, r3, #24
 8000664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000668:	2314      	movs	r3, #20
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	@ 0x60
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fe7f 	bl	80023a0 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f8fa 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa7f 	bl	8002bc8 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 f8e6 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d4:	f002 fe92 	bl	80033fc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d8:	bf00      	nop
 80006da:	3758      	adds	r7, #88	@ 0x58
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 80006fc:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800071a:	2204      	movs	r2, #4
 800071c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800075c:	f000 fc9a 	bl	8001094 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f89b 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC1_Init+0xc4>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000788:	f000 fec6 	bl	8001518 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000792:	f000 f885 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000078 	.word	0x20000078
 80007a4:	50040000 	.word	0x50040000
 80007a8:	21800100 	.word	0x21800100

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 ff06 	bl	8003600 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f851 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000dc 	.word	0x200000dc
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0x90>)
 8000870:	f001 fd0a 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_GPIO_Init+0x90>)
 800088c:	f001 fb92 	bl	8001fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09e      	sub	sp, #120	@ 0x78
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2254      	movs	r2, #84	@ 0x54
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fbb5 	bl	8004084 <memset>
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <HAL_ADC_MspInit+0xc0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d143      	bne.n	80009ac <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000924:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000928:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800092e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093c:	2307      	movs	r3, #7
 800093e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fb5c 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800095e:	f7ff ff9f 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000968:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000992:	2308      	movs	r3, #8
 8000994:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000996:	230b      	movs	r3, #11
 8000998:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f001 fb04 	bl	8001fb4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ac:	bf00      	nop
 80009ae:	3778      	adds	r7, #120	@ 0x78
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	50040000 	.word	0x50040000
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09e      	sub	sp, #120	@ 0x78
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2254      	movs	r2, #84	@ 0x54
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fb51 	bl	8004084 <memset>
  if(huart->Instance==USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d148      	bne.n	8000a7e <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fb09 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ff4c 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a24:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a56:	f001 faad 	bl	8001fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 fa9b 	bl	8001fb4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a7e:	bf00      	nop
 8000a80:	3778      	adds	r7, #120	@ 0x78
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f8c9 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f003 fab8 	bl	8004094 <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000c000 	.word	0x2000c000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	2000019c 	.word	0x2000019c
 8000b58:	200002f0 	.word	0x200002f0

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fa77 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fcfb 	bl	80005ac <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	200002ec 	.word	0x200002ec

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>

08000bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f001 f9b5 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f80e 	bl	8000c04 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff fe5a 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d023      	beq.n	8000c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_InitTick+0x70>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f9b3 	bl	8001f9a <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10f      	bne.n	8000c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d809      	bhi.n	8000c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f001 f98b 	bl	8001f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_InitTick+0x74>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e007      	b.n	8000c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e004      	b.n	8000c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e001      	b.n	8000c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	200001a0 	.word	0x200001a0

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200001a0 	.word	0x200001a0

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff ffee 	bl	8000ca4 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffde 	bl	8000ca4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008

08000d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3360      	adds	r3, #96	@ 0x60
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <LL_ADC_SetOffset+0x44>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	03fff000 	.word	0x03fff000

08000db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3360      	adds	r3, #96	@ 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3360      	adds	r3, #96	@ 0x60
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3330      	adds	r3, #48	@ 0x30
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	211f      	movs	r1, #31
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0e9b      	lsrs	r3, r3, #26
 8000e74:	f003 011f 	and.w	r1, r3, #31
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	431a      	orrs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3314      	adds	r3, #20
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	0e5b      	lsrs	r3, r3, #25
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	0d1b      	lsrs	r3, r3, #20
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	0d1b      	lsrs	r3, r3, #20
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0318 	and.w	r3, r3, #24
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f10:	40d9      	lsrs	r1, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	400b      	ands	r3, r1
 8000f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	0007ffff 	.word	0x0007ffff

08000f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6093      	str	r3, [r2, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f6c:	d101      	bne.n	8000f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <LL_ADC_IsEnabled+0x18>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <LL_ADC_IsEnabled+0x1a>
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800102e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001032:	f043 0204 	orr.w	r2, r3, #4
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b04      	cmp	r3, #4
 8001058:	d101      	bne.n	800105e <LL_ADC_REG_IsConversionOngoing+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b08      	cmp	r3, #8
 800107e:	d101      	bne.n	8001084 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e126      	b.n	80012fc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d109      	bne.n	80010d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fc19 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff3f 	bl	8000f58 <LL_ADC_IsDeepPowerDownEnabled>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff25 	bl	8000f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff5a 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d115      	bne.n	8001126 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff3e 	bl	8000f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001104:	4b7f      	ldr	r3, [pc, #508]	@ (8001304 <HAL_ADC_Init+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	4a7f      	ldr	r2, [pc, #508]	@ (8001308 <HAL_ADC_Init+0x274>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	099b      	lsrs	r3, r3, #6
 8001112:	3301      	adds	r3, #1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001118:	e002      	b.n	8001120 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff3c 	bl	8000fa8 <LL_ADC_IsInternalRegulatorEnabled>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10d      	bne.n	8001152 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff75 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 800115c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80bf 	bne.w	80012ea <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 80bb 	bne.w	80012ea <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001178:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff35 	bl	8000ff8 <LL_ADC_IsEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10b      	bne.n	80011ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001194:	485d      	ldr	r0, [pc, #372]	@ (800130c <HAL_ADC_Init+0x278>)
 8001196:	f7ff ff2f 	bl	8000ff8 <LL_ADC_IsEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	485a      	ldr	r0, [pc, #360]	@ (8001310 <HAL_ADC_Init+0x27c>)
 80011a8:	f7ff fdac 	bl	8000d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7e5b      	ldrb	r3, [r3, #25]
 80011b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d106      	bne.n	80011e8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011de:	3b01      	subs	r3, #1
 80011e0:	045b      	lsls	r3, r3, #17
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_ADC_Init+0x280>)
 800120c:	4013      	ands	r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	430b      	orrs	r3, r1
 8001216:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff25 	bl	800106c <LL_ADC_INJ_IsConversionOngoing>
 8001222:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13d      	bne.n	80012a6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d13a      	bne.n	80012a6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001234:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800123c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800124c:	f023 0302 	bic.w	r3, r3, #2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	69b9      	ldr	r1, [r7, #24]
 8001256:	430b      	orrs	r3, r1
 8001258:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001260:	2b01      	cmp	r3, #1
 8001262:	d118      	bne.n	8001296 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800127a:	4311      	orrs	r1, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001286:	430a      	orrs	r2, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	e007      	b.n	80012a6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10c      	bne.n	80012c8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	f023 010f 	bic.w	r1, r3, #15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80012c6:	e007      	b.n	80012d8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020f 	bic.w	r2, r2, #15
 80012d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012dc:	f023 0303 	bic.w	r3, r3, #3
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80012e8:	e007      	b.n	80012fa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	053e2d63 	.word	0x053e2d63
 800130c:	50040000 	.word	0x50040000
 8001310:	50040300 	.word	0x50040300
 8001314:	fff0c007 	.word	0xfff0c007

08001318 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe8e 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14f      	bne.n	80013d0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Start+0x26>
 800133a:	2302      	movs	r3, #2
 800133c:	e04b      	b.n	80013d6 <HAL_ADC_Start+0xbe>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fcc8 	bl	8001cdc <ADC_Enable>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d137      	bne.n	80013c6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001376:	d106      	bne.n	8001386 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	f023 0206 	bic.w	r2, r3, #6
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	659a      	str	r2, [r3, #88]	@ 0x58
 8001384:	e002      	b.n	800138c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	221c      	movs	r2, #28
 8001392:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe2d 	bl	800101e <LL_ADC_REG_StartConversion>
 80013c4:	e006      	b.n	80013d4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80013ce:	e001      	b.n	80013d4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d0:	2302      	movs	r3, #2
 80013d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d102      	bne.n	80013f6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013f0:	2308      	movs	r3, #8
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e010      	b.n	8001418 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001408:	f043 0220 	orr.w	r2, r3, #32
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e06f      	b.n	80014f4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001414:	2304      	movs	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001418:	f7ff fc44 	bl	8000ca4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800141e:	e021      	b.n	8001464 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	d01d      	beq.n	8001464 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001428:	f7ff fc3c 	bl	8000ca4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d302      	bcc.n	800143e <HAL_ADC_PollForConversion+0x60>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d112      	bne.n	8001464 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	f043 0204 	orr.w	r2, r3, #4
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e047      	b.n	80014f4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0d6      	beq.n	8001420 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001476:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fcc7 	bl	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01c      	beq.n	80014c8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e5b      	ldrb	r3, [r3, #25]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d111      	bne.n	80014c8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d104      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2208      	movs	r2, #8
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e008      	b.n	80014f2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d103      	bne.n	80014f2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0b6      	sub	sp, #216	@ 0xd8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADC_ConfigChannel+0x22>
 8001536:	2302      	movs	r3, #2
 8001538:	e3bb      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x79a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fd7d 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 83a0 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d824      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	3b02      	subs	r3, #2
 800156a:	2b03      	cmp	r3, #3
 800156c:	d81b      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x8e>
 800156e:	a201      	add	r2, pc, #4	@ (adr r2, 8001574 <HAL_ADC_ConfigChannel+0x5c>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001585 	.word	0x08001585
 8001578:	0800158d 	.word	0x0800158d
 800157c:	08001595 	.word	0x08001595
 8001580:	0800159d 	.word	0x0800159d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001584:	230c      	movs	r3, #12
 8001586:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800158a:	e010      	b.n	80015ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800158c:	2312      	movs	r3, #18
 800158e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001592:	e00c      	b.n	80015ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001594:	2318      	movs	r3, #24
 8001596:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800159a:	e008      	b.n	80015ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800159c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015a4:	e003      	b.n	80015ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015a6:	2306      	movs	r3, #6
 80015a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80015bc:	f7ff fc3e 	bl	8000e3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd3e 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 80015ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fd4a 	bl	800106c <LL_ADC_INJ_IsConversionOngoing>
 80015d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 81a4 	bne.w	800192e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 819f 	bne.w	800192e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	461a      	mov	r2, r3
 80015fe:	f7ff fc49 	bl	8000e94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00a      	beq.n	800163a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6919      	ldr	r1, [r3, #16]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001634:	f7ff fb9a 	bl	8000d6c <LL_ADC_SetOffset>
 8001638:	e179      	b.n	800192e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fbb7 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x14e>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fbac 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	0e9b      	lsrs	r3, r3, #26
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	e01e      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x18c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fba1 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800168c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001694:	2320      	movs	r3, #32
 8001696:	e004      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1a4>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0e9b      	lsrs	r3, r3, #26
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	e018      	b.n	80016ee <HAL_ADC_ConfigChannel+0x1d6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80016d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80016d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80016e0:	2320      	movs	r3, #32
 80016e2:	e004      	b.n	80016ee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80016e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fb70 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb54 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10a      	bne.n	800172c <HAL_ADC_ConfigChannel+0x214>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2101      	movs	r1, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fb49 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	0e9b      	lsrs	r3, r3, #26
 8001726:	f003 021f 	and.w	r2, r3, #31
 800172a:	e01e      	b.n	800176a <HAL_ADC_ConfigChannel+0x252>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fb3e 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800174a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800174e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800175e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x26a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0e9b      	lsrs	r3, r3, #26
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	e018      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x29c>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001796:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800179a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800179e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80017a6:	2320      	movs	r3, #32
 80017a8:	e004      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80017aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	2101      	movs	r1, #1
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb0d 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2102      	movs	r1, #2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff faf1 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10a      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x2da>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fae6 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	0e9b      	lsrs	r3, r3, #26
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	e01e      	b.n	8001830 <HAL_ADC_ConfigChannel+0x318>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fadb 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e004      	b.n	800182e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x330>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0e9b      	lsrs	r3, r3, #26
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	e014      	b.n	8001872 <HAL_ADC_ConfigChannel+0x35a>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800185c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001864:	2320      	movs	r3, #32
 8001866:	e004      	b.n	8001872 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001872:	429a      	cmp	r2, r3
 8001874:	d106      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff faae 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2103      	movs	r1, #3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa92 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10a      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x398>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2103      	movs	r1, #3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa87 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 021f 	and.w	r2, r3, #31
 80018ae:	e017      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x3c8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2103      	movs	r1, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa7c 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80018c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018ca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80018cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80018d2:	2320      	movs	r3, #32
 80018d4:	e003      	b.n	80018de <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80018d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x3e0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	e011      	b.n	800191c <HAL_ADC_ConfigChannel+0x404>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001908:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800190a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	2103      	movs	r1, #3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa59 	bl	8000de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb60 	bl	8000ff8 <LL_ADC_IsEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 8140 	bne.w	8001bc0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6819      	ldr	r1, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	461a      	mov	r2, r3
 800194e:	f7ff facd 	bl	8000eec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4a8f      	ldr	r2, [pc, #572]	@ (8001b94 <HAL_ADC_ConfigChannel+0x67c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	f040 8131 	bne.w	8001bc0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10b      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x46e>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	3301      	adds	r3, #1
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2b09      	cmp	r3, #9
 800197c:	bf94      	ite	ls
 800197e:	2301      	movls	r3, #1
 8001980:	2300      	movhi	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	e019      	b.n	80019ba <HAL_ADC_ConfigChannel+0x4a2>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001996:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800199e:	2320      	movs	r3, #32
 80019a0:	e003      	b.n	80019aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80019a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d079      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_ADC_ConfigChannel+0x4c2>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	3301      	adds	r3, #1
 80019d2:	069b      	lsls	r3, r3, #26
 80019d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019d8:	e015      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x4ee>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80019e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80019ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80019f2:	2320      	movs	r3, #32
 80019f4:	e003      	b.n	80019fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80019f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	069b      	lsls	r3, r3, #26
 8001a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x50e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0e9b      	lsrs	r3, r3, #26
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	e017      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x53e>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a36:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e003      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	ea42 0103 	orr.w	r1, r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x564>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	051b      	lsls	r3, r3, #20
 8001a7a:	e018      	b.n	8001aae <HAL_ADC_ConfigChannel+0x596>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001a94:	2320      	movs	r3, #32
 8001a96:	e003      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f003 021f 	and.w	r2, r3, #31
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	e081      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x5b6>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	069b      	lsls	r3, r3, #26
 8001ac8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001acc:	e015      	b.n	8001afa <HAL_ADC_ConfigChannel+0x5e2>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e003      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x602>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e9b      	lsrs	r3, r3, #26
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	e017      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x632>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	61bb      	str	r3, [r7, #24]
  return result;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x65e>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	3301      	adds	r3, #1
 8001b62:	f003 021f 	and.w	r2, r3, #31
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	051b      	lsls	r3, r3, #20
 8001b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b74:	e01e      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x69c>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  return result;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e006      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x688>
 8001b92:	bf00      	nop
 8001b94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f003 021f 	and.w	r2, r3, #31
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	3b1e      	subs	r3, #30
 8001bae:	051b      	lsls	r3, r3, #20
 8001bb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff f96a 	bl	8000e94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cbc <HAL_ADC_ConfigChannel+0x7a4>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d06c      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bcc:	483c      	ldr	r0, [pc, #240]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001bce:	f7ff f8bf 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8001bd2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d127      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d121      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a35      	ldr	r2, [pc, #212]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d157      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bfe:	4619      	mov	r1, r3
 8001c00:	482f      	ldr	r0, [pc, #188]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c02:	f7ff f892 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_ADC_ConfigChannel+0x7b4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d12a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c5c:	f7ff f865 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c60:	e021      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d11c      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d116      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d111      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c8e:	f7ff f84c 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
 8001c92:	e008      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	37d8      	adds	r7, #216	@ 0xd8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	80080000 	.word	0x80080000
 8001cc0:	50040300 	.word	0x50040300
 8001cc4:	c7520000 	.word	0xc7520000
 8001cc8:	50040000 	.word	0x50040000
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	053e2d63 	.word	0x053e2d63
 8001cd4:	cb840000 	.word	0xcb840000
 8001cd8:	80000001 	.word	0x80000001

08001cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f983 	bl	8000ff8 <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d169      	bne.n	8001dcc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <ADC_Enable+0xfc>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e055      	b.n	8001dce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f952 	bl	8000fd0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d2c:	482b      	ldr	r0, [pc, #172]	@ (8001ddc <ADC_Enable+0x100>)
 8001d2e:	f7ff f80f 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8001d32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <ADC_Enable+0x104>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4a28      	ldr	r2, [pc, #160]	@ (8001de4 <ADC_Enable+0x108>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d56:	e002      	b.n	8001d5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f9      	bne.n	8001d58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d64:	f7fe ff9e 	bl	8000ca4 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d6a:	e028      	b.n	8001dbe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f941 	bl	8000ff8 <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d104      	bne.n	8001d86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f925 	bl	8000fd0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d86:	f7fe ff8d 	bl	8000ca4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d914      	bls.n	8001dbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d00d      	beq.n	8001dbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e007      	b.n	8001dce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d1cf      	bne.n	8001d6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	8000003f 	.word	0x8000003f
 8001ddc:	50040300 	.word	0x50040300
 8001de0:	20000000 	.word	0x20000000
 8001de4:	053e2d63 	.word	0x053e2d63

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	@ (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff47 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff5c 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff8e 	bl	8001ea0 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5d 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffb0 	bl	8001f08 <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e148      	b.n	8002256 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 813a 	beq.w	8002250 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x40>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d130      	bne.n	8002056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202a:	2201      	movs	r2, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0201 	and.w	r2, r3, #1
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b03      	cmp	r3, #3
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d123      	bne.n	80020e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8094 	beq.w	8002250 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b52      	ldr	r3, [pc, #328]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	4a51      	ldr	r2, [pc, #324]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6613      	str	r3, [r2, #96]	@ 0x60
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_GPIO_Init+0x2c0>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002140:	4a4d      	ldr	r2, [pc, #308]	@ (8002278 <HAL_GPIO_Init+0x2c4>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1d4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_GPIO_Init+0x2c8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1d0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <HAL_GPIO_Init+0x2cc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1cc>
 800217c:	2302      	movs	r3, #2
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002180:	2307      	movs	r3, #7
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x1d6>
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219a:	4937      	ldr	r1, [pc, #220]	@ (8002278 <HAL_GPIO_Init+0x2c4>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f6:	4a23      	ldr	r2, [pc, #140]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <HAL_GPIO_Init+0x2d0>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f aeaf 	bne.w	8001fc4 <HAL_GPIO_Init+0x10>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40007000 	.word	0x40007000

080022d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002302:	d130      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002304:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800230c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002310:	d038      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002312:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800231a:	4a1e      	ldr	r2, [pc, #120]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800231c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2232      	movs	r2, #50	@ 0x32
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002338:	e002      	b.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3b01      	subs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234c:	d102      	bne.n	8002354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f2      	bne.n	800233a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002360:	d110      	bne.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e00f      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800236e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002372:	d007      	beq.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40007000 	.word	0x40007000
 8002398:	20000000 	.word	0x20000000
 800239c:	431bde83 	.word	0x431bde83

080023a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	f000 bc02 	b.w	8002bb8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4b96      	ldr	r3, [pc, #600]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023be:	4b94      	ldr	r3, [pc, #592]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80e4 	beq.w	800259e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_RCC_OscConfig+0x4c>
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	f040 808b 	bne.w	80024fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f040 8087 	bne.w	80024fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ec:	4b88      	ldr	r3, [pc, #544]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x64>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e3d9      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4b81      	ldr	r3, [pc, #516]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <HAL_RCC_OscConfig+0x7e>
 8002414:	4b7e      	ldr	r3, [pc, #504]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800241c:	e005      	b.n	800242a <HAL_RCC_OscConfig+0x8a>
 800241e:	4b7c      	ldr	r3, [pc, #496]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800242a:	4293      	cmp	r3, r2
 800242c:	d223      	bcs.n	8002476 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fd8c 	bl	8002f50 <RCC_SetFlashLatencyFromMSIRange>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e3ba      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002442:	4b73      	ldr	r3, [pc, #460]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a72      	ldr	r2, [pc, #456]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	496d      	ldr	r1, [pc, #436]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002460:	4b6b      	ldr	r3, [pc, #428]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	4968      	ldr	r1, [pc, #416]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	e025      	b.n	80024c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002476:	4b66      	ldr	r3, [pc, #408]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a65      	ldr	r2, [pc, #404]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b63      	ldr	r3, [pc, #396]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4960      	ldr	r1, [pc, #384]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002494:	4b5e      	ldr	r3, [pc, #376]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	495b      	ldr	r1, [pc, #364]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fd4c 	bl	8002f50 <RCC_SetFlashLatencyFromMSIRange>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e37a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c2:	f000 fc81 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b51      	ldr	r3, [pc, #324]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4950      	ldr	r1, [pc, #320]	@ (8002614 <HAL_RCC_OscConfig+0x274>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a4e      	ldr	r2, [pc, #312]	@ (8002618 <HAL_RCC_OscConfig+0x278>)
 80024e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024e2:	4b4e      	ldr	r3, [pc, #312]	@ (800261c <HAL_RCC_OscConfig+0x27c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fb8c 	bl	8000c04 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d052      	beq.n	800259c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	e35e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d032      	beq.n	8002568 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002502:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a42      	ldr	r2, [pc, #264]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250e:	f7fe fbc9 	bl	8000ca4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002516:	f7fe fbc5 	bl	8000ca4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e347      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002528:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002534:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4930      	ldr	r1, [pc, #192]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002552:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	492b      	ldr	r1, [pc, #172]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 8002566:	e01a      	b.n	800259e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a28      	ldr	r2, [pc, #160]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002574:	f7fe fb96 	bl	8000ca4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257c:	f7fe fb92 	bl	8000ca4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e314      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1dc>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d073      	beq.n	8002692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x21c>
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d10e      	bne.n	80025d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d063      	beq.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d15f      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e2f1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x24c>
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e025      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d114      	bne.n	8002620 <HAL_RCC_OscConfig+0x280>
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a02      	ldr	r2, [pc, #8]	@ (8002610 <HAL_RCC_OscConfig+0x270>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e013      	b.n	8002638 <HAL_RCC_OscConfig+0x298>
 8002610:	40021000 	.word	0x40021000
 8002614:	080049ac 	.word	0x080049ac
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004
 8002620:	4ba0      	ldr	r3, [pc, #640]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a9f      	ldr	r2, [pc, #636]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b9d      	ldr	r3, [pc, #628]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a9c      	ldr	r2, [pc, #624]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fb30 	bl	8000ca4 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fb2c 	bl	8000ca4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e2ae      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b92      	ldr	r3, [pc, #584]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x2a8>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fb1c 	bl	8000ca4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7fe fb18 	bl	8000ca4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e29a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d0>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d060      	beq.n	8002760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x310>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d119      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d116      	bne.n	80026de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x328>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e277      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	4973      	ldr	r1, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	e040      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d023      	beq.n	800272e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e6:	4b6f      	ldr	r3, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fad7 	bl	8000ca4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fad3 	bl	8000ca4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e255      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	4b65      	ldr	r3, [pc, #404]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b62      	ldr	r3, [pc, #392]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	495f      	ldr	r1, [pc, #380]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	e018      	b.n	8002760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b5d      	ldr	r3, [pc, #372]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5c      	ldr	r2, [pc, #368]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fab3 	bl	8000ca4 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe faaf 	bl	8000ca4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e231      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	4b53      	ldr	r3, [pc, #332]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d03c      	beq.n	80027e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01c      	beq.n	80027ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002774:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277a:	4a4a      	ldr	r2, [pc, #296]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fa8e 	bl	8000ca4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278c:	f7fe fa8a 	bl	8000ca4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e20c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279e:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x3ec>
 80027ac:	e01b      	b.n	80027e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ae:	4b3d      	ldr	r3, [pc, #244]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fa71 	bl	8000ca4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fa6d 	bl	8000ca4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1ef      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d8:	4b32      	ldr	r3, [pc, #200]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ef      	bne.n	80027c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a6 	beq.w	8002940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f8:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	4a26      	ldr	r2, [pc, #152]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002810:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281c:	2301      	movs	r3, #1
 800281e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002820:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d118      	bne.n	800285e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002838:	f7fe fa34 	bl	8000ca4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe fa30 	bl	8000ca4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1b2      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x508>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d108      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d8>
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	4a0d      	ldr	r2, [pc, #52]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002876:	e029      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d115      	bne.n	80028ac <HAL_RCC_OscConfig+0x50c>
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	4a03      	ldr	r2, [pc, #12]	@ (80028a4 <HAL_RCC_OscConfig+0x504>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x52c>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
 80028ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	4a99      	ldr	r2, [pc, #612]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028bc:	4b96      	ldr	r3, [pc, #600]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c2:	4a95      	ldr	r2, [pc, #596]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe f9e6 	bl	8000ca4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7fe f9e2 	bl	8000ca4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e162      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b89      	ldr	r3, [pc, #548]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCC_OscConfig+0x53c>
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe f9cf 	bl	8000ca4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe f9cb 	bl	8000ca4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e14b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b7d      	ldr	r3, [pc, #500]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ed      	bne.n	800290a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b78      	ldr	r3, [pc, #480]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	4a77      	ldr	r2, [pc, #476]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d03c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01c      	beq.n	800298e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002954:	4b70      	ldr	r3, [pc, #448]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800295a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe f99e 	bl	8000ca4 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296c:	f7fe f99a 	bl	8000ca4 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e11c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800297e:	4b66      	ldr	r3, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCC_OscConfig+0x5cc>
 800298c:	e01b      	b.n	80029c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800298e:	4b62      	ldr	r3, [pc, #392]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002994:	4a60      	ldr	r2, [pc, #384]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe f981 	bl	8000ca4 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a6:	f7fe f97d 	bl	8000ca4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0ff      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b8:	4b57      	ldr	r3, [pc, #348]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80029ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ef      	bne.n	80029a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80f3 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f040 80c9 	bne.w	8002b6c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029da:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d12c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	3b01      	subs	r3, #1
 80029fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d123      	bne.n	8002a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d11b      	bne.n	8002a48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d113      	bne.n	8002a48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d109      	bne.n	8002a48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d06b      	beq.n	8002b20 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d062      	beq.n	8002b14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a4e:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0ac      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a6a:	f7fe f91b 	bl	8000ca4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe f917 	bl	8000ca4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e099      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a84:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a90:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x77c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	4311      	orrs	r1, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aaa:	0212      	lsls	r2, r2, #8
 8002aac:	4311      	orrs	r1, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ab2:	0852      	lsrs	r2, r2, #1
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	0552      	lsls	r2, r2, #21
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002abe:	0852      	lsrs	r2, r2, #1
 8002ac0:	3a01      	subs	r2, #1
 8002ac2:	0652      	lsls	r2, r2, #25
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aca:	06d2      	lsls	r2, r2, #27
 8002acc:	430a      	orrs	r2, r1
 8002ace:	4912      	ldr	r1, [pc, #72]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aec:	f7fe f8da 	bl	8000ca4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe f8d6 	bl	8000ca4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e058      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_RCC_OscConfig+0x778>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b12:	e050      	b.n	8002bb6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e04f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d144      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b44:	f7fe f8ae 	bl	8000ca4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f8aa 	bl	8000ca4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e02c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x7ac>
 8002b6a:	e024      	b.n	8002bb6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d01f      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f891 	bl	8000ca4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe f88d 	bl	8000ca4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4905      	ldr	r1, [pc, #20]	@ (8002bc0 <HAL_RCC_OscConfig+0x820>)
 8002baa:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_RCC_OscConfig+0x824>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60cb      	str	r3, [r1, #12]
 8002bb0:	e001      	b.n	8002bb6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	feeefffc 	.word	0xfeeefffc

08002bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0e7      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b75      	ldr	r3, [pc, #468]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b72      	ldr	r3, [pc, #456]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	4970      	ldr	r1, [pc, #448]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0cf      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d010      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b66      	ldr	r3, [pc, #408]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d908      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b63      	ldr	r3, [pc, #396]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4960      	ldr	r1, [pc, #384]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d04c      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d121      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0a6      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4b54      	ldr	r3, [pc, #336]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e09a      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e08e      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e086      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4943      	ldr	r1, [pc, #268]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fd fff8 	bl	8000ca4 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fd fff4 	bl	8000ca4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e06e      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d208      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	492b      	ldr	r1, [pc, #172]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0e:	4b29      	ldr	r3, [pc, #164]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d210      	bcs.n	8002d3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1c:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 0207 	bic.w	r2, r3, #7
 8002d24:	4923      	ldr	r1, [pc, #140]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e036      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4918      	ldr	r1, [pc, #96]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d68:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4910      	ldr	r1, [pc, #64]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d7c:	f000 f824 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	490b      	ldr	r1, [pc, #44]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f4>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd ff2f 	bl	8000c04 <HAL_InitTick>
 8002da6:	4603      	mov	r3, r0
 8002da8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002daa:	7afb      	ldrb	r3, [r7, #11]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	080049ac 	.word	0x080049ac
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000004 	.word	0x20000004

08002dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x34>
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d121      	bne.n	8002e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d11e      	bne.n	8002e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e08:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e005      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e24:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d102      	bne.n	8002e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	e004      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e4c:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d134      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d003      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0xac>
 8002e6c:	e005      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e70:	617b      	str	r3, [r7, #20]
      break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e76:	617b      	str	r3, [r7, #20]
      break;
 8002e78:	e002      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	617b      	str	r3, [r7, #20]
      break;
 8002e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	0e5b      	lsrs	r3, r3, #25
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ec0:	69bb      	ldr	r3, [r7, #24]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080049c4 	.word	0x080049c4
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080049bc 	.word	0x080049bc

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f28:	f7ff ffda 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0adb      	lsrs	r3, r3, #11
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080049bc 	.word	0x080049bc

08002f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f68:	f7ff f9b6 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002f6c:	6178      	str	r0, [r7, #20]
 8002f6e:	e014      	b.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	4a24      	ldr	r2, [pc, #144]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f88:	f7ff f9a6 	bl	80022d8 <HAL_PWREx_GetVoltageRange>
 8002f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f92:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa0:	d10b      	bne.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b80      	cmp	r3, #128	@ 0x80
 8002fa6:	d919      	bls.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fac:	d902      	bls.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fae:	2302      	movs	r3, #2
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e013      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	e010      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b80      	cmp	r3, #128	@ 0x80
 8002fbe:	d902      	bls.n	8002fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	e00a      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b80      	cmp	r3, #128	@ 0x80
 8002fca:	d102      	bne.n	8002fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fcc:	2302      	movs	r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	e004      	b.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d101      	bne.n	8002fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 0207 	bic.w	r2, r3, #7
 8002fe4:	4909      	ldr	r1, [pc, #36]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fec:	4b07      	ldr	r3, [pc, #28]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	40022000 	.word	0x40022000

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003018:	2300      	movs	r3, #0
 800301a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800301c:	2300      	movs	r3, #0
 800301e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003028:	2b00      	cmp	r3, #0
 800302a:	d031      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003034:	d01a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003036:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800303a:	d814      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003044:	d10f      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003046:	4b5d      	ldr	r3, [pc, #372]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a5c      	ldr	r2, [pc, #368]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003052:	e00c      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f9de 	bl	800341c <RCCEx_PLLSAI1_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003064:	e003      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	74fb      	strb	r3, [r7, #19]
      break;
 800306a:	e000      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800306c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003074:	4b51      	ldr	r3, [pc, #324]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	494e      	ldr	r1, [pc, #312]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800308a:	e001      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 809e 	beq.w	80031da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a2:	4b46      	ldr	r3, [pc, #280]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	4a3f      	ldr	r2, [pc, #252]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c4:	4b3d      	ldr	r3, [pc, #244]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d4:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a39      	ldr	r2, [pc, #228]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e0:	f7fd fde0 	bl	8000ca4 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e6:	e009      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e8:	f7fd fddc 	bl	8000ca4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d902      	bls.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	74fb      	strb	r3, [r7, #19]
        break;
 80030fa:	e005      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d15a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800310e:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01e      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	429a      	cmp	r2, r3
 8003128:	d019      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800312a:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003134:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003136:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313c:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003146:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003156:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d016      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fd9c 	bl	8000ca4 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	e00b      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fd fd98 	bl	8000ca4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d902      	bls.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	74fb      	strb	r3, [r7, #19]
            break;
 8003186:	e006      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ec      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319c:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	4904      	ldr	r1, [pc, #16]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031b2:	e009      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c8:	7c7b      	ldrb	r3, [r7, #17]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b8a      	ldr	r3, [pc, #552]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	4a89      	ldr	r2, [pc, #548]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e6:	4b84      	ldr	r3, [pc, #528]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ec:	f023 0203 	bic.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4980      	ldr	r1, [pc, #512]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003208:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	f023 020c 	bic.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	4978      	ldr	r1, [pc, #480]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322a:	4b73      	ldr	r3, [pc, #460]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	496f      	ldr	r1, [pc, #444]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324c:	4b6a      	ldr	r3, [pc, #424]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	4967      	ldr	r1, [pc, #412]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800326e:	4b62      	ldr	r3, [pc, #392]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	495e      	ldr	r1, [pc, #376]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003290:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	4956      	ldr	r1, [pc, #344]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032b2:	4b51      	ldr	r3, [pc, #324]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	494d      	ldr	r1, [pc, #308]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d028      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d4:	4b48      	ldr	r3, [pc, #288]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	4945      	ldr	r1, [pc, #276]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f2:	d106      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f4:	4b40      	ldr	r3, [pc, #256]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a3f      	ldr	r2, [pc, #252]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fe:	60d3      	str	r3, [r2, #12]
 8003300:	e011      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800330a:	d10c      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	2101      	movs	r1, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f882 	bl	800341c <RCCEx_PLLSAI1_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003338:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	492d      	ldr	r1, [pc, #180]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003350:	d106      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003352:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4a28      	ldr	r2, [pc, #160]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800335c:	60d3      	str	r3, [r2, #12]
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003368:	d10c      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f853 	bl	800341c <RCCEx_PLLSAI1_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800339e:	4916      	ldr	r1, [pc, #88]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ae:	d10c      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f830 	bl	800341c <RCCEx_PLLSAI1_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	4904      	ldr	r1, [pc, #16]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a04      	ldr	r2, [pc, #16]	@ (8003418 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800342a:	4b74      	ldr	r3, [pc, #464]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003436:	4b71      	ldr	r3, [pc, #452]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d10d      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
       ||
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800344e:	4b6b      	ldr	r3, [pc, #428]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
       ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d047      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e044      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d018      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x86>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d825      	bhi.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <RCCEx_PLLSAI1_Config+0x62>
 8003478:	2b02      	cmp	r3, #2
 800347a:	d009      	beq.n	8003490 <RCCEx_PLLSAI1_Config+0x74>
 800347c:	e020      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348e:	e01a      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003490:	4b5a      	ldr	r3, [pc, #360]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d116      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e013      	b.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034a2:	4b56      	ldr	r3, [pc, #344]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ae:	4b53      	ldr	r3, [pc, #332]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034be:	e006      	b.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e004      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034d6:	4b49      	ldr	r3, [pc, #292]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	430b      	orrs	r3, r1
 80034ec:	4943      	ldr	r1, [pc, #268]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d17c      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f8:	4b40      	ldr	r3, [pc, #256]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3f      	ldr	r2, [pc, #252]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fd fbce 	bl	8000ca4 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fd fbca 	bl	8000ca4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
        break;
 800351e:	e005      	b.n	800352c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003520:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ef      	bne.n	800350c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d15f      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d110      	bne.n	800355a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003538:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003540:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	06d2      	lsls	r2, r2, #27
 8003550:	430a      	orrs	r2, r1
 8003552:	492a      	ldr	r1, [pc, #168]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	610b      	str	r3, [r1, #16]
 8003558:	e027      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d112      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003560:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003568:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	0211      	lsls	r1, r2, #8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6912      	ldr	r2, [r2, #16]
 8003576:	0852      	lsrs	r2, r2, #1
 8003578:	3a01      	subs	r2, #1
 800357a:	0552      	lsls	r2, r2, #21
 800357c:	430a      	orrs	r2, r1
 800357e:	491f      	ldr	r1, [pc, #124]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	610b      	str	r3, [r1, #16]
 8003584:	e011      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003586:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800358e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6892      	ldr	r2, [r2, #8]
 8003596:	0211      	lsls	r1, r2, #8
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6952      	ldr	r2, [r2, #20]
 800359c:	0852      	lsrs	r2, r2, #1
 800359e:	3a01      	subs	r2, #1
 80035a0:	0652      	lsls	r2, r2, #25
 80035a2:	430a      	orrs	r2, r1
 80035a4:	4915      	ldr	r1, [pc, #84]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a13      	ldr	r2, [pc, #76]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fd fb75 	bl	8000ca4 <HAL_GetTick>
 80035ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035bc:	e009      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035be:	f7fd fb71 	bl	8000ca4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d902      	bls.n	80035d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	73fb      	strb	r3, [r7, #15]
          break;
 80035d0:	e005      	b.n	80035de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ef      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4903      	ldr	r1, [pc, #12]	@ (80035fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e040      	b.n	8003694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd f9ca 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	@ 0x24
 800362c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fade 	bl	8003c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8af 	bl	80037b0 <UART_SetConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e01b      	b.n	8003694 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800366a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800367a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fb5d 	bl	8003d4c <UART_CheckIdleState>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d177      	bne.n	80037a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_UART_Transmit+0x24>
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e070      	b.n	80037a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2221      	movs	r2, #33	@ 0x21
 80036d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036d2:	f7fd fae7 	bl	8000ca4 <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f0:	d108      	bne.n	8003704 <HAL_UART_Transmit+0x68>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e003      	b.n	800370c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800370c:	e02f      	b.n	800376e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	@ 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fbbf 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e03b      	b.n	80037a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	881a      	ldrh	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003740:	b292      	uxth	r2, r2
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	3302      	adds	r3, #2
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e007      	b.n	800375c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3301      	adds	r3, #1
 800375a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1c9      	bne.n	800370e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	2140      	movs	r1, #64	@ 0x40
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fb89 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e005      	b.n	80037a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b08a      	sub	sp, #40	@ 0x28
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4bb4      	ldr	r3, [pc, #720]	@ (8003ab0 <UART_SetConfig+0x300>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4aa9      	ldr	r2, [pc, #676]	@ (8003ab4 <UART_SetConfig+0x304>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003818:	4313      	orrs	r3, r2
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4aa0      	ldr	r2, [pc, #640]	@ (8003ab8 <UART_SetConfig+0x308>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d126      	bne.n	8003888 <UART_SetConfig+0xd8>
 800383a:	4ba0      	ldr	r3, [pc, #640]	@ (8003abc <UART_SetConfig+0x30c>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b03      	cmp	r3, #3
 8003846:	d81b      	bhi.n	8003880 <UART_SetConfig+0xd0>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <UART_SetConfig+0xa0>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003861 	.word	0x08003861
 8003854:	08003871 	.word	0x08003871
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e080      	b.n	800396a <UART_SetConfig+0x1ba>
 8003868:	2302      	movs	r3, #2
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e07c      	b.n	800396a <UART_SetConfig+0x1ba>
 8003870:	2304      	movs	r3, #4
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e078      	b.n	800396a <UART_SetConfig+0x1ba>
 8003878:	2308      	movs	r3, #8
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e074      	b.n	800396a <UART_SetConfig+0x1ba>
 8003880:	2310      	movs	r3, #16
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003886:	e070      	b.n	800396a <UART_SetConfig+0x1ba>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a8c      	ldr	r2, [pc, #560]	@ (8003ac0 <UART_SetConfig+0x310>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d138      	bne.n	8003904 <UART_SetConfig+0x154>
 8003892:	4b8a      	ldr	r3, [pc, #552]	@ (8003abc <UART_SetConfig+0x30c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d82d      	bhi.n	80038fc <UART_SetConfig+0x14c>
 80038a0:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <UART_SetConfig+0xf8>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038e5 	.word	0x080038e5
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e2:	e042      	b.n	800396a <UART_SetConfig+0x1ba>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e03e      	b.n	800396a <UART_SetConfig+0x1ba>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e03a      	b.n	800396a <UART_SetConfig+0x1ba>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fa:	e036      	b.n	800396a <UART_SetConfig+0x1ba>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e032      	b.n	800396a <UART_SetConfig+0x1ba>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab4 <UART_SetConfig+0x304>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d12a      	bne.n	8003964 <UART_SetConfig+0x1b4>
 800390e:	4b6b      	ldr	r3, [pc, #428]	@ (8003abc <UART_SetConfig+0x30c>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800391c:	d01a      	beq.n	8003954 <UART_SetConfig+0x1a4>
 800391e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003922:	d81b      	bhi.n	800395c <UART_SetConfig+0x1ac>
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003928:	d00c      	beq.n	8003944 <UART_SetConfig+0x194>
 800392a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392e:	d815      	bhi.n	800395c <UART_SetConfig+0x1ac>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <UART_SetConfig+0x18c>
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d008      	beq.n	800394c <UART_SetConfig+0x19c>
 800393a:	e00f      	b.n	800395c <UART_SetConfig+0x1ac>
 800393c:	2300      	movs	r3, #0
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003942:	e012      	b.n	800396a <UART_SetConfig+0x1ba>
 8003944:	2302      	movs	r3, #2
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800394a:	e00e      	b.n	800396a <UART_SetConfig+0x1ba>
 800394c:	2304      	movs	r3, #4
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003952:	e00a      	b.n	800396a <UART_SetConfig+0x1ba>
 8003954:	2308      	movs	r3, #8
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800395a:	e006      	b.n	800396a <UART_SetConfig+0x1ba>
 800395c:	2310      	movs	r3, #16
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003962:	e002      	b.n	800396a <UART_SetConfig+0x1ba>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a51      	ldr	r2, [pc, #324]	@ (8003ab4 <UART_SetConfig+0x304>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d17a      	bne.n	8003a6a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003978:	2b08      	cmp	r3, #8
 800397a:	d824      	bhi.n	80039c6 <UART_SetConfig+0x216>
 800397c:	a201      	add	r2, pc, #4	@ (adr r2, 8003984 <UART_SetConfig+0x1d4>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039c7 	.word	0x080039c7
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039b7 	.word	0x080039b7
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039c7 	.word	0x080039c7
 80039a4:	080039bf 	.word	0x080039bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7ff faa6 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80039ac:	61f8      	str	r0, [r7, #28]
        break;
 80039ae:	e010      	b.n	80039d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b44      	ldr	r3, [pc, #272]	@ (8003ac4 <UART_SetConfig+0x314>)
 80039b2:	61fb      	str	r3, [r7, #28]
        break;
 80039b4:	e00d      	b.n	80039d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7ff fa07 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 80039ba:	61f8      	str	r0, [r7, #28]
        break;
 80039bc:	e009      	b.n	80039d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c2:	61fb      	str	r3, [r7, #28]
        break;
 80039c4:	e005      	b.n	80039d2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8107 	beq.w	8003be8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d305      	bcc.n	80039f6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d903      	bls.n	80039fe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039fc:	e0f4      	b.n	8003be8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2200      	movs	r2, #0
 8003a02:	461c      	mov	r4, r3
 8003a04:	4615      	mov	r5, r2
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	022b      	lsls	r3, r5, #8
 8003a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a14:	0222      	lsls	r2, r4, #8
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	6849      	ldr	r1, [r1, #4]
 8003a1a:	0849      	lsrs	r1, r1, #1
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	4688      	mov	r8, r1
 8003a20:	4681      	mov	r9, r0
 8003a22:	eb12 0a08 	adds.w	sl, r2, r8
 8003a26:	eb43 0b09 	adc.w	fp, r3, r9
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a38:	4650      	mov	r0, sl
 8003a3a:	4659      	mov	r1, fp
 8003a3c:	f7fc fc20 	bl	8000280 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4e:	d308      	bcc.n	8003a62 <UART_SetConfig+0x2b2>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a56:	d204      	bcs.n	8003a62 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	e0c2      	b.n	8003be8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a68:	e0be      	b.n	8003be8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a72:	d16a      	bne.n	8003b4a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d834      	bhi.n	8003ae6 <UART_SetConfig+0x336>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <UART_SetConfig+0x2d4>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ae7 	.word	0x08003ae7
 8003a94:	08003ad7 	.word	0x08003ad7
 8003a98:	08003ae7 	.word	0x08003ae7
 8003a9c:	08003ae7 	.word	0x08003ae7
 8003aa0:	08003ae7 	.word	0x08003ae7
 8003aa4:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7ff fa26 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8003aac:	61f8      	str	r0, [r7, #28]
        break;
 8003aae:	e020      	b.n	8003af2 <UART_SetConfig+0x342>
 8003ab0:	efff69f3 	.word	0xefff69f3
 8003ab4:	40008000 	.word	0x40008000
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40004400 	.word	0x40004400
 8003ac4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7ff fa2c 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003acc:	61f8      	str	r0, [r7, #28]
        break;
 8003ace:	e010      	b.n	8003af2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8003c04 <UART_SetConfig+0x454>)
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e00d      	b.n	8003af2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7ff f977 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8003ada:	61f8      	str	r0, [r7, #28]
        break;
 8003adc:	e009      	b.n	8003af2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae2:	61fb      	str	r3, [r7, #28]
        break;
 8003ae4:	e005      	b.n	8003af2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d077      	beq.n	8003be8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005a      	lsls	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	441a      	add	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d916      	bls.n	8003b42 <UART_SetConfig+0x392>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1a:	d212      	bcs.n	8003b42 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f023 030f 	bic.w	r3, r3, #15
 8003b24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	8afb      	ldrh	r3, [r7, #22]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	8afa      	ldrh	r2, [r7, #22]
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	e052      	b.n	8003be8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b48:	e04e      	b.n	8003be8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d827      	bhi.n	8003ba2 <UART_SetConfig+0x3f2>
 8003b52:	a201      	add	r2, pc, #4	@ (adr r2, 8003b58 <UART_SetConfig+0x3a8>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b8d 	.word	0x08003b8d
 8003b64:	08003ba3 	.word	0x08003ba3
 8003b68:	08003b93 	.word	0x08003b93
 8003b6c:	08003ba3 	.word	0x08003ba3
 8003b70:	08003ba3 	.word	0x08003ba3
 8003b74:	08003ba3 	.word	0x08003ba3
 8003b78:	08003b9b 	.word	0x08003b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b7c:	f7ff f9bc 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8003b80:	61f8      	str	r0, [r7, #28]
        break;
 8003b82:	e014      	b.n	8003bae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7ff f9ce 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8003b88:	61f8      	str	r0, [r7, #28]
        break;
 8003b8a:	e010      	b.n	8003bae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <UART_SetConfig+0x454>)
 8003b8e:	61fb      	str	r3, [r7, #28]
        break;
 8003b90:	e00d      	b.n	8003bae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7ff f919 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8003b96:	61f8      	str	r0, [r7, #28]
        break;
 8003b98:	e009      	b.n	8003bae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ba0:	e005      	b.n	8003bae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bac:	bf00      	nop
    }

    if (pclk != 0U)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d019      	beq.n	8003be8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085a      	lsrs	r2, r3, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b0f      	cmp	r3, #15
 8003bcc:	d909      	bls.n	8003be2 <UART_SetConfig+0x432>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd4:	d205      	bcs.n	8003be2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	e002      	b.n	8003be8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3728      	adds	r7, #40	@ 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	00f42400 	.word	0x00f42400

08003c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d06:	d10a      	bne.n	8003d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
  }
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b098      	sub	sp, #96	@ 0x60
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d5c:	f7fc ffa2 	bl	8000ca4 <HAL_GetTick>
 8003d60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d12e      	bne.n	8003dce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f88c 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d021      	beq.n	8003dce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003daa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e062      	b.n	8003e94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d149      	bne.n	8003e70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f856 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d03c      	beq.n	8003e70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	623b      	str	r3, [r7, #32]
   return(result);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e48:	61fa      	str	r2, [r7, #28]
 8003e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69b9      	ldr	r1, [r7, #24]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	617b      	str	r3, [r7, #20]
   return(result);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e011      	b.n	8003e94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3758      	adds	r7, #88	@ 0x58
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e04f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d04b      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fc fef5 	bl	8000ca4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e04e      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d037      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	d034      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d031      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d110      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2208      	movs	r2, #8
 8003efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f838 	bl	8003f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e029      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f28:	d111      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f81e 	bl	8003f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	bf0c      	ite	eq
 8003f5e:	2301      	moveq	r3, #1
 8003f60:	2300      	movne	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d0a0      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b095      	sub	sp, #84	@ 0x54
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d118      	bne.n	800401e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
 8004000:	647b      	str	r3, [r7, #68]	@ 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6979      	ldr	r1, [r7, #20]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e6      	bne.n	8003fec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004032:	bf00      	nop
 8004034:	3754      	adds	r7, #84	@ 0x54
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <siprintf>:
 8004040:	b40e      	push	{r1, r2, r3}
 8004042:	b510      	push	{r4, lr}
 8004044:	b09d      	sub	sp, #116	@ 0x74
 8004046:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004048:	9002      	str	r0, [sp, #8]
 800404a:	9006      	str	r0, [sp, #24]
 800404c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004050:	480a      	ldr	r0, [pc, #40]	@ (800407c <siprintf+0x3c>)
 8004052:	9107      	str	r1, [sp, #28]
 8004054:	9104      	str	r1, [sp, #16]
 8004056:	490a      	ldr	r1, [pc, #40]	@ (8004080 <siprintf+0x40>)
 8004058:	f853 2b04 	ldr.w	r2, [r3], #4
 800405c:	9105      	str	r1, [sp, #20]
 800405e:	2400      	movs	r4, #0
 8004060:	a902      	add	r1, sp, #8
 8004062:	6800      	ldr	r0, [r0, #0]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004068:	f000 f994 	bl	8004394 <_svfiprintf_r>
 800406c:	9b02      	ldr	r3, [sp, #8]
 800406e:	701c      	strb	r4, [r3, #0]
 8004070:	b01d      	add	sp, #116	@ 0x74
 8004072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004076:	b003      	add	sp, #12
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	2000000c 	.word	0x2000000c
 8004080:	ffff0208 	.word	0xffff0208

08004084 <memset>:
 8004084:	4402      	add	r2, r0
 8004086:	4603      	mov	r3, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	@ (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	@ (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	@ (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	@ (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	@ (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 fc64 	bl	8004980 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004a30 	.word	0x08004a30
 80040dc:	08004a30 	.word	0x08004a30
 80040e0:	08004a30 	.word	0x08004a30
 80040e4:	08004a34 	.word	0x08004a34

080040e8 <__retarget_lock_acquire_recursive>:
 80040e8:	4770      	bx	lr

080040ea <__retarget_lock_release_recursive>:
 80040ea:	4770      	bx	lr

080040ec <_free_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4605      	mov	r5, r0
 80040f0:	2900      	cmp	r1, #0
 80040f2:	d041      	beq.n	8004178 <_free_r+0x8c>
 80040f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f8:	1f0c      	subs	r4, r1, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfb8      	it	lt
 80040fe:	18e4      	addlt	r4, r4, r3
 8004100:	f000 f8e0 	bl	80042c4 <__malloc_lock>
 8004104:	4a1d      	ldr	r2, [pc, #116]	@ (800417c <_free_r+0x90>)
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	b933      	cbnz	r3, 8004118 <_free_r+0x2c>
 800410a:	6063      	str	r3, [r4, #4]
 800410c:	6014      	str	r4, [r2, #0]
 800410e:	4628      	mov	r0, r5
 8004110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004114:	f000 b8dc 	b.w	80042d0 <__malloc_unlock>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d908      	bls.n	800412e <_free_r+0x42>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	1821      	adds	r1, r4, r0
 8004120:	428b      	cmp	r3, r1
 8004122:	bf01      	itttt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	1809      	addeq	r1, r1, r0
 800412a:	6021      	streq	r1, [r4, #0]
 800412c:	e7ed      	b.n	800410a <_free_r+0x1e>
 800412e:	461a      	mov	r2, r3
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b10b      	cbz	r3, 8004138 <_free_r+0x4c>
 8004134:	42a3      	cmp	r3, r4
 8004136:	d9fa      	bls.n	800412e <_free_r+0x42>
 8004138:	6811      	ldr	r1, [r2, #0]
 800413a:	1850      	adds	r0, r2, r1
 800413c:	42a0      	cmp	r0, r4
 800413e:	d10b      	bne.n	8004158 <_free_r+0x6c>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	4401      	add	r1, r0
 8004144:	1850      	adds	r0, r2, r1
 8004146:	4283      	cmp	r3, r0
 8004148:	6011      	str	r1, [r2, #0]
 800414a:	d1e0      	bne.n	800410e <_free_r+0x22>
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	4408      	add	r0, r1
 8004154:	6010      	str	r0, [r2, #0]
 8004156:	e7da      	b.n	800410e <_free_r+0x22>
 8004158:	d902      	bls.n	8004160 <_free_r+0x74>
 800415a:	230c      	movs	r3, #12
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	e7d6      	b.n	800410e <_free_r+0x22>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	1821      	adds	r1, r4, r0
 8004164:	428b      	cmp	r3, r1
 8004166:	bf04      	itt	eq
 8004168:	6819      	ldreq	r1, [r3, #0]
 800416a:	685b      	ldreq	r3, [r3, #4]
 800416c:	6063      	str	r3, [r4, #4]
 800416e:	bf04      	itt	eq
 8004170:	1809      	addeq	r1, r1, r0
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	6054      	str	r4, [r2, #4]
 8004176:	e7ca      	b.n	800410e <_free_r+0x22>
 8004178:	bd38      	pop	{r3, r4, r5, pc}
 800417a:	bf00      	nop
 800417c:	200002e8 	.word	0x200002e8

08004180 <sbrk_aligned>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	4e0f      	ldr	r6, [pc, #60]	@ (80041c0 <sbrk_aligned+0x40>)
 8004184:	460c      	mov	r4, r1
 8004186:	6831      	ldr	r1, [r6, #0]
 8004188:	4605      	mov	r5, r0
 800418a:	b911      	cbnz	r1, 8004192 <sbrk_aligned+0x12>
 800418c:	f000 fba4 	bl	80048d8 <_sbrk_r>
 8004190:	6030      	str	r0, [r6, #0]
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f000 fb9f 	bl	80048d8 <_sbrk_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	d103      	bne.n	80041a6 <sbrk_aligned+0x26>
 800419e:	f04f 34ff 	mov.w	r4, #4294967295
 80041a2:	4620      	mov	r0, r4
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
 80041a6:	1cc4      	adds	r4, r0, #3
 80041a8:	f024 0403 	bic.w	r4, r4, #3
 80041ac:	42a0      	cmp	r0, r4
 80041ae:	d0f8      	beq.n	80041a2 <sbrk_aligned+0x22>
 80041b0:	1a21      	subs	r1, r4, r0
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 fb90 	bl	80048d8 <_sbrk_r>
 80041b8:	3001      	adds	r0, #1
 80041ba:	d1f2      	bne.n	80041a2 <sbrk_aligned+0x22>
 80041bc:	e7ef      	b.n	800419e <sbrk_aligned+0x1e>
 80041be:	bf00      	nop
 80041c0:	200002e4 	.word	0x200002e4

080041c4 <_malloc_r>:
 80041c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c8:	1ccd      	adds	r5, r1, #3
 80041ca:	f025 0503 	bic.w	r5, r5, #3
 80041ce:	3508      	adds	r5, #8
 80041d0:	2d0c      	cmp	r5, #12
 80041d2:	bf38      	it	cc
 80041d4:	250c      	movcc	r5, #12
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	4606      	mov	r6, r0
 80041da:	db01      	blt.n	80041e0 <_malloc_r+0x1c>
 80041dc:	42a9      	cmp	r1, r5
 80041de:	d904      	bls.n	80041ea <_malloc_r+0x26>
 80041e0:	230c      	movs	r3, #12
 80041e2:	6033      	str	r3, [r6, #0]
 80041e4:	2000      	movs	r0, #0
 80041e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042c0 <_malloc_r+0xfc>
 80041ee:	f000 f869 	bl	80042c4 <__malloc_lock>
 80041f2:	f8d8 3000 	ldr.w	r3, [r8]
 80041f6:	461c      	mov	r4, r3
 80041f8:	bb44      	cbnz	r4, 800424c <_malloc_r+0x88>
 80041fa:	4629      	mov	r1, r5
 80041fc:	4630      	mov	r0, r6
 80041fe:	f7ff ffbf 	bl	8004180 <sbrk_aligned>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	4604      	mov	r4, r0
 8004206:	d158      	bne.n	80042ba <_malloc_r+0xf6>
 8004208:	f8d8 4000 	ldr.w	r4, [r8]
 800420c:	4627      	mov	r7, r4
 800420e:	2f00      	cmp	r7, #0
 8004210:	d143      	bne.n	800429a <_malloc_r+0xd6>
 8004212:	2c00      	cmp	r4, #0
 8004214:	d04b      	beq.n	80042ae <_malloc_r+0xea>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	4639      	mov	r1, r7
 800421a:	4630      	mov	r0, r6
 800421c:	eb04 0903 	add.w	r9, r4, r3
 8004220:	f000 fb5a 	bl	80048d8 <_sbrk_r>
 8004224:	4581      	cmp	r9, r0
 8004226:	d142      	bne.n	80042ae <_malloc_r+0xea>
 8004228:	6821      	ldr	r1, [r4, #0]
 800422a:	1a6d      	subs	r5, r5, r1
 800422c:	4629      	mov	r1, r5
 800422e:	4630      	mov	r0, r6
 8004230:	f7ff ffa6 	bl	8004180 <sbrk_aligned>
 8004234:	3001      	adds	r0, #1
 8004236:	d03a      	beq.n	80042ae <_malloc_r+0xea>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	442b      	add	r3, r5
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	f8d8 3000 	ldr.w	r3, [r8]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	bb62      	cbnz	r2, 80042a0 <_malloc_r+0xdc>
 8004246:	f8c8 7000 	str.w	r7, [r8]
 800424a:	e00f      	b.n	800426c <_malloc_r+0xa8>
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	1b52      	subs	r2, r2, r5
 8004250:	d420      	bmi.n	8004294 <_malloc_r+0xd0>
 8004252:	2a0b      	cmp	r2, #11
 8004254:	d917      	bls.n	8004286 <_malloc_r+0xc2>
 8004256:	1961      	adds	r1, r4, r5
 8004258:	42a3      	cmp	r3, r4
 800425a:	6025      	str	r5, [r4, #0]
 800425c:	bf18      	it	ne
 800425e:	6059      	strne	r1, [r3, #4]
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	bf08      	it	eq
 8004264:	f8c8 1000 	streq.w	r1, [r8]
 8004268:	5162      	str	r2, [r4, r5]
 800426a:	604b      	str	r3, [r1, #4]
 800426c:	4630      	mov	r0, r6
 800426e:	f000 f82f 	bl	80042d0 <__malloc_unlock>
 8004272:	f104 000b 	add.w	r0, r4, #11
 8004276:	1d23      	adds	r3, r4, #4
 8004278:	f020 0007 	bic.w	r0, r0, #7
 800427c:	1ac2      	subs	r2, r0, r3
 800427e:	bf1c      	itt	ne
 8004280:	1a1b      	subne	r3, r3, r0
 8004282:	50a3      	strne	r3, [r4, r2]
 8004284:	e7af      	b.n	80041e6 <_malloc_r+0x22>
 8004286:	6862      	ldr	r2, [r4, #4]
 8004288:	42a3      	cmp	r3, r4
 800428a:	bf0c      	ite	eq
 800428c:	f8c8 2000 	streq.w	r2, [r8]
 8004290:	605a      	strne	r2, [r3, #4]
 8004292:	e7eb      	b.n	800426c <_malloc_r+0xa8>
 8004294:	4623      	mov	r3, r4
 8004296:	6864      	ldr	r4, [r4, #4]
 8004298:	e7ae      	b.n	80041f8 <_malloc_r+0x34>
 800429a:	463c      	mov	r4, r7
 800429c:	687f      	ldr	r7, [r7, #4]
 800429e:	e7b6      	b.n	800420e <_malloc_r+0x4a>
 80042a0:	461a      	mov	r2, r3
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d1fb      	bne.n	80042a0 <_malloc_r+0xdc>
 80042a8:	2300      	movs	r3, #0
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	e7de      	b.n	800426c <_malloc_r+0xa8>
 80042ae:	230c      	movs	r3, #12
 80042b0:	6033      	str	r3, [r6, #0]
 80042b2:	4630      	mov	r0, r6
 80042b4:	f000 f80c 	bl	80042d0 <__malloc_unlock>
 80042b8:	e794      	b.n	80041e4 <_malloc_r+0x20>
 80042ba:	6005      	str	r5, [r0, #0]
 80042bc:	e7d6      	b.n	800426c <_malloc_r+0xa8>
 80042be:	bf00      	nop
 80042c0:	200002e8 	.word	0x200002e8

080042c4 <__malloc_lock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	@ (80042cc <__malloc_lock+0x8>)
 80042c6:	f7ff bf0f 	b.w	80040e8 <__retarget_lock_acquire_recursive>
 80042ca:	bf00      	nop
 80042cc:	200002e0 	.word	0x200002e0

080042d0 <__malloc_unlock>:
 80042d0:	4801      	ldr	r0, [pc, #4]	@ (80042d8 <__malloc_unlock+0x8>)
 80042d2:	f7ff bf0a 	b.w	80040ea <__retarget_lock_release_recursive>
 80042d6:	bf00      	nop
 80042d8:	200002e0 	.word	0x200002e0

080042dc <__ssputs_r>:
 80042dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	688e      	ldr	r6, [r1, #8]
 80042e2:	461f      	mov	r7, r3
 80042e4:	42be      	cmp	r6, r7
 80042e6:	680b      	ldr	r3, [r1, #0]
 80042e8:	4682      	mov	sl, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	4690      	mov	r8, r2
 80042ee:	d82d      	bhi.n	800434c <__ssputs_r+0x70>
 80042f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042f8:	d026      	beq.n	8004348 <__ssputs_r+0x6c>
 80042fa:	6965      	ldr	r5, [r4, #20]
 80042fc:	6909      	ldr	r1, [r1, #16]
 80042fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004302:	eba3 0901 	sub.w	r9, r3, r1
 8004306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800430a:	1c7b      	adds	r3, r7, #1
 800430c:	444b      	add	r3, r9
 800430e:	106d      	asrs	r5, r5, #1
 8004310:	429d      	cmp	r5, r3
 8004312:	bf38      	it	cc
 8004314:	461d      	movcc	r5, r3
 8004316:	0553      	lsls	r3, r2, #21
 8004318:	d527      	bpl.n	800436a <__ssputs_r+0x8e>
 800431a:	4629      	mov	r1, r5
 800431c:	f7ff ff52 	bl	80041c4 <_malloc_r>
 8004320:	4606      	mov	r6, r0
 8004322:	b360      	cbz	r0, 800437e <__ssputs_r+0xa2>
 8004324:	6921      	ldr	r1, [r4, #16]
 8004326:	464a      	mov	r2, r9
 8004328:	f000 fae6 	bl	80048f8 <memcpy>
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	6126      	str	r6, [r4, #16]
 800433a:	6165      	str	r5, [r4, #20]
 800433c:	444e      	add	r6, r9
 800433e:	eba5 0509 	sub.w	r5, r5, r9
 8004342:	6026      	str	r6, [r4, #0]
 8004344:	60a5      	str	r5, [r4, #8]
 8004346:	463e      	mov	r6, r7
 8004348:	42be      	cmp	r6, r7
 800434a:	d900      	bls.n	800434e <__ssputs_r+0x72>
 800434c:	463e      	mov	r6, r7
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	4632      	mov	r2, r6
 8004352:	4641      	mov	r1, r8
 8004354:	f000 faa6 	bl	80048a4 <memmove>
 8004358:	68a3      	ldr	r3, [r4, #8]
 800435a:	1b9b      	subs	r3, r3, r6
 800435c:	60a3      	str	r3, [r4, #8]
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	4433      	add	r3, r6
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	2000      	movs	r0, #0
 8004366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800436a:	462a      	mov	r2, r5
 800436c:	f000 fad2 	bl	8004914 <_realloc_r>
 8004370:	4606      	mov	r6, r0
 8004372:	2800      	cmp	r0, #0
 8004374:	d1e0      	bne.n	8004338 <__ssputs_r+0x5c>
 8004376:	6921      	ldr	r1, [r4, #16]
 8004378:	4650      	mov	r0, sl
 800437a:	f7ff feb7 	bl	80040ec <_free_r>
 800437e:	230c      	movs	r3, #12
 8004380:	f8ca 3000 	str.w	r3, [sl]
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	e7e9      	b.n	8004366 <__ssputs_r+0x8a>
	...

08004394 <_svfiprintf_r>:
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	4698      	mov	r8, r3
 800439a:	898b      	ldrh	r3, [r1, #12]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	b09d      	sub	sp, #116	@ 0x74
 80043a0:	4607      	mov	r7, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	4614      	mov	r4, r2
 80043a6:	d510      	bpl.n	80043ca <_svfiprintf_r+0x36>
 80043a8:	690b      	ldr	r3, [r1, #16]
 80043aa:	b973      	cbnz	r3, 80043ca <_svfiprintf_r+0x36>
 80043ac:	2140      	movs	r1, #64	@ 0x40
 80043ae:	f7ff ff09 	bl	80041c4 <_malloc_r>
 80043b2:	6028      	str	r0, [r5, #0]
 80043b4:	6128      	str	r0, [r5, #16]
 80043b6:	b930      	cbnz	r0, 80043c6 <_svfiprintf_r+0x32>
 80043b8:	230c      	movs	r3, #12
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	b01d      	add	sp, #116	@ 0x74
 80043c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c6:	2340      	movs	r3, #64	@ 0x40
 80043c8:	616b      	str	r3, [r5, #20]
 80043ca:	2300      	movs	r3, #0
 80043cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ce:	2320      	movs	r3, #32
 80043d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043d8:	2330      	movs	r3, #48	@ 0x30
 80043da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004578 <_svfiprintf_r+0x1e4>
 80043de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043e2:	f04f 0901 	mov.w	r9, #1
 80043e6:	4623      	mov	r3, r4
 80043e8:	469a      	mov	sl, r3
 80043ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ee:	b10a      	cbz	r2, 80043f4 <_svfiprintf_r+0x60>
 80043f0:	2a25      	cmp	r2, #37	@ 0x25
 80043f2:	d1f9      	bne.n	80043e8 <_svfiprintf_r+0x54>
 80043f4:	ebba 0b04 	subs.w	fp, sl, r4
 80043f8:	d00b      	beq.n	8004412 <_svfiprintf_r+0x7e>
 80043fa:	465b      	mov	r3, fp
 80043fc:	4622      	mov	r2, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ff6b 	bl	80042dc <__ssputs_r>
 8004406:	3001      	adds	r0, #1
 8004408:	f000 80a7 	beq.w	800455a <_svfiprintf_r+0x1c6>
 800440c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800440e:	445a      	add	r2, fp
 8004410:	9209      	str	r2, [sp, #36]	@ 0x24
 8004412:	f89a 3000 	ldrb.w	r3, [sl]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 809f 	beq.w	800455a <_svfiprintf_r+0x1c6>
 800441c:	2300      	movs	r3, #0
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004426:	f10a 0a01 	add.w	sl, sl, #1
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	9307      	str	r3, [sp, #28]
 800442e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004432:	931a      	str	r3, [sp, #104]	@ 0x68
 8004434:	4654      	mov	r4, sl
 8004436:	2205      	movs	r2, #5
 8004438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443c:	484e      	ldr	r0, [pc, #312]	@ (8004578 <_svfiprintf_r+0x1e4>)
 800443e:	f7fb fecf 	bl	80001e0 <memchr>
 8004442:	9a04      	ldr	r2, [sp, #16]
 8004444:	b9d8      	cbnz	r0, 800447e <_svfiprintf_r+0xea>
 8004446:	06d0      	lsls	r0, r2, #27
 8004448:	bf44      	itt	mi
 800444a:	2320      	movmi	r3, #32
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004450:	0711      	lsls	r1, r2, #28
 8004452:	bf44      	itt	mi
 8004454:	232b      	movmi	r3, #43	@ 0x2b
 8004456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800445a:	f89a 3000 	ldrb.w	r3, [sl]
 800445e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004460:	d015      	beq.n	800448e <_svfiprintf_r+0xfa>
 8004462:	9a07      	ldr	r2, [sp, #28]
 8004464:	4654      	mov	r4, sl
 8004466:	2000      	movs	r0, #0
 8004468:	f04f 0c0a 	mov.w	ip, #10
 800446c:	4621      	mov	r1, r4
 800446e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004472:	3b30      	subs	r3, #48	@ 0x30
 8004474:	2b09      	cmp	r3, #9
 8004476:	d94b      	bls.n	8004510 <_svfiprintf_r+0x17c>
 8004478:	b1b0      	cbz	r0, 80044a8 <_svfiprintf_r+0x114>
 800447a:	9207      	str	r2, [sp, #28]
 800447c:	e014      	b.n	80044a8 <_svfiprintf_r+0x114>
 800447e:	eba0 0308 	sub.w	r3, r0, r8
 8004482:	fa09 f303 	lsl.w	r3, r9, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	46a2      	mov	sl, r4
 800448c:	e7d2      	b.n	8004434 <_svfiprintf_r+0xa0>
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	9103      	str	r1, [sp, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfbb      	ittet	lt
 800449a:	425b      	neglt	r3, r3
 800449c:	f042 0202 	orrlt.w	r2, r2, #2
 80044a0:	9307      	strge	r3, [sp, #28]
 80044a2:	9307      	strlt	r3, [sp, #28]
 80044a4:	bfb8      	it	lt
 80044a6:	9204      	strlt	r2, [sp, #16]
 80044a8:	7823      	ldrb	r3, [r4, #0]
 80044aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80044ac:	d10a      	bne.n	80044c4 <_svfiprintf_r+0x130>
 80044ae:	7863      	ldrb	r3, [r4, #1]
 80044b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b2:	d132      	bne.n	800451a <_svfiprintf_r+0x186>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	9203      	str	r2, [sp, #12]
 80044bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044c0:	3402      	adds	r4, #2
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004588 <_svfiprintf_r+0x1f4>
 80044c8:	7821      	ldrb	r1, [r4, #0]
 80044ca:	2203      	movs	r2, #3
 80044cc:	4650      	mov	r0, sl
 80044ce:	f7fb fe87 	bl	80001e0 <memchr>
 80044d2:	b138      	cbz	r0, 80044e4 <_svfiprintf_r+0x150>
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	eba0 000a 	sub.w	r0, r0, sl
 80044da:	2240      	movs	r2, #64	@ 0x40
 80044dc:	4082      	lsls	r2, r0
 80044de:	4313      	orrs	r3, r2
 80044e0:	3401      	adds	r4, #1
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e8:	4824      	ldr	r0, [pc, #144]	@ (800457c <_svfiprintf_r+0x1e8>)
 80044ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044ee:	2206      	movs	r2, #6
 80044f0:	f7fb fe76 	bl	80001e0 <memchr>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d036      	beq.n	8004566 <_svfiprintf_r+0x1d2>
 80044f8:	4b21      	ldr	r3, [pc, #132]	@ (8004580 <_svfiprintf_r+0x1ec>)
 80044fa:	bb1b      	cbnz	r3, 8004544 <_svfiprintf_r+0x1b0>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	3307      	adds	r3, #7
 8004500:	f023 0307 	bic.w	r3, r3, #7
 8004504:	3308      	adds	r3, #8
 8004506:	9303      	str	r3, [sp, #12]
 8004508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450a:	4433      	add	r3, r6
 800450c:	9309      	str	r3, [sp, #36]	@ 0x24
 800450e:	e76a      	b.n	80043e6 <_svfiprintf_r+0x52>
 8004510:	fb0c 3202 	mla	r2, ip, r2, r3
 8004514:	460c      	mov	r4, r1
 8004516:	2001      	movs	r0, #1
 8004518:	e7a8      	b.n	800446c <_svfiprintf_r+0xd8>
 800451a:	2300      	movs	r3, #0
 800451c:	3401      	adds	r4, #1
 800451e:	9305      	str	r3, [sp, #20]
 8004520:	4619      	mov	r1, r3
 8004522:	f04f 0c0a 	mov.w	ip, #10
 8004526:	4620      	mov	r0, r4
 8004528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800452c:	3a30      	subs	r2, #48	@ 0x30
 800452e:	2a09      	cmp	r2, #9
 8004530:	d903      	bls.n	800453a <_svfiprintf_r+0x1a6>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0c6      	beq.n	80044c4 <_svfiprintf_r+0x130>
 8004536:	9105      	str	r1, [sp, #20]
 8004538:	e7c4      	b.n	80044c4 <_svfiprintf_r+0x130>
 800453a:	fb0c 2101 	mla	r1, ip, r1, r2
 800453e:	4604      	mov	r4, r0
 8004540:	2301      	movs	r3, #1
 8004542:	e7f0      	b.n	8004526 <_svfiprintf_r+0x192>
 8004544:	ab03      	add	r3, sp, #12
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	462a      	mov	r2, r5
 800454a:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <_svfiprintf_r+0x1f0>)
 800454c:	a904      	add	r1, sp, #16
 800454e:	4638      	mov	r0, r7
 8004550:	f3af 8000 	nop.w
 8004554:	1c42      	adds	r2, r0, #1
 8004556:	4606      	mov	r6, r0
 8004558:	d1d6      	bne.n	8004508 <_svfiprintf_r+0x174>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	065b      	lsls	r3, r3, #25
 800455e:	f53f af2d 	bmi.w	80043bc <_svfiprintf_r+0x28>
 8004562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004564:	e72c      	b.n	80043c0 <_svfiprintf_r+0x2c>
 8004566:	ab03      	add	r3, sp, #12
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	462a      	mov	r2, r5
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <_svfiprintf_r+0x1f0>)
 800456e:	a904      	add	r1, sp, #16
 8004570:	4638      	mov	r0, r7
 8004572:	f000 f879 	bl	8004668 <_printf_i>
 8004576:	e7ed      	b.n	8004554 <_svfiprintf_r+0x1c0>
 8004578:	080049f4 	.word	0x080049f4
 800457c:	080049fe 	.word	0x080049fe
 8004580:	00000000 	.word	0x00000000
 8004584:	080042dd 	.word	0x080042dd
 8004588:	080049fa 	.word	0x080049fa

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4616      	mov	r6, r2
 8004592:	4698      	mov	r8, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800459c:	4293      	cmp	r3, r2
 800459e:	bfb8      	it	lt
 80045a0:	4613      	movlt	r3, r2
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045a8:	4607      	mov	r7, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	b10a      	cbz	r2, 80045b2 <_printf_common+0x26>
 80045ae:	3301      	adds	r3, #1
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	0699      	lsls	r1, r3, #26
 80045b6:	bf42      	ittt	mi
 80045b8:	6833      	ldrmi	r3, [r6, #0]
 80045ba:	3302      	addmi	r3, #2
 80045bc:	6033      	strmi	r3, [r6, #0]
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	f015 0506 	ands.w	r5, r5, #6
 80045c4:	d106      	bne.n	80045d4 <_printf_common+0x48>
 80045c6:	f104 0a19 	add.w	sl, r4, #25
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	6832      	ldr	r2, [r6, #0]
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dc26      	bgt.n	8004622 <_printf_common+0x96>
 80045d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	3b00      	subs	r3, #0
 80045dc:	bf18      	it	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	0692      	lsls	r2, r2, #26
 80045e2:	d42b      	bmi.n	800463c <_printf_common+0xb0>
 80045e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045e8:	4641      	mov	r1, r8
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c8      	blx	r9
 80045ee:	3001      	adds	r0, #1
 80045f0:	d01e      	beq.n	8004630 <_printf_common+0xa4>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf02      	ittt	eq
 80045fe:	68e5      	ldreq	r5, [r4, #12]
 8004600:	6833      	ldreq	r3, [r6, #0]
 8004602:	1aed      	subeq	r5, r5, r3
 8004604:	68a3      	ldr	r3, [r4, #8]
 8004606:	bf0c      	ite	eq
 8004608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800460c:	2500      	movne	r5, #0
 800460e:	4293      	cmp	r3, r2
 8004610:	bfc4      	itt	gt
 8004612:	1a9b      	subgt	r3, r3, r2
 8004614:	18ed      	addgt	r5, r5, r3
 8004616:	2600      	movs	r6, #0
 8004618:	341a      	adds	r4, #26
 800461a:	42b5      	cmp	r5, r6
 800461c:	d11a      	bne.n	8004654 <_printf_common+0xc8>
 800461e:	2000      	movs	r0, #0
 8004620:	e008      	b.n	8004634 <_printf_common+0xa8>
 8004622:	2301      	movs	r3, #1
 8004624:	4652      	mov	r2, sl
 8004626:	4641      	mov	r1, r8
 8004628:	4638      	mov	r0, r7
 800462a:	47c8      	blx	r9
 800462c:	3001      	adds	r0, #1
 800462e:	d103      	bne.n	8004638 <_printf_common+0xac>
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004638:	3501      	adds	r5, #1
 800463a:	e7c6      	b.n	80045ca <_printf_common+0x3e>
 800463c:	18e1      	adds	r1, r4, r3
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	2030      	movs	r0, #48	@ 0x30
 8004642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004646:	4422      	add	r2, r4
 8004648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800464c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004650:	3302      	adds	r3, #2
 8004652:	e7c7      	b.n	80045e4 <_printf_common+0x58>
 8004654:	2301      	movs	r3, #1
 8004656:	4622      	mov	r2, r4
 8004658:	4641      	mov	r1, r8
 800465a:	4638      	mov	r0, r7
 800465c:	47c8      	blx	r9
 800465e:	3001      	adds	r0, #1
 8004660:	d0e6      	beq.n	8004630 <_printf_common+0xa4>
 8004662:	3601      	adds	r6, #1
 8004664:	e7d9      	b.n	800461a <_printf_common+0x8e>
	...

08004668 <_printf_i>:
 8004668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	7e0f      	ldrb	r7, [r1, #24]
 800466e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004670:	2f78      	cmp	r7, #120	@ 0x78
 8004672:	4691      	mov	r9, r2
 8004674:	4680      	mov	r8, r0
 8004676:	460c      	mov	r4, r1
 8004678:	469a      	mov	sl, r3
 800467a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800467e:	d807      	bhi.n	8004690 <_printf_i+0x28>
 8004680:	2f62      	cmp	r7, #98	@ 0x62
 8004682:	d80a      	bhi.n	800469a <_printf_i+0x32>
 8004684:	2f00      	cmp	r7, #0
 8004686:	f000 80d1 	beq.w	800482c <_printf_i+0x1c4>
 800468a:	2f58      	cmp	r7, #88	@ 0x58
 800468c:	f000 80b8 	beq.w	8004800 <_printf_i+0x198>
 8004690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004698:	e03a      	b.n	8004710 <_printf_i+0xa8>
 800469a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800469e:	2b15      	cmp	r3, #21
 80046a0:	d8f6      	bhi.n	8004690 <_printf_i+0x28>
 80046a2:	a101      	add	r1, pc, #4	@ (adr r1, 80046a8 <_printf_i+0x40>)
 80046a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a8:	08004701 	.word	0x08004701
 80046ac:	08004715 	.word	0x08004715
 80046b0:	08004691 	.word	0x08004691
 80046b4:	08004691 	.word	0x08004691
 80046b8:	08004691 	.word	0x08004691
 80046bc:	08004691 	.word	0x08004691
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004691 	.word	0x08004691
 80046c8:	08004691 	.word	0x08004691
 80046cc:	08004691 	.word	0x08004691
 80046d0:	08004691 	.word	0x08004691
 80046d4:	08004813 	.word	0x08004813
 80046d8:	0800473f 	.word	0x0800473f
 80046dc:	080047cd 	.word	0x080047cd
 80046e0:	08004691 	.word	0x08004691
 80046e4:	08004691 	.word	0x08004691
 80046e8:	08004835 	.word	0x08004835
 80046ec:	08004691 	.word	0x08004691
 80046f0:	0800473f 	.word	0x0800473f
 80046f4:	08004691 	.word	0x08004691
 80046f8:	08004691 	.word	0x08004691
 80046fc:	080047d5 	.word	0x080047d5
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	1d1a      	adds	r2, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6032      	str	r2, [r6, #0]
 8004708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800470c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004710:	2301      	movs	r3, #1
 8004712:	e09c      	b.n	800484e <_printf_i+0x1e6>
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	1d19      	adds	r1, r3, #4
 800471a:	6031      	str	r1, [r6, #0]
 800471c:	0606      	lsls	r6, r0, #24
 800471e:	d501      	bpl.n	8004724 <_printf_i+0xbc>
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	e003      	b.n	800472c <_printf_i+0xc4>
 8004724:	0645      	lsls	r5, r0, #25
 8004726:	d5fb      	bpl.n	8004720 <_printf_i+0xb8>
 8004728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800472c:	2d00      	cmp	r5, #0
 800472e:	da03      	bge.n	8004738 <_printf_i+0xd0>
 8004730:	232d      	movs	r3, #45	@ 0x2d
 8004732:	426d      	negs	r5, r5
 8004734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004738:	4858      	ldr	r0, [pc, #352]	@ (800489c <_printf_i+0x234>)
 800473a:	230a      	movs	r3, #10
 800473c:	e011      	b.n	8004762 <_printf_i+0xfa>
 800473e:	6821      	ldr	r1, [r4, #0]
 8004740:	6833      	ldr	r3, [r6, #0]
 8004742:	0608      	lsls	r0, r1, #24
 8004744:	f853 5b04 	ldr.w	r5, [r3], #4
 8004748:	d402      	bmi.n	8004750 <_printf_i+0xe8>
 800474a:	0649      	lsls	r1, r1, #25
 800474c:	bf48      	it	mi
 800474e:	b2ad      	uxthmi	r5, r5
 8004750:	2f6f      	cmp	r7, #111	@ 0x6f
 8004752:	4852      	ldr	r0, [pc, #328]	@ (800489c <_printf_i+0x234>)
 8004754:	6033      	str	r3, [r6, #0]
 8004756:	bf14      	ite	ne
 8004758:	230a      	movne	r3, #10
 800475a:	2308      	moveq	r3, #8
 800475c:	2100      	movs	r1, #0
 800475e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004762:	6866      	ldr	r6, [r4, #4]
 8004764:	60a6      	str	r6, [r4, #8]
 8004766:	2e00      	cmp	r6, #0
 8004768:	db05      	blt.n	8004776 <_printf_i+0x10e>
 800476a:	6821      	ldr	r1, [r4, #0]
 800476c:	432e      	orrs	r6, r5
 800476e:	f021 0104 	bic.w	r1, r1, #4
 8004772:	6021      	str	r1, [r4, #0]
 8004774:	d04b      	beq.n	800480e <_printf_i+0x1a6>
 8004776:	4616      	mov	r6, r2
 8004778:	fbb5 f1f3 	udiv	r1, r5, r3
 800477c:	fb03 5711 	mls	r7, r3, r1, r5
 8004780:	5dc7      	ldrb	r7, [r0, r7]
 8004782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004786:	462f      	mov	r7, r5
 8004788:	42bb      	cmp	r3, r7
 800478a:	460d      	mov	r5, r1
 800478c:	d9f4      	bls.n	8004778 <_printf_i+0x110>
 800478e:	2b08      	cmp	r3, #8
 8004790:	d10b      	bne.n	80047aa <_printf_i+0x142>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	07df      	lsls	r7, r3, #31
 8004796:	d508      	bpl.n	80047aa <_printf_i+0x142>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6861      	ldr	r1, [r4, #4]
 800479c:	4299      	cmp	r1, r3
 800479e:	bfde      	ittt	le
 80047a0:	2330      	movle	r3, #48	@ 0x30
 80047a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047aa:	1b92      	subs	r2, r2, r6
 80047ac:	6122      	str	r2, [r4, #16]
 80047ae:	f8cd a000 	str.w	sl, [sp]
 80047b2:	464b      	mov	r3, r9
 80047b4:	aa03      	add	r2, sp, #12
 80047b6:	4621      	mov	r1, r4
 80047b8:	4640      	mov	r0, r8
 80047ba:	f7ff fee7 	bl	800458c <_printf_common>
 80047be:	3001      	adds	r0, #1
 80047c0:	d14a      	bne.n	8004858 <_printf_i+0x1f0>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	b004      	add	sp, #16
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	f043 0320 	orr.w	r3, r3, #32
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	4832      	ldr	r0, [pc, #200]	@ (80048a0 <_printf_i+0x238>)
 80047d6:	2778      	movs	r7, #120	@ 0x78
 80047d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	6831      	ldr	r1, [r6, #0]
 80047e0:	061f      	lsls	r7, r3, #24
 80047e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80047e6:	d402      	bmi.n	80047ee <_printf_i+0x186>
 80047e8:	065f      	lsls	r7, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2ad      	uxthmi	r5, r5
 80047ee:	6031      	str	r1, [r6, #0]
 80047f0:	07d9      	lsls	r1, r3, #31
 80047f2:	bf44      	itt	mi
 80047f4:	f043 0320 	orrmi.w	r3, r3, #32
 80047f8:	6023      	strmi	r3, [r4, #0]
 80047fa:	b11d      	cbz	r5, 8004804 <_printf_i+0x19c>
 80047fc:	2310      	movs	r3, #16
 80047fe:	e7ad      	b.n	800475c <_printf_i+0xf4>
 8004800:	4826      	ldr	r0, [pc, #152]	@ (800489c <_printf_i+0x234>)
 8004802:	e7e9      	b.n	80047d8 <_printf_i+0x170>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	f023 0320 	bic.w	r3, r3, #32
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	e7f6      	b.n	80047fc <_printf_i+0x194>
 800480e:	4616      	mov	r6, r2
 8004810:	e7bd      	b.n	800478e <_printf_i+0x126>
 8004812:	6833      	ldr	r3, [r6, #0]
 8004814:	6825      	ldr	r5, [r4, #0]
 8004816:	6961      	ldr	r1, [r4, #20]
 8004818:	1d18      	adds	r0, r3, #4
 800481a:	6030      	str	r0, [r6, #0]
 800481c:	062e      	lsls	r6, r5, #24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	d501      	bpl.n	8004826 <_printf_i+0x1be>
 8004822:	6019      	str	r1, [r3, #0]
 8004824:	e002      	b.n	800482c <_printf_i+0x1c4>
 8004826:	0668      	lsls	r0, r5, #25
 8004828:	d5fb      	bpl.n	8004822 <_printf_i+0x1ba>
 800482a:	8019      	strh	r1, [r3, #0]
 800482c:	2300      	movs	r3, #0
 800482e:	6123      	str	r3, [r4, #16]
 8004830:	4616      	mov	r6, r2
 8004832:	e7bc      	b.n	80047ae <_printf_i+0x146>
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	6032      	str	r2, [r6, #0]
 800483a:	681e      	ldr	r6, [r3, #0]
 800483c:	6862      	ldr	r2, [r4, #4]
 800483e:	2100      	movs	r1, #0
 8004840:	4630      	mov	r0, r6
 8004842:	f7fb fccd 	bl	80001e0 <memchr>
 8004846:	b108      	cbz	r0, 800484c <_printf_i+0x1e4>
 8004848:	1b80      	subs	r0, r0, r6
 800484a:	6060      	str	r0, [r4, #4]
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	2300      	movs	r3, #0
 8004852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004856:	e7aa      	b.n	80047ae <_printf_i+0x146>
 8004858:	6923      	ldr	r3, [r4, #16]
 800485a:	4632      	mov	r2, r6
 800485c:	4649      	mov	r1, r9
 800485e:	4640      	mov	r0, r8
 8004860:	47d0      	blx	sl
 8004862:	3001      	adds	r0, #1
 8004864:	d0ad      	beq.n	80047c2 <_printf_i+0x15a>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	079b      	lsls	r3, r3, #30
 800486a:	d413      	bmi.n	8004894 <_printf_i+0x22c>
 800486c:	68e0      	ldr	r0, [r4, #12]
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	4298      	cmp	r0, r3
 8004872:	bfb8      	it	lt
 8004874:	4618      	movlt	r0, r3
 8004876:	e7a6      	b.n	80047c6 <_printf_i+0x15e>
 8004878:	2301      	movs	r3, #1
 800487a:	4632      	mov	r2, r6
 800487c:	4649      	mov	r1, r9
 800487e:	4640      	mov	r0, r8
 8004880:	47d0      	blx	sl
 8004882:	3001      	adds	r0, #1
 8004884:	d09d      	beq.n	80047c2 <_printf_i+0x15a>
 8004886:	3501      	adds	r5, #1
 8004888:	68e3      	ldr	r3, [r4, #12]
 800488a:	9903      	ldr	r1, [sp, #12]
 800488c:	1a5b      	subs	r3, r3, r1
 800488e:	42ab      	cmp	r3, r5
 8004890:	dcf2      	bgt.n	8004878 <_printf_i+0x210>
 8004892:	e7eb      	b.n	800486c <_printf_i+0x204>
 8004894:	2500      	movs	r5, #0
 8004896:	f104 0619 	add.w	r6, r4, #25
 800489a:	e7f5      	b.n	8004888 <_printf_i+0x220>
 800489c:	08004a05 	.word	0x08004a05
 80048a0:	08004a16 	.word	0x08004a16

080048a4 <memmove>:
 80048a4:	4288      	cmp	r0, r1
 80048a6:	b510      	push	{r4, lr}
 80048a8:	eb01 0402 	add.w	r4, r1, r2
 80048ac:	d902      	bls.n	80048b4 <memmove+0x10>
 80048ae:	4284      	cmp	r4, r0
 80048b0:	4623      	mov	r3, r4
 80048b2:	d807      	bhi.n	80048c4 <memmove+0x20>
 80048b4:	1e43      	subs	r3, r0, #1
 80048b6:	42a1      	cmp	r1, r4
 80048b8:	d008      	beq.n	80048cc <memmove+0x28>
 80048ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c2:	e7f8      	b.n	80048b6 <memmove+0x12>
 80048c4:	4402      	add	r2, r0
 80048c6:	4601      	mov	r1, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d100      	bne.n	80048ce <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d6:	e7f7      	b.n	80048c8 <memmove+0x24>

080048d8 <_sbrk_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d06      	ldr	r5, [pc, #24]	@ (80048f4 <_sbrk_r+0x1c>)
 80048dc:	2300      	movs	r3, #0
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	f7fc f904 	bl	8000af0 <_sbrk>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_sbrk_r+0x1a>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_sbrk_r+0x1a>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	200002dc 	.word	0x200002dc

080048f8 <memcpy>:
 80048f8:	440a      	add	r2, r1
 80048fa:	4291      	cmp	r1, r2
 80048fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004900:	d100      	bne.n	8004904 <memcpy+0xc>
 8004902:	4770      	bx	lr
 8004904:	b510      	push	{r4, lr}
 8004906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800490a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800490e:	4291      	cmp	r1, r2
 8004910:	d1f9      	bne.n	8004906 <memcpy+0xe>
 8004912:	bd10      	pop	{r4, pc}

08004914 <_realloc_r>:
 8004914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004918:	4607      	mov	r7, r0
 800491a:	4614      	mov	r4, r2
 800491c:	460d      	mov	r5, r1
 800491e:	b921      	cbnz	r1, 800492a <_realloc_r+0x16>
 8004920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	4611      	mov	r1, r2
 8004926:	f7ff bc4d 	b.w	80041c4 <_malloc_r>
 800492a:	b92a      	cbnz	r2, 8004938 <_realloc_r+0x24>
 800492c:	f7ff fbde 	bl	80040ec <_free_r>
 8004930:	4625      	mov	r5, r4
 8004932:	4628      	mov	r0, r5
 8004934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004938:	f000 f81a 	bl	8004970 <_malloc_usable_size_r>
 800493c:	4284      	cmp	r4, r0
 800493e:	4606      	mov	r6, r0
 8004940:	d802      	bhi.n	8004948 <_realloc_r+0x34>
 8004942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004946:	d8f4      	bhi.n	8004932 <_realloc_r+0x1e>
 8004948:	4621      	mov	r1, r4
 800494a:	4638      	mov	r0, r7
 800494c:	f7ff fc3a 	bl	80041c4 <_malloc_r>
 8004950:	4680      	mov	r8, r0
 8004952:	b908      	cbnz	r0, 8004958 <_realloc_r+0x44>
 8004954:	4645      	mov	r5, r8
 8004956:	e7ec      	b.n	8004932 <_realloc_r+0x1e>
 8004958:	42b4      	cmp	r4, r6
 800495a:	4622      	mov	r2, r4
 800495c:	4629      	mov	r1, r5
 800495e:	bf28      	it	cs
 8004960:	4632      	movcs	r2, r6
 8004962:	f7ff ffc9 	bl	80048f8 <memcpy>
 8004966:	4629      	mov	r1, r5
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff fbbf 	bl	80040ec <_free_r>
 800496e:	e7f1      	b.n	8004954 <_realloc_r+0x40>

08004970 <_malloc_usable_size_r>:
 8004970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004974:	1f18      	subs	r0, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfbc      	itt	lt
 800497a:	580b      	ldrlt	r3, [r1, r0]
 800497c:	18c0      	addlt	r0, r0, r3
 800497e:	4770      	bx	lr

08004980 <_init>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr

0800498c <_fini>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr
