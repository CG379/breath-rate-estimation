
wk10_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08004924  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004924  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f58a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc6  00000000  00000000  00015616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000175e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8c  00000000  00000000  000184a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e05  00000000  00000000  00019034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010924  00000000  00000000  00039e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca16f  00000000  00000000  0004a75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001148cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000456c  00000000  00000000  00114910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  00118e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004810 	.word	0x08004810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004810 	.word	0x08004810

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b988 	b.w	8000f44 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	468e      	mov	lr, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	4688      	mov	r8, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14a      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d962      	bls.n	8000d28 <__udivmoddi4+0xdc>
 8000c62:	fab2 f682 	clz	r6, r2
 8000c66:	b14e      	cbz	r6, 8000c7c <__udivmoddi4+0x30>
 8000c68:	f1c6 0320 	rsb	r3, r6, #32
 8000c6c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	40b7      	lsls	r7, r6
 8000c76:	ea43 0808 	orr.w	r8, r3, r8
 8000c7a:	40b4      	lsls	r4, r6
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f fc87 	uxth.w	ip, r7
 8000c84:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c88:	0c23      	lsrs	r3, r4, #16
 8000c8a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c92:	fb01 f20c 	mul.w	r2, r1, ip
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0x62>
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ca0:	f080 80ea 	bcs.w	8000e78 <__udivmoddi4+0x22c>
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f240 80e7 	bls.w	8000e78 <__udivmoddi4+0x22c>
 8000caa:	3902      	subs	r1, #2
 8000cac:	443b      	add	r3, r7
 8000cae:	1a9a      	subs	r2, r3, r2
 8000cb0:	b2a3      	uxth	r3, r4
 8000cb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc2:	459c      	cmp	ip, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x8e>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ccc:	f080 80d6 	bcs.w	8000e7c <__udivmoddi4+0x230>
 8000cd0:	459c      	cmp	ip, r3
 8000cd2:	f240 80d3 	bls.w	8000e7c <__udivmoddi4+0x230>
 8000cd6:	443b      	add	r3, r7
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cde:	eba3 030c 	sub.w	r3, r3, ip
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa2>
 8000ce6:	40f3      	lsrs	r3, r6
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xb6>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb0>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x14c>
 8000d0a:	4573      	cmp	r3, lr
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xc8>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 8105 	bhi.w	8000f1e <__udivmoddi4+0x2d2>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0e5      	beq.n	8000cee <__udivmoddi4+0xa2>
 8000d22:	e9c5 4800 	strd	r4, r8, [r5]
 8000d26:	e7e2      	b.n	8000cee <__udivmoddi4+0xa2>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f000 8090 	beq.w	8000e4e <__udivmoddi4+0x202>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f040 80a4 	bne.w	8000e80 <__udivmoddi4+0x234>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	b280      	uxth	r0, r0
 8000d42:	b2bc      	uxth	r4, r7
 8000d44:	2101      	movs	r1, #1
 8000d46:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d4a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d52:	fb04 f20c 	mul.w	r2, r4, ip
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x11e>
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d60:	d202      	bcs.n	8000d68 <__udivmoddi4+0x11c>
 8000d62:	429a      	cmp	r2, r3
 8000d64:	f200 80e0 	bhi.w	8000f28 <__udivmoddi4+0x2dc>
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d70:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d74:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d78:	fb02 f404 	mul.w	r4, r2, r4
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x144>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x142>
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	f200 80ca 	bhi.w	8000f22 <__udivmoddi4+0x2d6>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x98>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa0e f401 	lsl.w	r4, lr, r1
 8000da8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dac:	fa2e fe06 	lsr.w	lr, lr, r6
 8000db0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db4:	4323      	orrs	r3, r4
 8000db6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dba:	fa1f fc87 	uxth.w	ip, r7
 8000dbe:	fbbe f0f9 	udiv	r0, lr, r9
 8000dc2:	0c1c      	lsrs	r4, r3, #16
 8000dc4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dcc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d909      	bls.n	8000dec <__udivmoddi4+0x1a0>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dde:	f080 809c 	bcs.w	8000f1a <__udivmoddi4+0x2ce>
 8000de2:	45a6      	cmp	lr, r4
 8000de4:	f240 8099 	bls.w	8000f1a <__udivmoddi4+0x2ce>
 8000de8:	3802      	subs	r0, #2
 8000dea:	443c      	add	r4, r7
 8000dec:	eba4 040e 	sub.w	r4, r4, lr
 8000df0:	fa1f fe83 	uxth.w	lr, r3
 8000df4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dfc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e00:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1ce>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0e:	f080 8082 	bcs.w	8000f16 <__udivmoddi4+0x2ca>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d97f      	bls.n	8000f16 <__udivmoddi4+0x2ca>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1e:	eba4 040c 	sub.w	r4, r4, ip
 8000e22:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e26:	4564      	cmp	r4, ip
 8000e28:	4673      	mov	r3, lr
 8000e2a:	46e1      	mov	r9, ip
 8000e2c:	d362      	bcc.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e2e:	d05f      	beq.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x1fe>
 8000e32:	ebb8 0203 	subs.w	r2, r8, r3
 8000e36:	eb64 0409 	sbc.w	r4, r4, r9
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e42:	431e      	orrs	r6, r3
 8000e44:	40cc      	lsrs	r4, r1
 8000e46:	e9c5 6400 	strd	r6, r4, [r5]
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	e74f      	b.n	8000cee <__udivmoddi4+0xa2>
 8000e4e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e52:	0c01      	lsrs	r1, r0, #16
 8000e54:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4638      	mov	r0, r7
 8000e62:	463c      	mov	r4, r7
 8000e64:	46b8      	mov	r8, r7
 8000e66:	46be      	mov	lr, r7
 8000e68:	2620      	movs	r6, #32
 8000e6a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6e:	eba2 0208 	sub.w	r2, r2, r8
 8000e72:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e76:	e766      	b.n	8000d46 <__udivmoddi4+0xfa>
 8000e78:	4601      	mov	r1, r0
 8000e7a:	e718      	b.n	8000cae <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e72c      	b.n	8000cda <__udivmoddi4+0x8e>
 8000e80:	f1c6 0220 	rsb	r2, r6, #32
 8000e84:	fa2e f302 	lsr.w	r3, lr, r2
 8000e88:	40b7      	lsls	r7, r6
 8000e8a:	40b1      	lsls	r1, r6
 8000e8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e94:	430a      	orrs	r2, r1
 8000e96:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e9a:	b2bc      	uxth	r4, r7
 8000e9c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ea0:	0c11      	lsrs	r1, r2, #16
 8000ea2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea6:	fb08 f904 	mul.w	r9, r8, r4
 8000eaa:	40b0      	lsls	r0, r6
 8000eac:	4589      	cmp	r9, r1
 8000eae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eb2:	b280      	uxth	r0, r0
 8000eb4:	d93e      	bls.n	8000f34 <__udivmoddi4+0x2e8>
 8000eb6:	1879      	adds	r1, r7, r1
 8000eb8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ebc:	d201      	bcs.n	8000ec2 <__udivmoddi4+0x276>
 8000ebe:	4589      	cmp	r9, r1
 8000ec0:	d81f      	bhi.n	8000f02 <__udivmoddi4+0x2b6>
 8000ec2:	eba1 0109 	sub.w	r1, r1, r9
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed8:	4542      	cmp	r2, r8
 8000eda:	d229      	bcs.n	8000f30 <__udivmoddi4+0x2e4>
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ee2:	d2c4      	bcs.n	8000e6e <__udivmoddi4+0x222>
 8000ee4:	4542      	cmp	r2, r8
 8000ee6:	d2c2      	bcs.n	8000e6e <__udivmoddi4+0x222>
 8000ee8:	f1a9 0102 	sub.w	r1, r9, #2
 8000eec:	443a      	add	r2, r7
 8000eee:	e7be      	b.n	8000e6e <__udivmoddi4+0x222>
 8000ef0:	45f0      	cmp	r8, lr
 8000ef2:	d29d      	bcs.n	8000e30 <__udivmoddi4+0x1e4>
 8000ef4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000efc:	3801      	subs	r0, #1
 8000efe:	46e1      	mov	r9, ip
 8000f00:	e796      	b.n	8000e30 <__udivmoddi4+0x1e4>
 8000f02:	eba7 0909 	sub.w	r9, r7, r9
 8000f06:	4449      	add	r1, r9
 8000f08:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f0c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f10:	fb09 f804 	mul.w	r8, r9, r4
 8000f14:	e7db      	b.n	8000ece <__udivmoddi4+0x282>
 8000f16:	4673      	mov	r3, lr
 8000f18:	e77f      	b.n	8000e1a <__udivmoddi4+0x1ce>
 8000f1a:	4650      	mov	r0, sl
 8000f1c:	e766      	b.n	8000dec <__udivmoddi4+0x1a0>
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e6fd      	b.n	8000d1e <__udivmoddi4+0xd2>
 8000f22:	443b      	add	r3, r7
 8000f24:	3a02      	subs	r2, #2
 8000f26:	e733      	b.n	8000d90 <__udivmoddi4+0x144>
 8000f28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f2c:	443b      	add	r3, r7
 8000f2e:	e71c      	b.n	8000d6a <__udivmoddi4+0x11e>
 8000f30:	4649      	mov	r1, r9
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x222>
 8000f34:	eba1 0109 	sub.w	r1, r1, r9
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3e:	fb09 f804 	mul.w	r8, r9, r4
 8000f42:	e7c4      	b.n	8000ece <__udivmoddi4+0x282>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t us)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim16, 0); // Reset timer
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <delay_us+0x2c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim16) < us); // Wait for the specified time
 8000f58:	bf00      	nop
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <delay_us+0x2c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d8f9      	bhi.n	8000f5a <delay_us+0x12>
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <measure_distance>:

float measure_distance()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	uint32_t start_time, end_time;
	float distance;

	// Send a 10us pulse
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f000 feab 	bl	8001ce0 <HAL_GPIO_WritePin>
	delay_us(2); // Ensure pin is low initially
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff ffdc 	bl	8000f48 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2108      	movs	r1, #8
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f000 fea2 	bl	8001ce0 <HAL_GPIO_WritePin>
	delay_us(10); // 10us pulse
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f7ff ffd3 	bl	8000f48 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f000 fe99 	bl	8001ce0 <HAL_GPIO_WritePin>

	// Wait for Echo Pin to go high
	while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 8000fae:	bf00      	nop
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f000 fe7b 	bl	8001cb0 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f7      	beq.n	8000fb0 <measure_distance+0x38>

	// Measure high time
	start_time = __HAL_TIM_GET_COUNTER(&htim16);
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <measure_distance+0xc8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	60fb      	str	r3, [r7, #12]
	while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8000fc8:	bf00      	nop
 8000fca:	2110      	movs	r1, #16
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd0:	f000 fe6e 	bl	8001cb0 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d0f7      	beq.n	8000fca <measure_distance+0x52>
	end_time = __HAL_TIM_GET_COUNTER(&htim16);
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <measure_distance+0xc8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe0:	60bb      	str	r3, [r7, #8]

	// Calculate distance (time in microseconds, speed in m/s)
	distance = ((end_time - start_time) * SPEED_OF_SOUND) / (2 * 1000000.0);
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa8b 	bl	8000504 <__aeabi_ui2d>
 8000fee:	a310      	add	r3, pc, #64	@ (adr r3, 8001030 <measure_distance+0xb8>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb00 	bl	80005f8 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a30d      	add	r3, pc, #52	@ (adr r3, 8001038 <measure_distance+0xc0>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fc21 	bl	800084c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdb3 	bl	8000b7c <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	607b      	str	r3, [r7, #4]

	return distance;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	ee07 3a90 	vmov	s15, r3
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	00000000 	.word	0x00000000
 8001034:	40757000 	.word	0x40757000
 8001038:	00000000 	.word	0x00000000
 800103c:	413e8480 	.word	0x413e8480
 8001040:	200000c4 	.word	0x200000c4

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 fb1c 	bl	8001686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f847 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f000 f933 	bl	80012bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001056:	f000 f901 	bl	800125c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800105a:	f000 f8a3 	bl	80011a4 <MX_TIM6_Init>
  MX_TIM16_Init();
 800105e:	f000 f8d7 	bl	8001210 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8001062:	481b      	ldr	r0, [pc, #108]	@ (80010d0 <main+0x8c>)
 8001064:	f002 f874 	bl	8003150 <HAL_TIM_Base_Start>

  char msg[50];
  uint32_t distance = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  distance = (int)ceil(measure_distance()*100);
 800106c:	f7ff ff84 	bl	8000f78 <measure_distance>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80010d4 <main+0x90>
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	ec43 2b10 	vmov	d0, r2, r3
 800108c:	f003 fb44 	bl	8004718 <ceil>
 8001090:	ec53 2b10 	vmov	r2, r3, d0
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd48 	bl	8000b2c <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
	  sprintf(msg, "Distance: %lu cm\r\n", distance); // Convert to cm
 80010a0:	463b      	mov	r3, r7
 80010a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <main+0x94>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fe94 	bl	8003dd4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f88e 	bl	80001d0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4639      	mov	r1, r7
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <main+0x98>)
 80010c0:	f002 f9b6 	bl	8003430 <HAL_UART_Transmit>
	  HAL_Delay(100); // Wait before next measurement
 80010c4:	2064      	movs	r0, #100	@ 0x64
 80010c6:	f000 fb53 	bl	8001770 <HAL_Delay>
	  distance = (int)ceil(measure_distance()*100);
 80010ca:	bf00      	nop
 80010cc:	e7ce      	b.n	800106c <main+0x28>
 80010ce:	bf00      	nop
 80010d0:	200000c4 	.word	0x200000c4
 80010d4:	42c80000 	.word	0x42c80000
 80010d8:	08004828 	.word	0x08004828
 80010dc:	20000110 	.word	0x20000110

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	@ 0x58
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2244      	movs	r2, #68	@ 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fe92 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001106:	f000 fe45 	bl	8001d94 <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001110:	f000 f94a 	bl	80013a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001114:	f000 fe20 	bl	8001d58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <SystemClock_Config+0xc0>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a20      	ldr	r2, [pc, #128]	@ (80011a0 <SystemClock_Config+0xc0>)
 8001120:	f023 0318 	bic.w	r3, r3, #24
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001128:	2314      	movs	r3, #20
 800112a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001138:	2360      	movs	r3, #96	@ 0x60
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001140:	2301      	movs	r3, #1
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001148:	2310      	movs	r3, #16
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114c:	2307      	movs	r3, #7
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001154:	2302      	movs	r3, #2
 8001156:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fe6f 	bl	8001e40 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001168:	f000 f91e 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2303      	movs	r3, #3
 8001172:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fa6f 	bl	8002668 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001190:	f000 f90a 	bl	80013a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001194:	f001 fe82 	bl	8002e9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001198:	bf00      	nop
 800119a:	3758      	adds	r7, #88	@ 0x58
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	@ (800120c <MX_TIM6_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011bc:	221f      	movs	r2, #31
 80011be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011d6:	f001 ff63 	bl	80030a0 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011e0:	f000 f8e2 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011f2:	f002 f869 	bl	80032c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f8d4 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000078 	.word	0x20000078
 800120c:	40001000 	.word	0x40001000

08001210 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001216:	4a10      	ldr	r2, [pc, #64]	@ (8001258 <MX_TIM16_Init+0x48>)
 8001218:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32-1;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_TIM16_Init+0x44>)
 800121c:	221f      	movs	r2, #31
 800121e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_TIM16_Init+0x44>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_TIM16_Init+0x44>)
 8001242:	f001 ff2d 	bl	80030a0 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800124c:	f000 f8ac 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000c4 	.word	0x200000c4
 8001258:	40014400 	.word	0x40014400

0800125c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001262:	4a15      	ldr	r2, [pc, #84]	@ (80012b8 <MX_USART2_UART_Init+0x5c>)
 8001264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_USART2_UART_Init+0x58>)
 80012a0:	f002 f878 	bl	8003394 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 f87d 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000110 	.word	0x20000110
 80012b8:	40004400 	.word	0x40004400

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a2c      	ldr	r2, [pc, #176]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <MX_GPIO_Init+0xe4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2108      	movs	r1, #8
 800131e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001322:	f000 fcdd 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2108      	movs	r1, #8
 800132a:	481e      	ldr	r0, [pc, #120]	@ (80013a4 <MX_GPIO_Init+0xe8>)
 800132c:	f000 fcd8 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001330:	2308      	movs	r3, #8
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134a:	f000 fb47 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800134e:	2310      	movs	r3, #16
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f000 fb39 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800136a:	2308      	movs	r3, #8
 800136c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <MX_GPIO_Init+0xe8>)
 8001382:	f000 fb2b 	bl	80019dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	200a      	movs	r0, #10
 800138c:	f000 faef 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001390:	200a      	movs	r0, #10
 8001392:	f000 fb08 	bl	80019a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	48000400 	.word	0x48000400

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <Error_Handler+0x8>

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_MspInit+0x44>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_MspInit+0x44>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <HAL_TIM_Base_MspInit+0x5c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10c      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001426:	e010      	b.n	800144a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <HAL_TIM_Base_MspInit+0x64>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	4a09      	ldr	r2, [pc, #36]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	6613      	str	r3, [r2, #96]	@ 0x60
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_TIM_Base_MspInit+0x60>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40001000 	.word	0x40001000
 800145c:	40021000 	.word	0x40021000
 8001460:	40014400 	.word	0x40014400

08001464 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09e      	sub	sp, #120	@ 0x78
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2254      	movs	r2, #84	@ 0x54
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fcc7 	bl	8003e18 <memset>
  if(huart->Instance==USART2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <HAL_UART_MspInit+0xcc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d148      	bne.n	8001526 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fb05 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014ac:	f7ff ff7c 	bl	80013a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014cc:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_UART_MspInit+0xd0>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014e0:	2304      	movs	r3, #4
 80014e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f0:	2307      	movs	r3, #7
 80014f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f000 fa6d 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001506:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001514:	2303      	movs	r3, #3
 8001516:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f000 fa5b 	bl	80019dc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3778      	adds	r7, #120	@ 0x78
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004400 	.word	0x40004400
 8001534:	40021000 	.word	0x40021000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f8cf 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800159a:	2010      	movs	r0, #16
 800159c:	f000 fbb8 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f002 fc28 	bl	8003e28 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000c000 	.word	0x2000c000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000198 	.word	0x20000198
 800160c:	200002e8 	.word	0x200002e8

08001610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001638:	f7ff ffea 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopForever+0xe>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f002 fbe7 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001666:	f7ff fced 	bl	8001044 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001678:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 800167c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001680:	200002e8 	.word	0x200002e8

08001684 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_IRQHandler>

08001686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f961 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f80e 	bl	80016b8 <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e001      	b.n	80016ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a8:	f7ff fe84 	bl	80013b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_InitTick+0x6c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_InitTick+0x70>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_InitTick+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f96d 	bl	80019c2 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d809      	bhi.n	8001708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f937 	bl	800196e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_InitTick+0x74>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e007      	b.n	8001718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e004      	b.n	8001718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008
 8001754:	2000019c 	.word	0x2000019c

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000019c 	.word	0x2000019c

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	@ (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ea:	e148      	b.n	8001c7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 813a 	beq.w	8001c78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d005      	beq.n	8001a1c <HAL_GPIO_Init+0x40>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d017      	beq.n	8001aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d123      	bne.n	8001b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0203 	and.w	r2, r3, #3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8094 	beq.w	8001c78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b50:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b54:	4a51      	ldr	r2, [pc, #324]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <HAL_GPIO_Init+0x2c4>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1d4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a43      	ldr	r2, [pc, #268]	@ (8001ca4 <HAL_GPIO_Init+0x2c8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1d0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ca8 <HAL_GPIO_Init+0x2cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1cc>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e004      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc2:	4937      	ldr	r1, [pc, #220]	@ (8001ca0 <HAL_GPIO_Init+0x2c4>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c48:	4a18      	ldr	r2, [pc, #96]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f aeaf 	bne.w	80019ec <HAL_GPIO_Init+0x10>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e001      	b.n	8001cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f806 	bl	8001d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40007000 	.word	0x40007000

08001d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da2:	d130      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da4:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db0:	d038      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dba:	4a1e      	ldr	r2, [pc, #120]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2232      	movs	r2, #50	@ 0x32
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0c9b      	lsrs	r3, r3, #18
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd8:	e002      	b.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dec:	d102      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f2      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e00:	d110      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e00f      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e12:	d007      	beq.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	431bde83 	.word	0x431bde83

08001e40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 bc02 	b.w	8002658 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5e:	4b94      	ldr	r3, [pc, #592]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80e4 	beq.w	800203e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4c>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	f040 808b 	bne.w	8001f9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	f040 8087 	bne.w	8001f9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e8c:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x64>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e3d9      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	4b81      	ldr	r3, [pc, #516]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_RCC_OscConfig+0x7e>
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ebc:	e005      	b.n	8001eca <HAL_RCC_OscConfig+0x8a>
 8001ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d223      	bcs.n	8001f16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fd8c 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e3ba      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee2:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b70      	ldr	r3, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	496d      	ldr	r1, [pc, #436]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f00:	4b6b      	ldr	r3, [pc, #428]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	4968      	ldr	r1, [pc, #416]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e025      	b.n	8001f62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f16:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4960      	ldr	r1, [pc, #384]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f34:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	495b      	ldr	r1, [pc, #364]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fd4c 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e37a      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f62:	f000 fc81 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	4950      	ldr	r1, [pc, #320]	@ (80020b4 <HAL_RCC_OscConfig+0x274>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a4e      	ldr	r2, [pc, #312]	@ (80020b8 <HAL_RCC_OscConfig+0x278>)
 8001f80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f82:	4b4e      	ldr	r3, [pc, #312]	@ (80020bc <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fb96 	bl	80016b8 <HAL_InitTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d052      	beq.n	800203c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	e35e      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d032      	beq.n	8002008 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fa2:	4b43      	ldr	r3, [pc, #268]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a42      	ldr	r2, [pc, #264]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fbd3 	bl	8001758 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb6:	f7ff fbcf 	bl	8001758 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e347      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4930      	ldr	r1, [pc, #192]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	492b      	ldr	r1, [pc, #172]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
 8002006:	e01a      	b.n	800203e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002008:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a28      	ldr	r2, [pc, #160]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002014:	f7ff fba0 	bl	8001758 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201c:	f7ff fb9c 	bl	8001758 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e314      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1dc>
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d073      	beq.n	8002132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x21c>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d10e      	bne.n	8002074 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d063      	beq.n	8002130 <HAL_RCC_OscConfig+0x2f0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d15f      	bne.n	8002130 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e2f1      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207c:	d106      	bne.n	800208c <HAL_RCC_OscConfig+0x24c>
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e025      	b.n	80020d8 <HAL_RCC_OscConfig+0x298>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002094:	d114      	bne.n	80020c0 <HAL_RCC_OscConfig+0x280>
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a02      	ldr	r2, [pc, #8]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x298>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	0800483c 	.word	0x0800483c
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000004 	.word	0x20000004
 80020c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a9f      	ldr	r2, [pc, #636]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a9c      	ldr	r2, [pc, #624]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb3a 	bl	8001758 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fb36 	bl	8001758 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e2ae      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	4b92      	ldr	r3, [pc, #584]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2a8>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7ff fb26 	bl	8001758 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fb22 	bl	8001758 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e29a      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002122:	4b88      	ldr	r3, [pc, #544]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x2d0>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d060      	beq.n	8002200 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x310>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d119      	bne.n	800217e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d116      	bne.n	800217e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	4b7c      	ldr	r3, [pc, #496]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x328>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e277      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4973      	ldr	r1, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	e040      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002186:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6e      	ldr	r2, [pc, #440]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7ff fae1 	bl	8001758 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff fadd 	bl	8001758 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e255      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ac:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b62      	ldr	r3, [pc, #392]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	495f      	ldr	r1, [pc, #380]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
 80021cc:	e018      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff fabd 	bl	8001758 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7ff fab9 	bl	8001758 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e231      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f4:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03c      	beq.n	8002286 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221a:	4a4a      	ldr	r2, [pc, #296]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff fa98 	bl	8001758 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fa94 	bl	8001758 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e20c      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800223e:	4b41      	ldr	r3, [pc, #260]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0ef      	beq.n	800222c <HAL_RCC_OscConfig+0x3ec>
 800224c:	e01b      	b.n	8002286 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224e:	4b3d      	ldr	r3, [pc, #244]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002254:	4a3b      	ldr	r2, [pc, #236]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff fa7b 	bl	8001758 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fa77 	bl	8001758 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1ef      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 80a6 	beq.w	80023e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002298:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b0:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_RCC_OscConfig+0x508>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d118      	bne.n	80022fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <HAL_RCC_OscConfig+0x508>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002348 <HAL_RCC_OscConfig+0x508>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d8:	f7ff fa3e 	bl	8001758 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7ff fa3a 	bl	8001758 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1b2      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x508>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <HAL_RCC_OscConfig+0x4d8>
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230c:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002316:	e029      	b.n	800236c <HAL_RCC_OscConfig+0x52c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d115      	bne.n	800234c <HAL_RCC_OscConfig+0x50c>
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002336:	4a03      	ldr	r2, [pc, #12]	@ (8002344 <HAL_RCC_OscConfig+0x504>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002340:	e014      	b.n	800236c <HAL_RCC_OscConfig+0x52c>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	4b9a      	ldr	r3, [pc, #616]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	4a99      	ldr	r2, [pc, #612]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800235c:	4b96      	ldr	r3, [pc, #600]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002362:	4a95      	ldr	r2, [pc, #596]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d016      	beq.n	80023a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff f9f0 	bl	8001758 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7ff f9ec 	bl	8001758 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e162      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	4b89      	ldr	r3, [pc, #548]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ed      	beq.n	800237c <HAL_RCC_OscConfig+0x53c>
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7ff f9d9 	bl	8001758 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff f9d5 	bl	8001758 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e14b      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c0:	4b7d      	ldr	r3, [pc, #500]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ed      	bne.n	80023aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b78      	ldr	r3, [pc, #480]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	4a77      	ldr	r2, [pc, #476]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03c      	beq.n	8002466 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01c      	beq.n	800242e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f4:	4b70      	ldr	r3, [pc, #448]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80023f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023fa:	4a6f      	ldr	r2, [pc, #444]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff f9a8 	bl	8001758 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800240c:	f7ff f9a4 	bl	8001758 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e11c      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800241e:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <HAL_RCC_OscConfig+0x5cc>
 800242c:	e01b      	b.n	8002466 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800242e:	4b62      	ldr	r3, [pc, #392]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002434:	4a60      	ldr	r2, [pc, #384]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7ff f98b 	bl	8001758 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002446:	f7ff f987 	bl	8001758 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ff      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002458:	4b57      	ldr	r3, [pc, #348]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 800245a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ef      	bne.n	8002446 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80f3 	beq.w	8002656 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 80c9 	bne.w	800260c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800247a:	4b4f      	ldr	r3, [pc, #316]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	429a      	cmp	r2, r3
 800248c:	d12c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	3b01      	subs	r3, #1
 800249a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d123      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d11b      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d113      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d109      	bne.n	80024e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d06b      	beq.n	80025c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d062      	beq.n	80025b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024ee:	4b32      	ldr	r3, [pc, #200]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0ac      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024fe:	4b2e      	ldr	r3, [pc, #184]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2d      	ldr	r2, [pc, #180]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002504:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002508:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800250a:	f7ff f925 	bl	8001758 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff f921 	bl	8001758 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e099      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <HAL_RCC_OscConfig+0x77c>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002540:	3a01      	subs	r2, #1
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	4311      	orrs	r1, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800254a:	0212      	lsls	r2, r2, #8
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002552:	0852      	lsrs	r2, r2, #1
 8002554:	3a01      	subs	r2, #1
 8002556:	0552      	lsls	r2, r2, #21
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800255e:	0852      	lsrs	r2, r2, #1
 8002560:	3a01      	subs	r2, #1
 8002562:	0652      	lsls	r2, r2, #25
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800256a:	06d2      	lsls	r2, r2, #27
 800256c:	430a      	orrs	r2, r1
 800256e:	4912      	ldr	r1, [pc, #72]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002574:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0f      	ldr	r2, [pc, #60]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002580:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800258c:	f7ff f8e4 	bl	8001758 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f8e0 	bl	8001758 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e058      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b2:	e050      	b.n	8002656 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e04f      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d144      	bne.n	8002656 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a20      	ldr	r2, [pc, #128]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e4:	f7ff f8b8 	bl	8001758 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff f8b4 	bl	8001758 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e02c      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x7ac>
 800260a:	e024      	b.n	8002656 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d01f      	beq.n	8002652 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 8002618:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff f89b 	bl	8001758 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff f897 	bl	8001758 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e00f      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002644:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4905      	ldr	r1, [pc, #20]	@ (8002660 <HAL_RCC_OscConfig+0x820>)
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_RCC_OscConfig+0x824>)
 800264c:	4013      	ands	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e001      	b.n	8002656 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	feeefffc 	.word	0xfeeefffc

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0e7      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b75      	ldr	r3, [pc, #468]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b72      	ldr	r3, [pc, #456]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4970      	ldr	r1, [pc, #448]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b6e      	ldr	r3, [pc, #440]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0cf      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d908      	bls.n	80026da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4960      	ldr	r1, [pc, #384]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04c      	beq.n	8002780 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d121      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0a6      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002706:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d115      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e09a      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e08e      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e086      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b46      	ldr	r3, [pc, #280]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4943      	ldr	r1, [pc, #268]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7ff f802 	bl	8001758 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe fffe 	bl	8001758 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e06e      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002798:	429a      	cmp	r2, r3
 800279a:	d208      	bcs.n	80027ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b2e      	ldr	r3, [pc, #184]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	492b      	ldr	r1, [pc, #172]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ae:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d210      	bcs.n	80027de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027bc:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 0207 	bic.w	r2, r3, #7
 80027c4:	4923      	ldr	r1, [pc, #140]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <HAL_RCC_ClockConfig+0x1ec>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e036      	b.n	800284c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4918      	ldr	r1, [pc, #96]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4910      	ldr	r1, [pc, #64]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800281c:	f000 f824 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	490b      	ldr	r1, [pc, #44]	@ (800285c <HAL_RCC_ClockConfig+0x1f4>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_RCC_ClockConfig+0x1fc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff39 	bl	80016b8 <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	72fb      	strb	r3, [r7, #11]

  return status;
 800284a:	7afb      	ldrb	r3, [r7, #11]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40022000 	.word	0x40022000
 8002858:	40021000 	.word	0x40021000
 800285c:	0800483c 	.word	0x0800483c
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002880:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x34>
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d121      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d11e      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800289c:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a8:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d102      	bne.n	80028e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e0:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x110>)
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e004      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <HAL_RCC_GetSysClockFreq+0x114>)
 80028ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d134      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d003      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0xa6>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d003      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0xac>
 800290c:	e005      	b.n	800291a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x110>)
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_RCC_GetSysClockFreq+0x114>)
 8002916:	617b      	str	r3, [r7, #20]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	617b      	str	r3, [r7, #20]
      break;
 800291e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	3301      	adds	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	fb03 f202 	mul.w	r2, r3, r2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002946:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x108>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	0e5b      	lsrs	r3, r3, #25
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	3301      	adds	r3, #1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002960:	69bb      	ldr	r3, [r7, #24]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	08004854 	.word	0x08004854
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4904      	ldr	r1, [pc, #16]	@ (80029c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	0800484c 	.word	0x0800484c

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c8:	f7ff ffda 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0adb      	lsrs	r3, r3, #11
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4904      	ldr	r1, [pc, #16]	@ (80029ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	0800484c 	.word	0x0800484c

080029f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029fc:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a08:	f7ff f9b6 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 8002a0c:	6178      	str	r0, [r7, #20]
 8002a0e:	e014      	b.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	4a24      	ldr	r2, [pc, #144]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a1c:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a28:	f7ff f9a6 	bl	8001d78 <HAL_PWREx_GetVoltageRange>
 8002a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a40:	d10b      	bne.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b80      	cmp	r3, #128	@ 0x80
 8002a46:	d919      	bls.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a4c:	d902      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a4e:	2302      	movs	r3, #2
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e013      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e010      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b80      	cmp	r3, #128	@ 0x80
 8002a5e:	d902      	bls.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a60:	2303      	movs	r3, #3
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e00a      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b80      	cmp	r3, #128	@ 0x80
 8002a6a:	d102      	bne.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	e004      	b.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b70      	cmp	r3, #112	@ 0x70
 8002a76:	d101      	bne.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a78:	2301      	movs	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 0207 	bic.w	r2, r3, #7
 8002a84:	4909      	ldr	r1, [pc, #36]	@ (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a8c:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40022000 	.word	0x40022000

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d031      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ad4:	d01a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ad6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ada:	d814      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ae0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ae4:	d10f      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a5c      	ldr	r2, [pc, #368]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af2:	e00c      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f9de 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	74fb      	strb	r3, [r7, #19]
      break;
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b14:	4b51      	ldr	r3, [pc, #324]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	494e      	ldr	r1, [pc, #312]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 809e 	beq.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b42:	4b46      	ldr	r3, [pc, #280]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	4b40      	ldr	r3, [pc, #256]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b64:	4b3d      	ldr	r3, [pc, #244]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b74:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a39      	ldr	r2, [pc, #228]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b80:	f7fe fdea 	bl	8001758 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b86:	e009      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b88:	f7fe fde6 	bl	8001758 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	74fb      	strb	r3, [r7, #19]
        break;
 8002b9a:	e005      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b9c:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d15a      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bae:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01e      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d019      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bca:	4b24      	ldr	r3, [pc, #144]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b21      	ldr	r3, [pc, #132]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bec:	4a1b      	ldr	r2, [pc, #108]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bf6:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d016      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fda6 	bl	8001758 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fda2 	bl	8001758 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d902      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	74fb      	strb	r3, [r7, #19]
            break;
 8002c26:	e006      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ec      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4a:	4904      	ldr	r1, [pc, #16]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c68:	7c7b      	ldrb	r3, [r7, #17]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b8a      	ldr	r3, [pc, #552]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	4a89      	ldr	r2, [pc, #548]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c86:	4b84      	ldr	r3, [pc, #528]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	f023 0203 	bic.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4980      	ldr	r1, [pc, #512]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f023 020c 	bic.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	4978      	ldr	r1, [pc, #480]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cca:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	496f      	ldr	r1, [pc, #444]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cec:	4b6a      	ldr	r3, [pc, #424]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	4967      	ldr	r1, [pc, #412]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d0e:	4b62      	ldr	r3, [pc, #392]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	495e      	ldr	r1, [pc, #376]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	4956      	ldr	r1, [pc, #344]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d52:	4b51      	ldr	r3, [pc, #324]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	494d      	ldr	r1, [pc, #308]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d028      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d74:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	4945      	ldr	r1, [pc, #276]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d92:	d106      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b40      	ldr	r3, [pc, #256]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a3f      	ldr	r2, [pc, #252]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e011      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f882 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	492d      	ldr	r1, [pc, #180]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df2:	4b29      	ldr	r3, [pc, #164]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a28      	ldr	r2, [pc, #160]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dfc:	60d3      	str	r3, [r2, #12]
 8002dfe:	e011      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f853 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01c      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3e:	4916      	ldr	r1, [pc, #88]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	2102      	movs	r1, #2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f830 	bl	8002ebc <RCCEx_PLLSAI1_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e84:	4904      	ldr	r1, [pc, #16]	@ (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eca:	4b74      	ldr	r3, [pc, #464]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed6:	4b71      	ldr	r3, [pc, #452]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eee:	4b6b      	ldr	r3, [pc, #428]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
       ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d047      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e044      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d018      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x86>
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d825      	bhi.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x62>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <RCCEx_PLLSAI1_Config+0x74>
 8002f1c:	e020      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e01a      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f30:	4b5a      	ldr	r3, [pc, #360]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e013      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f42:	4b56      	ldr	r3, [pc, #344]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4e:	4b53      	ldr	r3, [pc, #332]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5e:	e006      	b.n	8002f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e004      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f76:	4b49      	ldr	r3, [pc, #292]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	4943      	ldr	r1, [pc, #268]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d17c      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f98:	4b40      	ldr	r3, [pc, #256]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fbd8 	bl	8001758 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fac:	f7fe fbd4 	bl	8001758 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fc0:	4b36      	ldr	r3, [pc, #216]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ef      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d15f      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d110      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b30      	ldr	r3, [pc, #192]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	06d2      	lsls	r2, r2, #27
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	492a      	ldr	r1, [pc, #168]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	610b      	str	r3, [r1, #16]
 8002ff8:	e027      	b.n	800304a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d112      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003000:	4b26      	ldr	r3, [pc, #152]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003008:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6892      	ldr	r2, [r2, #8]
 8003010:	0211      	lsls	r1, r2, #8
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6912      	ldr	r2, [r2, #16]
 8003016:	0852      	lsrs	r2, r2, #1
 8003018:	3a01      	subs	r2, #1
 800301a:	0552      	lsls	r2, r2, #21
 800301c:	430a      	orrs	r2, r1
 800301e:	491f      	ldr	r1, [pc, #124]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	610b      	str	r3, [r1, #16]
 8003024:	e011      	b.n	800304a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003026:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800302e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6892      	ldr	r2, [r2, #8]
 8003036:	0211      	lsls	r1, r2, #8
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6952      	ldr	r2, [r2, #20]
 800303c:	0852      	lsrs	r2, r2, #1
 800303e:	3a01      	subs	r2, #1
 8003040:	0652      	lsls	r2, r2, #25
 8003042:	430a      	orrs	r2, r1
 8003044:	4915      	ldr	r1, [pc, #84]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800304a:	4b14      	ldr	r3, [pc, #80]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003050:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003054:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fb7f 	bl	8001758 <HAL_GetTick>
 800305a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305c:	e009      	b.n	8003072 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305e:	f7fe fb7b 	bl	8001758 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d902      	bls.n	8003072 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	73fb      	strb	r3, [r7, #15]
          break;
 8003070:	e005      	b.n	800307e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0ef      	beq.n	800305e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <RCCEx_PLLSAI1_Config+0x1e0>)
 800308e:	4313      	orrs	r3, r2
 8003090:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e049      	b.n	8003146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe f998 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 f882 	bl	80031e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e033      	b.n	80031d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_TIM_Base_Start+0x8c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_TIM_Base_Start+0x3e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d004      	beq.n	800318e <HAL_TIM_Base_Start+0x3e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <HAL_TIM_Base_Start+0x90>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_TIM_Base_Start+0x94>)
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d015      	beq.n	80031cc <HAL_TIM_Base_Start+0x7c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a6:	d011      	beq.n	80031cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	e008      	b.n	80031cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e000      	b.n	80031ce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	00010007 	.word	0x00010007

080031e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a30      	ldr	r2, [pc, #192]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x20>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00b      	beq.n	800323a <TIM_Base_SetConfig+0x52>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d007      	beq.n	800323a <TIM_Base_SetConfig+0x52>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a24      	ldr	r2, [pc, #144]	@ (80032c0 <TIM_Base_SetConfig+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <TIM_Base_SetConfig+0x52>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <TIM_Base_SetConfig+0xdc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d108      	bne.n	800324c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <TIM_Base_SetConfig+0xd4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0xa0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <TIM_Base_SetConfig+0xd8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0xa0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a10      	ldr	r2, [pc, #64]	@ (80032c4 <TIM_Base_SetConfig+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
  }
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400

080032c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032dc:	2302      	movs	r3, #2
 80032de:	e04f      	b.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003310:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a14      	ldr	r2, [pc, #80]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d004      	beq.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a10      	ldr	r2, [pc, #64]	@ (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10c      	bne.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800335a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4313      	orrs	r3, r2
 8003364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40014000 	.word	0x40014000

08003394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e040      	b.n	8003428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe f854 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	@ 0x24
 80033c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fade 	bl	800399c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8af 	bl	8003544 <UART_SetConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e01b      	b.n	8003428 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800340e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb5d 	bl	8003ae0 <UART_CheckIdleState>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	@ 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003444:	2b20      	cmp	r3, #32
 8003446:	d177      	bne.n	8003538 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_UART_Transmit+0x24>
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e070      	b.n	800353a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2221      	movs	r2, #33	@ 0x21
 8003464:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003466:	f7fe f977 	bl	8001758 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003484:	d108      	bne.n	8003498 <HAL_UART_Transmit+0x68>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e003      	b.n	80034a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a0:	e02f      	b.n	8003502 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	@ 0x80
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fbbf 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e03b      	b.n	800353a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d4:	b292      	uxth	r2, r2
 80034d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	3302      	adds	r3, #2
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e007      	b.n	80034f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1c9      	bne.n	80034a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2140      	movs	r1, #64	@ 0x40
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb89 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e005      	b.n	800353a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b08a      	sub	sp, #40	@ 0x28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4313      	orrs	r3, r2
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4bb4      	ldr	r3, [pc, #720]	@ (8003844 <UART_SetConfig+0x300>)
 8003574:	4013      	ands	r3, r2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800357c:	430b      	orrs	r3, r1
 800357e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4aa9      	ldr	r2, [pc, #676]	@ (8003848 <UART_SetConfig+0x304>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ac:	4313      	orrs	r3, r2
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa0      	ldr	r2, [pc, #640]	@ (800384c <UART_SetConfig+0x308>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d126      	bne.n	800361c <UART_SetConfig+0xd8>
 80035ce:	4ba0      	ldr	r3, [pc, #640]	@ (8003850 <UART_SetConfig+0x30c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d81b      	bhi.n	8003614 <UART_SetConfig+0xd0>
 80035dc:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <UART_SetConfig+0xa0>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003605 	.word	0x08003605
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fa:	e080      	b.n	80036fe <UART_SetConfig+0x1ba>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003602:	e07c      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360a:	e078      	b.n	80036fe <UART_SetConfig+0x1ba>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003612:	e074      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800361a:	e070      	b.n	80036fe <UART_SetConfig+0x1ba>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8c      	ldr	r2, [pc, #560]	@ (8003854 <UART_SetConfig+0x310>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d138      	bne.n	8003698 <UART_SetConfig+0x154>
 8003626:	4b8a      	ldr	r3, [pc, #552]	@ (8003850 <UART_SetConfig+0x30c>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d82d      	bhi.n	8003690 <UART_SetConfig+0x14c>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <UART_SetConfig+0xf8>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	08003691 	.word	0x08003691
 8003644:	08003691 	.word	0x08003691
 8003648:	08003691 	.word	0x08003691
 800364c:	08003681 	.word	0x08003681
 8003650:	08003691 	.word	0x08003691
 8003654:	08003691 	.word	0x08003691
 8003658:	08003691 	.word	0x08003691
 800365c:	08003679 	.word	0x08003679
 8003660:	08003691 	.word	0x08003691
 8003664:	08003691 	.word	0x08003691
 8003668:	08003691 	.word	0x08003691
 800366c:	08003689 	.word	0x08003689
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e042      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367e:	e03e      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003686:	e03a      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e036      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003696:	e032      	b.n	80036fe <UART_SetConfig+0x1ba>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6a      	ldr	r2, [pc, #424]	@ (8003848 <UART_SetConfig+0x304>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12a      	bne.n	80036f8 <UART_SetConfig+0x1b4>
 80036a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003850 <UART_SetConfig+0x30c>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036b0:	d01a      	beq.n	80036e8 <UART_SetConfig+0x1a4>
 80036b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0x1ac>
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036bc:	d00c      	beq.n	80036d8 <UART_SetConfig+0x194>
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c2:	d815      	bhi.n	80036f0 <UART_SetConfig+0x1ac>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <UART_SetConfig+0x18c>
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036cc:	d008      	beq.n	80036e0 <UART_SetConfig+0x19c>
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x1ac>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d6:	e012      	b.n	80036fe <UART_SetConfig+0x1ba>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036de:	e00e      	b.n	80036fe <UART_SetConfig+0x1ba>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e6:	e00a      	b.n	80036fe <UART_SetConfig+0x1ba>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e006      	b.n	80036fe <UART_SetConfig+0x1ba>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e002      	b.n	80036fe <UART_SetConfig+0x1ba>
 80036f8:	2310      	movs	r3, #16
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a51      	ldr	r2, [pc, #324]	@ (8003848 <UART_SetConfig+0x304>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d17a      	bne.n	80037fe <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800370c:	2b08      	cmp	r3, #8
 800370e:	d824      	bhi.n	800375a <UART_SetConfig+0x216>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0x1d4>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800373d 	.word	0x0800373d
 800371c:	0800375b 	.word	0x0800375b
 8003720:	08003745 	.word	0x08003745
 8003724:	0800375b 	.word	0x0800375b
 8003728:	0800374b 	.word	0x0800374b
 800372c:	0800375b 	.word	0x0800375b
 8003730:	0800375b 	.word	0x0800375b
 8003734:	0800375b 	.word	0x0800375b
 8003738:	08003753 	.word	0x08003753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800373c:	f7ff f92c 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003740:	61f8      	str	r0, [r7, #28]
        break;
 8003742:	e010      	b.n	8003766 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003744:	4b44      	ldr	r3, [pc, #272]	@ (8003858 <UART_SetConfig+0x314>)
 8003746:	61fb      	str	r3, [r7, #28]
        break;
 8003748:	e00d      	b.n	8003766 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800374a:	f7ff f88d 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800374e:	61f8      	str	r0, [r7, #28]
        break;
 8003750:	e009      	b.n	8003766 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003756:	61fb      	str	r3, [r7, #28]
        break;
 8003758:	e005      	b.n	8003766 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8107 	beq.w	800397c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	429a      	cmp	r2, r3
 800377c:	d305      	bcc.n	800378a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	429a      	cmp	r2, r3
 8003788:	d903      	bls.n	8003792 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003790:	e0f4      	b.n	800397c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	2200      	movs	r2, #0
 8003796:	461c      	mov	r4, r3
 8003798:	4615      	mov	r5, r2
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	022b      	lsls	r3, r5, #8
 80037a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037a8:	0222      	lsls	r2, r4, #8
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	6849      	ldr	r1, [r1, #4]
 80037ae:	0849      	lsrs	r1, r1, #1
 80037b0:	2000      	movs	r0, #0
 80037b2:	4688      	mov	r8, r1
 80037b4:	4681      	mov	r9, r0
 80037b6:	eb12 0a08 	adds.w	sl, r2, r8
 80037ba:	eb43 0b09 	adc.w	fp, r3, r9
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037cc:	4650      	mov	r0, sl
 80037ce:	4659      	mov	r1, fp
 80037d0:	f7fd fa24 	bl	8000c1c <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4613      	mov	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037e2:	d308      	bcc.n	80037f6 <UART_SetConfig+0x2b2>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ea:	d204      	bcs.n	80037f6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]
 80037f4:	e0c2      	b.n	800397c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037fc:	e0be      	b.n	800397c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003806:	d16a      	bne.n	80038de <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003808:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800380c:	2b08      	cmp	r3, #8
 800380e:	d834      	bhi.n	800387a <UART_SetConfig+0x336>
 8003810:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <UART_SetConfig+0x2d4>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800383d 	.word	0x0800383d
 800381c:	0800385d 	.word	0x0800385d
 8003820:	08003865 	.word	0x08003865
 8003824:	0800387b 	.word	0x0800387b
 8003828:	0800386b 	.word	0x0800386b
 800382c:	0800387b 	.word	0x0800387b
 8003830:	0800387b 	.word	0x0800387b
 8003834:	0800387b 	.word	0x0800387b
 8003838:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7ff f8ac 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003840:	61f8      	str	r0, [r7, #28]
        break;
 8003842:	e020      	b.n	8003886 <UART_SetConfig+0x342>
 8003844:	efff69f3 	.word	0xefff69f3
 8003848:	40008000 	.word	0x40008000
 800384c:	40013800 	.word	0x40013800
 8003850:	40021000 	.word	0x40021000
 8003854:	40004400 	.word	0x40004400
 8003858:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7ff f8b2 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003860:	61f8      	str	r0, [r7, #28]
        break;
 8003862:	e010      	b.n	8003886 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b4c      	ldr	r3, [pc, #304]	@ (8003998 <UART_SetConfig+0x454>)
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fffd 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800386e:	61f8      	str	r0, [r7, #28]
        break;
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003876:	61fb      	str	r3, [r7, #28]
        break;
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d077      	beq.n	800397c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005a      	lsls	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d916      	bls.n	80038d6 <UART_SetConfig+0x392>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ae:	d212      	bcs.n	80038d6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	8afa      	ldrh	r2, [r7, #22]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	e052      	b.n	800397c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038dc:	e04e      	b.n	800397c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d827      	bhi.n	8003936 <UART_SetConfig+0x3f2>
 80038e6:	a201      	add	r2, pc, #4	@ (adr r2, 80038ec <UART_SetConfig+0x3a8>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003919 	.word	0x08003919
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003937 	.word	0x08003937
 80038fc:	08003927 	.word	0x08003927
 8003900:	08003937 	.word	0x08003937
 8003904:	08003937 	.word	0x08003937
 8003908:	08003937 	.word	0x08003937
 800390c:	0800392f 	.word	0x0800392f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003910:	f7ff f842 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003914:	61f8      	str	r0, [r7, #28]
        break;
 8003916:	e014      	b.n	8003942 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7ff f854 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 800391c:	61f8      	str	r0, [r7, #28]
        break;
 800391e:	e010      	b.n	8003942 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003920:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <UART_SetConfig+0x454>)
 8003922:	61fb      	str	r3, [r7, #28]
        break;
 8003924:	e00d      	b.n	8003942 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003926:	f7fe ff9f 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800392a:	61f8      	str	r0, [r7, #28]
        break;
 800392c:	e009      	b.n	8003942 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003932:	61fb      	str	r3, [r7, #28]
        break;
 8003934:	e005      	b.n	8003942 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003940:	bf00      	nop
    }

    if (pclk != 0U)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d019      	beq.n	800397c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	085a      	lsrs	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	d909      	bls.n	8003976 <UART_SetConfig+0x432>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003968:	d205      	bcs.n	8003976 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	e002      	b.n	800397c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003988:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800398c:	4618      	mov	r0, r3
 800398e:	3728      	adds	r7, #40	@ 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	00f42400 	.word	0x00f42400

0800399c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a9a:	d10a      	bne.n	8003ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b098      	sub	sp, #96	@ 0x60
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af0:	f7fd fe32 	bl	8001758 <HAL_GetTick>
 8003af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d12e      	bne.n	8003b62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f88c 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d021      	beq.n	8003b62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e6      	bne.n	8003b1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e062      	b.n	8003c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d149      	bne.n	8003c04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f856 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03c      	beq.n	8003c04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	623b      	str	r3, [r7, #32]
   return(result);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e6      	bne.n	8003b8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bdc:	61fa      	str	r2, [r7, #28]
 8003bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	617b      	str	r3, [r7, #20]
   return(result);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e011      	b.n	8003c28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3758      	adds	r7, #88	@ 0x58
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	e04f      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d04b      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fd fd85 	bl	8001758 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e04e      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d037      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b80      	cmp	r3, #128	@ 0x80
 8003c76:	d034      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d031      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d110      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2208      	movs	r2, #8
 8003c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f838 	bl	8003d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e029      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cbc:	d111      	bne.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f81e 	bl	8003d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d0a0      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b095      	sub	sp, #84	@ 0x54
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d118      	bne.n	8003db2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 0310 	bic.w	r3, r3, #16
 8003d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e6      	bne.n	8003d80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dc6:	bf00      	nop
 8003dc8:	3754      	adds	r7, #84	@ 0x54
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <siprintf>:
 8003dd4:	b40e      	push	{r1, r2, r3}
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	b09d      	sub	sp, #116	@ 0x74
 8003dda:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003ddc:	9002      	str	r0, [sp, #8]
 8003dde:	9006      	str	r0, [sp, #24]
 8003de0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003de4:	480a      	ldr	r0, [pc, #40]	@ (8003e10 <siprintf+0x3c>)
 8003de6:	9107      	str	r1, [sp, #28]
 8003de8:	9104      	str	r1, [sp, #16]
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <siprintf+0x40>)
 8003dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df0:	9105      	str	r1, [sp, #20]
 8003df2:	2400      	movs	r4, #0
 8003df4:	a902      	add	r1, sp, #8
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003dfc:	f000 f994 	bl	8004128 <_svfiprintf_r>
 8003e00:	9b02      	ldr	r3, [sp, #8]
 8003e02:	701c      	strb	r4, [r3, #0]
 8003e04:	b01d      	add	sp, #116	@ 0x74
 8003e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e0a:	b003      	add	sp, #12
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000000c 	.word	0x2000000c
 8003e14:	ffff0208 	.word	0xffff0208

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__errno>:
 8003e28:	4b01      	ldr	r3, [pc, #4]	@ (8003e30 <__errno+0x8>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4d0d      	ldr	r5, [pc, #52]	@ (8003e6c <__libc_init_array+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	@ (8003e70 <__libc_init_array+0x3c>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	2600      	movs	r6, #0
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	4d0b      	ldr	r5, [pc, #44]	@ (8003e74 <__libc_init_array+0x40>)
 8003e46:	4c0c      	ldr	r4, [pc, #48]	@ (8003e78 <__libc_init_array+0x44>)
 8003e48:	f000 fce2 	bl	8004810 <_init>
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	2600      	movs	r6, #0
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	080048c0 	.word	0x080048c0
 8003e70:	080048c0 	.word	0x080048c0
 8003e74:	080048c0 	.word	0x080048c0
 8003e78:	080048c4 	.word	0x080048c4

08003e7c <__retarget_lock_acquire_recursive>:
 8003e7c:	4770      	bx	lr

08003e7e <__retarget_lock_release_recursive>:
 8003e7e:	4770      	bx	lr

08003e80 <_free_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d041      	beq.n	8003f0c <_free_r+0x8c>
 8003e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8c:	1f0c      	subs	r4, r1, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	18e4      	addlt	r4, r4, r3
 8003e94:	f000 f8e0 	bl	8004058 <__malloc_lock>
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <_free_r+0x90>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	b933      	cbnz	r3, 8003eac <_free_r+0x2c>
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea8:	f000 b8dc 	b.w	8004064 <__malloc_unlock>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d908      	bls.n	8003ec2 <_free_r+0x42>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	1821      	adds	r1, r4, r0
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	e7ed      	b.n	8003e9e <_free_r+0x1e>
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b10b      	cbz	r3, 8003ecc <_free_r+0x4c>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d9fa      	bls.n	8003ec2 <_free_r+0x42>
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	1850      	adds	r0, r2, r1
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d10b      	bne.n	8003eec <_free_r+0x6c>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	4401      	add	r1, r0
 8003ed8:	1850      	adds	r0, r2, r1
 8003eda:	4283      	cmp	r3, r0
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	d1e0      	bne.n	8003ea2 <_free_r+0x22>
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	4408      	add	r0, r1
 8003ee8:	6010      	str	r0, [r2, #0]
 8003eea:	e7da      	b.n	8003ea2 <_free_r+0x22>
 8003eec:	d902      	bls.n	8003ef4 <_free_r+0x74>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	e7d6      	b.n	8003ea2 <_free_r+0x22>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf04      	itt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	bf04      	itt	eq
 8003f04:	1809      	addeq	r1, r1, r0
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	6054      	str	r4, [r2, #4]
 8003f0a:	e7ca      	b.n	8003ea2 <_free_r+0x22>
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	200002e4 	.word	0x200002e4

08003f14 <sbrk_aligned>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4e0f      	ldr	r6, [pc, #60]	@ (8003f54 <sbrk_aligned+0x40>)
 8003f18:	460c      	mov	r4, r1
 8003f1a:	6831      	ldr	r1, [r6, #0]
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	b911      	cbnz	r1, 8003f26 <sbrk_aligned+0x12>
 8003f20:	f000 fba4 	bl	800466c <_sbrk_r>
 8003f24:	6030      	str	r0, [r6, #0]
 8003f26:	4621      	mov	r1, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 fb9f 	bl	800466c <_sbrk_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d103      	bne.n	8003f3a <sbrk_aligned+0x26>
 8003f32:	f04f 34ff 	mov.w	r4, #4294967295
 8003f36:	4620      	mov	r0, r4
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	1cc4      	adds	r4, r0, #3
 8003f3c:	f024 0403 	bic.w	r4, r4, #3
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d0f8      	beq.n	8003f36 <sbrk_aligned+0x22>
 8003f44:	1a21      	subs	r1, r4, r0
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 fb90 	bl	800466c <_sbrk_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d1f2      	bne.n	8003f36 <sbrk_aligned+0x22>
 8003f50:	e7ef      	b.n	8003f32 <sbrk_aligned+0x1e>
 8003f52:	bf00      	nop
 8003f54:	200002e0 	.word	0x200002e0

08003f58 <_malloc_r>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	1ccd      	adds	r5, r1, #3
 8003f5e:	f025 0503 	bic.w	r5, r5, #3
 8003f62:	3508      	adds	r5, #8
 8003f64:	2d0c      	cmp	r5, #12
 8003f66:	bf38      	it	cc
 8003f68:	250c      	movcc	r5, #12
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	db01      	blt.n	8003f74 <_malloc_r+0x1c>
 8003f70:	42a9      	cmp	r1, r5
 8003f72:	d904      	bls.n	8003f7e <_malloc_r+0x26>
 8003f74:	230c      	movs	r3, #12
 8003f76:	6033      	str	r3, [r6, #0]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004054 <_malloc_r+0xfc>
 8003f82:	f000 f869 	bl	8004058 <__malloc_lock>
 8003f86:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	bb44      	cbnz	r4, 8003fe0 <_malloc_r+0x88>
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbf 	bl	8003f14 <sbrk_aligned>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d158      	bne.n	800404e <_malloc_r+0xf6>
 8003f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa0:	4627      	mov	r7, r4
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	d143      	bne.n	800402e <_malloc_r+0xd6>
 8003fa6:	2c00      	cmp	r4, #0
 8003fa8:	d04b      	beq.n	8004042 <_malloc_r+0xea>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	4639      	mov	r1, r7
 8003fae:	4630      	mov	r0, r6
 8003fb0:	eb04 0903 	add.w	r9, r4, r3
 8003fb4:	f000 fb5a 	bl	800466c <_sbrk_r>
 8003fb8:	4581      	cmp	r9, r0
 8003fba:	d142      	bne.n	8004042 <_malloc_r+0xea>
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	1a6d      	subs	r5, r5, r1
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff ffa6 	bl	8003f14 <sbrk_aligned>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d03a      	beq.n	8004042 <_malloc_r+0xea>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	442b      	add	r3, r5
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	bb62      	cbnz	r2, 8004034 <_malloc_r+0xdc>
 8003fda:	f8c8 7000 	str.w	r7, [r8]
 8003fde:	e00f      	b.n	8004000 <_malloc_r+0xa8>
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	1b52      	subs	r2, r2, r5
 8003fe4:	d420      	bmi.n	8004028 <_malloc_r+0xd0>
 8003fe6:	2a0b      	cmp	r2, #11
 8003fe8:	d917      	bls.n	800401a <_malloc_r+0xc2>
 8003fea:	1961      	adds	r1, r4, r5
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	6025      	str	r5, [r4, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	6059      	strne	r1, [r3, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	bf08      	it	eq
 8003ff8:	f8c8 1000 	streq.w	r1, [r8]
 8003ffc:	5162      	str	r2, [r4, r5]
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	4630      	mov	r0, r6
 8004002:	f000 f82f 	bl	8004064 <__malloc_unlock>
 8004006:	f104 000b 	add.w	r0, r4, #11
 800400a:	1d23      	adds	r3, r4, #4
 800400c:	f020 0007 	bic.w	r0, r0, #7
 8004010:	1ac2      	subs	r2, r0, r3
 8004012:	bf1c      	itt	ne
 8004014:	1a1b      	subne	r3, r3, r0
 8004016:	50a3      	strne	r3, [r4, r2]
 8004018:	e7af      	b.n	8003f7a <_malloc_r+0x22>
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	bf0c      	ite	eq
 8004020:	f8c8 2000 	streq.w	r2, [r8]
 8004024:	605a      	strne	r2, [r3, #4]
 8004026:	e7eb      	b.n	8004000 <_malloc_r+0xa8>
 8004028:	4623      	mov	r3, r4
 800402a:	6864      	ldr	r4, [r4, #4]
 800402c:	e7ae      	b.n	8003f8c <_malloc_r+0x34>
 800402e:	463c      	mov	r4, r7
 8004030:	687f      	ldr	r7, [r7, #4]
 8004032:	e7b6      	b.n	8003fa2 <_malloc_r+0x4a>
 8004034:	461a      	mov	r2, r3
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	d1fb      	bne.n	8004034 <_malloc_r+0xdc>
 800403c:	2300      	movs	r3, #0
 800403e:	6053      	str	r3, [r2, #4]
 8004040:	e7de      	b.n	8004000 <_malloc_r+0xa8>
 8004042:	230c      	movs	r3, #12
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	4630      	mov	r0, r6
 8004048:	f000 f80c 	bl	8004064 <__malloc_unlock>
 800404c:	e794      	b.n	8003f78 <_malloc_r+0x20>
 800404e:	6005      	str	r5, [r0, #0]
 8004050:	e7d6      	b.n	8004000 <_malloc_r+0xa8>
 8004052:	bf00      	nop
 8004054:	200002e4 	.word	0x200002e4

08004058 <__malloc_lock>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__malloc_lock+0x8>)
 800405a:	f7ff bf0f 	b.w	8003e7c <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	200002dc 	.word	0x200002dc

08004064 <__malloc_unlock>:
 8004064:	4801      	ldr	r0, [pc, #4]	@ (800406c <__malloc_unlock+0x8>)
 8004066:	f7ff bf0a 	b.w	8003e7e <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	200002dc 	.word	0x200002dc

08004070 <__ssputs_r>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	688e      	ldr	r6, [r1, #8]
 8004076:	461f      	mov	r7, r3
 8004078:	42be      	cmp	r6, r7
 800407a:	680b      	ldr	r3, [r1, #0]
 800407c:	4682      	mov	sl, r0
 800407e:	460c      	mov	r4, r1
 8004080:	4690      	mov	r8, r2
 8004082:	d82d      	bhi.n	80040e0 <__ssputs_r+0x70>
 8004084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004088:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800408c:	d026      	beq.n	80040dc <__ssputs_r+0x6c>
 800408e:	6965      	ldr	r5, [r4, #20]
 8004090:	6909      	ldr	r1, [r1, #16]
 8004092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004096:	eba3 0901 	sub.w	r9, r3, r1
 800409a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409e:	1c7b      	adds	r3, r7, #1
 80040a0:	444b      	add	r3, r9
 80040a2:	106d      	asrs	r5, r5, #1
 80040a4:	429d      	cmp	r5, r3
 80040a6:	bf38      	it	cc
 80040a8:	461d      	movcc	r5, r3
 80040aa:	0553      	lsls	r3, r2, #21
 80040ac:	d527      	bpl.n	80040fe <__ssputs_r+0x8e>
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7ff ff52 	bl	8003f58 <_malloc_r>
 80040b4:	4606      	mov	r6, r0
 80040b6:	b360      	cbz	r0, 8004112 <__ssputs_r+0xa2>
 80040b8:	6921      	ldr	r1, [r4, #16]
 80040ba:	464a      	mov	r2, r9
 80040bc:	f000 fae6 	bl	800468c <memcpy>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	6126      	str	r6, [r4, #16]
 80040ce:	6165      	str	r5, [r4, #20]
 80040d0:	444e      	add	r6, r9
 80040d2:	eba5 0509 	sub.w	r5, r5, r9
 80040d6:	6026      	str	r6, [r4, #0]
 80040d8:	60a5      	str	r5, [r4, #8]
 80040da:	463e      	mov	r6, r7
 80040dc:	42be      	cmp	r6, r7
 80040de:	d900      	bls.n	80040e2 <__ssputs_r+0x72>
 80040e0:	463e      	mov	r6, r7
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	4632      	mov	r2, r6
 80040e6:	4641      	mov	r1, r8
 80040e8:	f000 faa6 	bl	8004638 <memmove>
 80040ec:	68a3      	ldr	r3, [r4, #8]
 80040ee:	1b9b      	subs	r3, r3, r6
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4433      	add	r3, r6
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	2000      	movs	r0, #0
 80040fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fe:	462a      	mov	r2, r5
 8004100:	f000 fad2 	bl	80046a8 <_realloc_r>
 8004104:	4606      	mov	r6, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d1e0      	bne.n	80040cc <__ssputs_r+0x5c>
 800410a:	6921      	ldr	r1, [r4, #16]
 800410c:	4650      	mov	r0, sl
 800410e:	f7ff feb7 	bl	8003e80 <_free_r>
 8004112:	230c      	movs	r3, #12
 8004114:	f8ca 3000 	str.w	r3, [sl]
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	e7e9      	b.n	80040fa <__ssputs_r+0x8a>
	...

08004128 <_svfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4698      	mov	r8, r3
 800412e:	898b      	ldrh	r3, [r1, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	b09d      	sub	sp, #116	@ 0x74
 8004134:	4607      	mov	r7, r0
 8004136:	460d      	mov	r5, r1
 8004138:	4614      	mov	r4, r2
 800413a:	d510      	bpl.n	800415e <_svfiprintf_r+0x36>
 800413c:	690b      	ldr	r3, [r1, #16]
 800413e:	b973      	cbnz	r3, 800415e <_svfiprintf_r+0x36>
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	f7ff ff09 	bl	8003f58 <_malloc_r>
 8004146:	6028      	str	r0, [r5, #0]
 8004148:	6128      	str	r0, [r5, #16]
 800414a:	b930      	cbnz	r0, 800415a <_svfiprintf_r+0x32>
 800414c:	230c      	movs	r3, #12
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b01d      	add	sp, #116	@ 0x74
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	2340      	movs	r3, #64	@ 0x40
 800415c:	616b      	str	r3, [r5, #20]
 800415e:	2300      	movs	r3, #0
 8004160:	9309      	str	r3, [sp, #36]	@ 0x24
 8004162:	2320      	movs	r3, #32
 8004164:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004168:	f8cd 800c 	str.w	r8, [sp, #12]
 800416c:	2330      	movs	r3, #48	@ 0x30
 800416e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800430c <_svfiprintf_r+0x1e4>
 8004172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004176:	f04f 0901 	mov.w	r9, #1
 800417a:	4623      	mov	r3, r4
 800417c:	469a      	mov	sl, r3
 800417e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004182:	b10a      	cbz	r2, 8004188 <_svfiprintf_r+0x60>
 8004184:	2a25      	cmp	r2, #37	@ 0x25
 8004186:	d1f9      	bne.n	800417c <_svfiprintf_r+0x54>
 8004188:	ebba 0b04 	subs.w	fp, sl, r4
 800418c:	d00b      	beq.n	80041a6 <_svfiprintf_r+0x7e>
 800418e:	465b      	mov	r3, fp
 8004190:	4622      	mov	r2, r4
 8004192:	4629      	mov	r1, r5
 8004194:	4638      	mov	r0, r7
 8004196:	f7ff ff6b 	bl	8004070 <__ssputs_r>
 800419a:	3001      	adds	r0, #1
 800419c:	f000 80a7 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a2:	445a      	add	r2, fp
 80041a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a6:	f89a 3000 	ldrb.w	r3, [sl]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 809f 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ba:	f10a 0a01 	add.w	sl, sl, #1
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	9307      	str	r3, [sp, #28]
 80041c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80041c8:	4654      	mov	r4, sl
 80041ca:	2205      	movs	r2, #5
 80041cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d0:	484e      	ldr	r0, [pc, #312]	@ (800430c <_svfiprintf_r+0x1e4>)
 80041d2:	f7fc f805 	bl	80001e0 <memchr>
 80041d6:	9a04      	ldr	r2, [sp, #16]
 80041d8:	b9d8      	cbnz	r0, 8004212 <_svfiprintf_r+0xea>
 80041da:	06d0      	lsls	r0, r2, #27
 80041dc:	bf44      	itt	mi
 80041de:	2320      	movmi	r3, #32
 80041e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e4:	0711      	lsls	r1, r2, #28
 80041e6:	bf44      	itt	mi
 80041e8:	232b      	movmi	r3, #43	@ 0x2b
 80041ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ee:	f89a 3000 	ldrb.w	r3, [sl]
 80041f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f4:	d015      	beq.n	8004222 <_svfiprintf_r+0xfa>
 80041f6:	9a07      	ldr	r2, [sp, #28]
 80041f8:	4654      	mov	r4, sl
 80041fa:	2000      	movs	r0, #0
 80041fc:	f04f 0c0a 	mov.w	ip, #10
 8004200:	4621      	mov	r1, r4
 8004202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004206:	3b30      	subs	r3, #48	@ 0x30
 8004208:	2b09      	cmp	r3, #9
 800420a:	d94b      	bls.n	80042a4 <_svfiprintf_r+0x17c>
 800420c:	b1b0      	cbz	r0, 800423c <_svfiprintf_r+0x114>
 800420e:	9207      	str	r2, [sp, #28]
 8004210:	e014      	b.n	800423c <_svfiprintf_r+0x114>
 8004212:	eba0 0308 	sub.w	r3, r0, r8
 8004216:	fa09 f303 	lsl.w	r3, r9, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	46a2      	mov	sl, r4
 8004220:	e7d2      	b.n	80041c8 <_svfiprintf_r+0xa0>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	9103      	str	r1, [sp, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfbb      	ittet	lt
 800422e:	425b      	neglt	r3, r3
 8004230:	f042 0202 	orrlt.w	r2, r2, #2
 8004234:	9307      	strge	r3, [sp, #28]
 8004236:	9307      	strlt	r3, [sp, #28]
 8004238:	bfb8      	it	lt
 800423a:	9204      	strlt	r2, [sp, #16]
 800423c:	7823      	ldrb	r3, [r4, #0]
 800423e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004240:	d10a      	bne.n	8004258 <_svfiprintf_r+0x130>
 8004242:	7863      	ldrb	r3, [r4, #1]
 8004244:	2b2a      	cmp	r3, #42	@ 0x2a
 8004246:	d132      	bne.n	80042ae <_svfiprintf_r+0x186>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	1d1a      	adds	r2, r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	9203      	str	r2, [sp, #12]
 8004250:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004254:	3402      	adds	r4, #2
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800431c <_svfiprintf_r+0x1f4>
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	2203      	movs	r2, #3
 8004260:	4650      	mov	r0, sl
 8004262:	f7fb ffbd 	bl	80001e0 <memchr>
 8004266:	b138      	cbz	r0, 8004278 <_svfiprintf_r+0x150>
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	eba0 000a 	sub.w	r0, r0, sl
 800426e:	2240      	movs	r2, #64	@ 0x40
 8004270:	4082      	lsls	r2, r0
 8004272:	4313      	orrs	r3, r2
 8004274:	3401      	adds	r4, #1
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427c:	4824      	ldr	r0, [pc, #144]	@ (8004310 <_svfiprintf_r+0x1e8>)
 800427e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004282:	2206      	movs	r2, #6
 8004284:	f7fb ffac 	bl	80001e0 <memchr>
 8004288:	2800      	cmp	r0, #0
 800428a:	d036      	beq.n	80042fa <_svfiprintf_r+0x1d2>
 800428c:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <_svfiprintf_r+0x1ec>)
 800428e:	bb1b      	cbnz	r3, 80042d8 <_svfiprintf_r+0x1b0>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	3307      	adds	r3, #7
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	3308      	adds	r3, #8
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429e:	4433      	add	r3, r6
 80042a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a2:	e76a      	b.n	800417a <_svfiprintf_r+0x52>
 80042a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a8:	460c      	mov	r4, r1
 80042aa:	2001      	movs	r0, #1
 80042ac:	e7a8      	b.n	8004200 <_svfiprintf_r+0xd8>
 80042ae:	2300      	movs	r3, #0
 80042b0:	3401      	adds	r4, #1
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 0c0a 	mov.w	ip, #10
 80042ba:	4620      	mov	r0, r4
 80042bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c0:	3a30      	subs	r2, #48	@ 0x30
 80042c2:	2a09      	cmp	r2, #9
 80042c4:	d903      	bls.n	80042ce <_svfiprintf_r+0x1a6>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0c6      	beq.n	8004258 <_svfiprintf_r+0x130>
 80042ca:	9105      	str	r1, [sp, #20]
 80042cc:	e7c4      	b.n	8004258 <_svfiprintf_r+0x130>
 80042ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d2:	4604      	mov	r4, r0
 80042d4:	2301      	movs	r3, #1
 80042d6:	e7f0      	b.n	80042ba <_svfiprintf_r+0x192>
 80042d8:	ab03      	add	r3, sp, #12
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	462a      	mov	r2, r5
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <_svfiprintf_r+0x1f0>)
 80042e0:	a904      	add	r1, sp, #16
 80042e2:	4638      	mov	r0, r7
 80042e4:	f3af 8000 	nop.w
 80042e8:	1c42      	adds	r2, r0, #1
 80042ea:	4606      	mov	r6, r0
 80042ec:	d1d6      	bne.n	800429c <_svfiprintf_r+0x174>
 80042ee:	89ab      	ldrh	r3, [r5, #12]
 80042f0:	065b      	lsls	r3, r3, #25
 80042f2:	f53f af2d 	bmi.w	8004150 <_svfiprintf_r+0x28>
 80042f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042f8:	e72c      	b.n	8004154 <_svfiprintf_r+0x2c>
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	462a      	mov	r2, r5
 8004300:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <_svfiprintf_r+0x1f0>)
 8004302:	a904      	add	r1, sp, #16
 8004304:	4638      	mov	r0, r7
 8004306:	f000 f879 	bl	80043fc <_printf_i>
 800430a:	e7ed      	b.n	80042e8 <_svfiprintf_r+0x1c0>
 800430c:	08004884 	.word	0x08004884
 8004310:	0800488e 	.word	0x0800488e
 8004314:	00000000 	.word	0x00000000
 8004318:	08004071 	.word	0x08004071
 800431c:	0800488a 	.word	0x0800488a

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4698      	mov	r8, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004330:	4293      	cmp	r3, r2
 8004332:	bfb8      	it	lt
 8004334:	4613      	movlt	r3, r2
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800433c:	4607      	mov	r7, r0
 800433e:	460c      	mov	r4, r1
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc26      	bgt.n	80043b6 <_printf_common+0x96>
 8004368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	3b00      	subs	r3, #0
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d42b      	bmi.n	80043d0 <_printf_common+0xb0>
 8004378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800437c:	4641      	mov	r1, r8
 800437e:	4638      	mov	r0, r7
 8004380:	47c8      	blx	r9
 8004382:	3001      	adds	r0, #1
 8004384:	d01e      	beq.n	80043c4 <_printf_common+0xa4>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf02      	ittt	eq
 8004392:	68e5      	ldreq	r5, [r4, #12]
 8004394:	6833      	ldreq	r3, [r6, #0]
 8004396:	1aed      	subeq	r5, r5, r3
 8004398:	68a3      	ldr	r3, [r4, #8]
 800439a:	bf0c      	ite	eq
 800439c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a0:	2500      	movne	r5, #0
 80043a2:	4293      	cmp	r3, r2
 80043a4:	bfc4      	itt	gt
 80043a6:	1a9b      	subgt	r3, r3, r2
 80043a8:	18ed      	addgt	r5, r5, r3
 80043aa:	2600      	movs	r6, #0
 80043ac:	341a      	adds	r4, #26
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d11a      	bne.n	80043e8 <_printf_common+0xc8>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e008      	b.n	80043c8 <_printf_common+0xa8>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4641      	mov	r1, r8
 80043bc:	4638      	mov	r0, r7
 80043be:	47c8      	blx	r9
 80043c0:	3001      	adds	r0, #1
 80043c2:	d103      	bne.n	80043cc <_printf_common+0xac>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	3501      	adds	r5, #1
 80043ce:	e7c6      	b.n	800435e <_printf_common+0x3e>
 80043d0:	18e1      	adds	r1, r4, r3
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	2030      	movs	r0, #48	@ 0x30
 80043d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043da:	4422      	add	r2, r4
 80043dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043e4:	3302      	adds	r3, #2
 80043e6:	e7c7      	b.n	8004378 <_printf_common+0x58>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4622      	mov	r2, r4
 80043ec:	4641      	mov	r1, r8
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c8      	blx	r9
 80043f2:	3001      	adds	r0, #1
 80043f4:	d0e6      	beq.n	80043c4 <_printf_common+0xa4>
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7d9      	b.n	80043ae <_printf_common+0x8e>
	...

080043fc <_printf_i>:
 80043fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	7e0f      	ldrb	r7, [r1, #24]
 8004402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004404:	2f78      	cmp	r7, #120	@ 0x78
 8004406:	4691      	mov	r9, r2
 8004408:	4680      	mov	r8, r0
 800440a:	460c      	mov	r4, r1
 800440c:	469a      	mov	sl, r3
 800440e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004412:	d807      	bhi.n	8004424 <_printf_i+0x28>
 8004414:	2f62      	cmp	r7, #98	@ 0x62
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x32>
 8004418:	2f00      	cmp	r7, #0
 800441a:	f000 80d1 	beq.w	80045c0 <_printf_i+0x1c4>
 800441e:	2f58      	cmp	r7, #88	@ 0x58
 8004420:	f000 80b8 	beq.w	8004594 <_printf_i+0x198>
 8004424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800442c:	e03a      	b.n	80044a4 <_printf_i+0xa8>
 800442e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004432:	2b15      	cmp	r3, #21
 8004434:	d8f6      	bhi.n	8004424 <_printf_i+0x28>
 8004436:	a101      	add	r1, pc, #4	@ (adr r1, 800443c <_printf_i+0x40>)
 8004438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800443c:	08004495 	.word	0x08004495
 8004440:	080044a9 	.word	0x080044a9
 8004444:	08004425 	.word	0x08004425
 8004448:	08004425 	.word	0x08004425
 800444c:	08004425 	.word	0x08004425
 8004450:	08004425 	.word	0x08004425
 8004454:	080044a9 	.word	0x080044a9
 8004458:	08004425 	.word	0x08004425
 800445c:	08004425 	.word	0x08004425
 8004460:	08004425 	.word	0x08004425
 8004464:	08004425 	.word	0x08004425
 8004468:	080045a7 	.word	0x080045a7
 800446c:	080044d3 	.word	0x080044d3
 8004470:	08004561 	.word	0x08004561
 8004474:	08004425 	.word	0x08004425
 8004478:	08004425 	.word	0x08004425
 800447c:	080045c9 	.word	0x080045c9
 8004480:	08004425 	.word	0x08004425
 8004484:	080044d3 	.word	0x080044d3
 8004488:	08004425 	.word	0x08004425
 800448c:	08004425 	.word	0x08004425
 8004490:	08004569 	.word	0x08004569
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6032      	str	r2, [r6, #0]
 800449c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044a4:	2301      	movs	r3, #1
 80044a6:	e09c      	b.n	80045e2 <_printf_i+0x1e6>
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	1d19      	adds	r1, r3, #4
 80044ae:	6031      	str	r1, [r6, #0]
 80044b0:	0606      	lsls	r6, r0, #24
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0xbc>
 80044b4:	681d      	ldr	r5, [r3, #0]
 80044b6:	e003      	b.n	80044c0 <_printf_i+0xc4>
 80044b8:	0645      	lsls	r5, r0, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0xb8>
 80044bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	da03      	bge.n	80044cc <_printf_i+0xd0>
 80044c4:	232d      	movs	r3, #45	@ 0x2d
 80044c6:	426d      	negs	r5, r5
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044cc:	4858      	ldr	r0, [pc, #352]	@ (8004630 <_printf_i+0x234>)
 80044ce:	230a      	movs	r3, #10
 80044d0:	e011      	b.n	80044f6 <_printf_i+0xfa>
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	0608      	lsls	r0, r1, #24
 80044d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80044dc:	d402      	bmi.n	80044e4 <_printf_i+0xe8>
 80044de:	0649      	lsls	r1, r1, #25
 80044e0:	bf48      	it	mi
 80044e2:	b2ad      	uxthmi	r5, r5
 80044e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80044e6:	4852      	ldr	r0, [pc, #328]	@ (8004630 <_printf_i+0x234>)
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	bf14      	ite	ne
 80044ec:	230a      	movne	r3, #10
 80044ee:	2308      	moveq	r3, #8
 80044f0:	2100      	movs	r1, #0
 80044f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044f6:	6866      	ldr	r6, [r4, #4]
 80044f8:	60a6      	str	r6, [r4, #8]
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	db05      	blt.n	800450a <_printf_i+0x10e>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	432e      	orrs	r6, r5
 8004502:	f021 0104 	bic.w	r1, r1, #4
 8004506:	6021      	str	r1, [r4, #0]
 8004508:	d04b      	beq.n	80045a2 <_printf_i+0x1a6>
 800450a:	4616      	mov	r6, r2
 800450c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004510:	fb03 5711 	mls	r7, r3, r1, r5
 8004514:	5dc7      	ldrb	r7, [r0, r7]
 8004516:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800451a:	462f      	mov	r7, r5
 800451c:	42bb      	cmp	r3, r7
 800451e:	460d      	mov	r5, r1
 8004520:	d9f4      	bls.n	800450c <_printf_i+0x110>
 8004522:	2b08      	cmp	r3, #8
 8004524:	d10b      	bne.n	800453e <_printf_i+0x142>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	07df      	lsls	r7, r3, #31
 800452a:	d508      	bpl.n	800453e <_printf_i+0x142>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	6861      	ldr	r1, [r4, #4]
 8004530:	4299      	cmp	r1, r3
 8004532:	bfde      	ittt	le
 8004534:	2330      	movle	r3, #48	@ 0x30
 8004536:	f806 3c01 	strble.w	r3, [r6, #-1]
 800453a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800453e:	1b92      	subs	r2, r2, r6
 8004540:	6122      	str	r2, [r4, #16]
 8004542:	f8cd a000 	str.w	sl, [sp]
 8004546:	464b      	mov	r3, r9
 8004548:	aa03      	add	r2, sp, #12
 800454a:	4621      	mov	r1, r4
 800454c:	4640      	mov	r0, r8
 800454e:	f7ff fee7 	bl	8004320 <_printf_common>
 8004552:	3001      	adds	r0, #1
 8004554:	d14a      	bne.n	80045ec <_printf_i+0x1f0>
 8004556:	f04f 30ff 	mov.w	r0, #4294967295
 800455a:	b004      	add	sp, #16
 800455c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	f043 0320 	orr.w	r3, r3, #32
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	4832      	ldr	r0, [pc, #200]	@ (8004634 <_printf_i+0x238>)
 800456a:	2778      	movs	r7, #120	@ 0x78
 800456c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	6831      	ldr	r1, [r6, #0]
 8004574:	061f      	lsls	r7, r3, #24
 8004576:	f851 5b04 	ldr.w	r5, [r1], #4
 800457a:	d402      	bmi.n	8004582 <_printf_i+0x186>
 800457c:	065f      	lsls	r7, r3, #25
 800457e:	bf48      	it	mi
 8004580:	b2ad      	uxthmi	r5, r5
 8004582:	6031      	str	r1, [r6, #0]
 8004584:	07d9      	lsls	r1, r3, #31
 8004586:	bf44      	itt	mi
 8004588:	f043 0320 	orrmi.w	r3, r3, #32
 800458c:	6023      	strmi	r3, [r4, #0]
 800458e:	b11d      	cbz	r5, 8004598 <_printf_i+0x19c>
 8004590:	2310      	movs	r3, #16
 8004592:	e7ad      	b.n	80044f0 <_printf_i+0xf4>
 8004594:	4826      	ldr	r0, [pc, #152]	@ (8004630 <_printf_i+0x234>)
 8004596:	e7e9      	b.n	800456c <_printf_i+0x170>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	f023 0320 	bic.w	r3, r3, #32
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	e7f6      	b.n	8004590 <_printf_i+0x194>
 80045a2:	4616      	mov	r6, r2
 80045a4:	e7bd      	b.n	8004522 <_printf_i+0x126>
 80045a6:	6833      	ldr	r3, [r6, #0]
 80045a8:	6825      	ldr	r5, [r4, #0]
 80045aa:	6961      	ldr	r1, [r4, #20]
 80045ac:	1d18      	adds	r0, r3, #4
 80045ae:	6030      	str	r0, [r6, #0]
 80045b0:	062e      	lsls	r6, r5, #24
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	d501      	bpl.n	80045ba <_printf_i+0x1be>
 80045b6:	6019      	str	r1, [r3, #0]
 80045b8:	e002      	b.n	80045c0 <_printf_i+0x1c4>
 80045ba:	0668      	lsls	r0, r5, #25
 80045bc:	d5fb      	bpl.n	80045b6 <_printf_i+0x1ba>
 80045be:	8019      	strh	r1, [r3, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	4616      	mov	r6, r2
 80045c6:	e7bc      	b.n	8004542 <_printf_i+0x146>
 80045c8:	6833      	ldr	r3, [r6, #0]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	6032      	str	r2, [r6, #0]
 80045ce:	681e      	ldr	r6, [r3, #0]
 80045d0:	6862      	ldr	r2, [r4, #4]
 80045d2:	2100      	movs	r1, #0
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7fb fe03 	bl	80001e0 <memchr>
 80045da:	b108      	cbz	r0, 80045e0 <_printf_i+0x1e4>
 80045dc:	1b80      	subs	r0, r0, r6
 80045de:	6060      	str	r0, [r4, #4]
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	6123      	str	r3, [r4, #16]
 80045e4:	2300      	movs	r3, #0
 80045e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ea:	e7aa      	b.n	8004542 <_printf_i+0x146>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	4632      	mov	r2, r6
 80045f0:	4649      	mov	r1, r9
 80045f2:	4640      	mov	r0, r8
 80045f4:	47d0      	blx	sl
 80045f6:	3001      	adds	r0, #1
 80045f8:	d0ad      	beq.n	8004556 <_printf_i+0x15a>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	079b      	lsls	r3, r3, #30
 80045fe:	d413      	bmi.n	8004628 <_printf_i+0x22c>
 8004600:	68e0      	ldr	r0, [r4, #12]
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	4298      	cmp	r0, r3
 8004606:	bfb8      	it	lt
 8004608:	4618      	movlt	r0, r3
 800460a:	e7a6      	b.n	800455a <_printf_i+0x15e>
 800460c:	2301      	movs	r3, #1
 800460e:	4632      	mov	r2, r6
 8004610:	4649      	mov	r1, r9
 8004612:	4640      	mov	r0, r8
 8004614:	47d0      	blx	sl
 8004616:	3001      	adds	r0, #1
 8004618:	d09d      	beq.n	8004556 <_printf_i+0x15a>
 800461a:	3501      	adds	r5, #1
 800461c:	68e3      	ldr	r3, [r4, #12]
 800461e:	9903      	ldr	r1, [sp, #12]
 8004620:	1a5b      	subs	r3, r3, r1
 8004622:	42ab      	cmp	r3, r5
 8004624:	dcf2      	bgt.n	800460c <_printf_i+0x210>
 8004626:	e7eb      	b.n	8004600 <_printf_i+0x204>
 8004628:	2500      	movs	r5, #0
 800462a:	f104 0619 	add.w	r6, r4, #25
 800462e:	e7f5      	b.n	800461c <_printf_i+0x220>
 8004630:	08004895 	.word	0x08004895
 8004634:	080048a6 	.word	0x080048a6

08004638 <memmove>:
 8004638:	4288      	cmp	r0, r1
 800463a:	b510      	push	{r4, lr}
 800463c:	eb01 0402 	add.w	r4, r1, r2
 8004640:	d902      	bls.n	8004648 <memmove+0x10>
 8004642:	4284      	cmp	r4, r0
 8004644:	4623      	mov	r3, r4
 8004646:	d807      	bhi.n	8004658 <memmove+0x20>
 8004648:	1e43      	subs	r3, r0, #1
 800464a:	42a1      	cmp	r1, r4
 800464c:	d008      	beq.n	8004660 <memmove+0x28>
 800464e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004656:	e7f8      	b.n	800464a <memmove+0x12>
 8004658:	4402      	add	r2, r0
 800465a:	4601      	mov	r1, r0
 800465c:	428a      	cmp	r2, r1
 800465e:	d100      	bne.n	8004662 <memmove+0x2a>
 8004660:	bd10      	pop	{r4, pc}
 8004662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800466a:	e7f7      	b.n	800465c <memmove+0x24>

0800466c <_sbrk_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d06      	ldr	r5, [pc, #24]	@ (8004688 <_sbrk_r+0x1c>)
 8004670:	2300      	movs	r3, #0
 8004672:	4604      	mov	r4, r0
 8004674:	4608      	mov	r0, r1
 8004676:	602b      	str	r3, [r5, #0]
 8004678:	f7fc ff94 	bl	80015a4 <_sbrk>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_sbrk_r+0x1a>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_sbrk_r+0x1a>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200002d8 	.word	0x200002d8

0800468c <memcpy>:
 800468c:	440a      	add	r2, r1
 800468e:	4291      	cmp	r1, r2
 8004690:	f100 33ff 	add.w	r3, r0, #4294967295
 8004694:	d100      	bne.n	8004698 <memcpy+0xc>
 8004696:	4770      	bx	lr
 8004698:	b510      	push	{r4, lr}
 800469a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a2:	4291      	cmp	r1, r2
 80046a4:	d1f9      	bne.n	800469a <memcpy+0xe>
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <_realloc_r>:
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	4607      	mov	r7, r0
 80046ae:	4614      	mov	r4, r2
 80046b0:	460d      	mov	r5, r1
 80046b2:	b921      	cbnz	r1, 80046be <_realloc_r+0x16>
 80046b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b8:	4611      	mov	r1, r2
 80046ba:	f7ff bc4d 	b.w	8003f58 <_malloc_r>
 80046be:	b92a      	cbnz	r2, 80046cc <_realloc_r+0x24>
 80046c0:	f7ff fbde 	bl	8003e80 <_free_r>
 80046c4:	4625      	mov	r5, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046cc:	f000 f81a 	bl	8004704 <_malloc_usable_size_r>
 80046d0:	4284      	cmp	r4, r0
 80046d2:	4606      	mov	r6, r0
 80046d4:	d802      	bhi.n	80046dc <_realloc_r+0x34>
 80046d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046da:	d8f4      	bhi.n	80046c6 <_realloc_r+0x1e>
 80046dc:	4621      	mov	r1, r4
 80046de:	4638      	mov	r0, r7
 80046e0:	f7ff fc3a 	bl	8003f58 <_malloc_r>
 80046e4:	4680      	mov	r8, r0
 80046e6:	b908      	cbnz	r0, 80046ec <_realloc_r+0x44>
 80046e8:	4645      	mov	r5, r8
 80046ea:	e7ec      	b.n	80046c6 <_realloc_r+0x1e>
 80046ec:	42b4      	cmp	r4, r6
 80046ee:	4622      	mov	r2, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	bf28      	it	cs
 80046f4:	4632      	movcs	r2, r6
 80046f6:	f7ff ffc9 	bl	800468c <memcpy>
 80046fa:	4629      	mov	r1, r5
 80046fc:	4638      	mov	r0, r7
 80046fe:	f7ff fbbf 	bl	8003e80 <_free_r>
 8004702:	e7f1      	b.n	80046e8 <_realloc_r+0x40>

08004704 <_malloc_usable_size_r>:
 8004704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004708:	1f18      	subs	r0, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfbc      	itt	lt
 800470e:	580b      	ldrlt	r3, [r1, r0]
 8004710:	18c0      	addlt	r0, r0, r3
 8004712:	4770      	bx	lr
 8004714:	0000      	movs	r0, r0
	...

08004718 <ceil>:
 8004718:	ec51 0b10 	vmov	r0, r1, d0
 800471c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004724:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004728:	2e13      	cmp	r6, #19
 800472a:	460c      	mov	r4, r1
 800472c:	4605      	mov	r5, r0
 800472e:	4680      	mov	r8, r0
 8004730:	dc2e      	bgt.n	8004790 <ceil+0x78>
 8004732:	2e00      	cmp	r6, #0
 8004734:	da11      	bge.n	800475a <ceil+0x42>
 8004736:	a332      	add	r3, pc, #200	@ (adr r3, 8004800 <ceil+0xe8>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb fda6 	bl	800028c <__adddf3>
 8004740:	2200      	movs	r2, #0
 8004742:	2300      	movs	r3, #0
 8004744:	f7fc f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8004748:	b120      	cbz	r0, 8004754 <ceil+0x3c>
 800474a:	2c00      	cmp	r4, #0
 800474c:	db4f      	blt.n	80047ee <ceil+0xd6>
 800474e:	4325      	orrs	r5, r4
 8004750:	d151      	bne.n	80047f6 <ceil+0xde>
 8004752:	462c      	mov	r4, r5
 8004754:	4621      	mov	r1, r4
 8004756:	4628      	mov	r0, r5
 8004758:	e023      	b.n	80047a2 <ceil+0x8a>
 800475a:	4f2b      	ldr	r7, [pc, #172]	@ (8004808 <ceil+0xf0>)
 800475c:	4137      	asrs	r7, r6
 800475e:	ea01 0307 	and.w	r3, r1, r7
 8004762:	4303      	orrs	r3, r0
 8004764:	d01d      	beq.n	80047a2 <ceil+0x8a>
 8004766:	a326      	add	r3, pc, #152	@ (adr r3, 8004800 <ceil+0xe8>)
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f7fb fd8e 	bl	800028c <__adddf3>
 8004770:	2200      	movs	r2, #0
 8004772:	2300      	movs	r3, #0
 8004774:	f7fc f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 8004778:	2800      	cmp	r0, #0
 800477a:	d0eb      	beq.n	8004754 <ceil+0x3c>
 800477c:	2c00      	cmp	r4, #0
 800477e:	bfc2      	ittt	gt
 8004780:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8004784:	4133      	asrgt	r3, r6
 8004786:	18e4      	addgt	r4, r4, r3
 8004788:	ea24 0407 	bic.w	r4, r4, r7
 800478c:	2500      	movs	r5, #0
 800478e:	e7e1      	b.n	8004754 <ceil+0x3c>
 8004790:	2e33      	cmp	r6, #51	@ 0x33
 8004792:	dd0a      	ble.n	80047aa <ceil+0x92>
 8004794:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004798:	d103      	bne.n	80047a2 <ceil+0x8a>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	f7fb fd75 	bl	800028c <__adddf3>
 80047a2:	ec41 0b10 	vmov	d0, r0, r1
 80047a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047aa:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80047ae:	f04f 37ff 	mov.w	r7, #4294967295
 80047b2:	40df      	lsrs	r7, r3
 80047b4:	4238      	tst	r0, r7
 80047b6:	d0f4      	beq.n	80047a2 <ceil+0x8a>
 80047b8:	a311      	add	r3, pc, #68	@ (adr r3, 8004800 <ceil+0xe8>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb fd65 	bl	800028c <__adddf3>
 80047c2:	2200      	movs	r2, #0
 80047c4:	2300      	movs	r3, #0
 80047c6:	f7fc f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d0c2      	beq.n	8004754 <ceil+0x3c>
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	dd0a      	ble.n	80047e8 <ceil+0xd0>
 80047d2:	2e14      	cmp	r6, #20
 80047d4:	d101      	bne.n	80047da <ceil+0xc2>
 80047d6:	3401      	adds	r4, #1
 80047d8:	e006      	b.n	80047e8 <ceil+0xd0>
 80047da:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80047de:	2301      	movs	r3, #1
 80047e0:	40b3      	lsls	r3, r6
 80047e2:	441d      	add	r5, r3
 80047e4:	45a8      	cmp	r8, r5
 80047e6:	d8f6      	bhi.n	80047d6 <ceil+0xbe>
 80047e8:	ea25 0507 	bic.w	r5, r5, r7
 80047ec:	e7b2      	b.n	8004754 <ceil+0x3c>
 80047ee:	2500      	movs	r5, #0
 80047f0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80047f4:	e7ae      	b.n	8004754 <ceil+0x3c>
 80047f6:	4c05      	ldr	r4, [pc, #20]	@ (800480c <ceil+0xf4>)
 80047f8:	2500      	movs	r5, #0
 80047fa:	e7ab      	b.n	8004754 <ceil+0x3c>
 80047fc:	f3af 8000 	nop.w
 8004800:	8800759c 	.word	0x8800759c
 8004804:	7e37e43c 	.word	0x7e37e43c
 8004808:	000fffff 	.word	0x000fffff
 800480c:	3ff00000 	.word	0x3ff00000

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
